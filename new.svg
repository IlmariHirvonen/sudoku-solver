<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="15698"><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="0.0127%" y="853" width="0.0255%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="0.2627%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="0.0255%" y="837" width="0.0127%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.2755%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="0.0382%" y="853" width="0.0127%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.2882%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="0.0382%" y="837" width="0.0127%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.2882%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="0.0382%" y="821" width="0.0127%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.2882%" y="831.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.0701%" y="837" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="2"/><text x="0.3201%" y="847.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="0.0573%" y="853" width="0.0319%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="5"/><text x="0.3073%" y="863.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (3 samples, 0.02%)</title><rect x="0.0956%" y="853" width="0.0191%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="3"/><text x="0.3456%" y="863.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="0.1847%" y="661" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="29" fg:w="2"/><text x="0.4347%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.2612%" y="629" width="0.0127%" height="15" fill="rgb(220,122,19)" fg:x="41" fg:w="2"/><text x="0.5112%" y="639.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="0.2739%" y="629" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="2"/><text x="0.5239%" y="639.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="0.3440%" y="565" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="54" fg:w="2"/><text x="0.5940%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.3695%" y="549" width="0.0127%" height="15" fill="rgb(216,20,37)" fg:x="58" fg:w="2"/><text x="0.6195%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.3822%" y="549" width="0.0127%" height="15" fill="rgb(206,188,39)" fg:x="60" fg:w="2"/><text x="0.6322%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.4650%" y="517" width="0.0127%" height="15" fill="rgb(217,207,13)" fg:x="73" fg:w="2"/><text x="0.7150%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="0.4778%" y="517" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="75" fg:w="2"/><text x="0.7278%" y="527.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="0.4969%" y="517" width="0.0127%" height="15" fill="rgb(225,20,46)" fg:x="78" fg:w="2"/><text x="0.7469%" y="527.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="0.5096%" y="517" width="0.0191%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="3"/><text x="0.7596%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="0.5542%" y="501" width="0.0191%" height="15" fill="rgb(221,200,47)" fg:x="87" fg:w="3"/><text x="0.8042%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="0.6243%" y="485" width="0.0191%" height="15" fill="rgb(226,26,5)" fg:x="98" fg:w="3"/><text x="0.8743%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="0.6434%" y="485" width="0.0255%" height="15" fill="rgb(249,33,26)" fg:x="101" fg:w="4"/><text x="0.8934%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.6689%" y="485" width="0.0127%" height="15" fill="rgb(235,183,28)" fg:x="105" fg:w="2"/><text x="0.9189%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="0.6880%" y="485" width="0.0191%" height="15" fill="rgb(221,5,38)" fg:x="108" fg:w="3"/><text x="0.9380%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="0.7071%" y="485" width="0.0255%" height="15" fill="rgb(247,18,42)" fg:x="111" fg:w="4"/><text x="0.9571%" y="495.50"></text></g><g><title>sudoku-solver`__rdl_alloc (4 samples, 0.03%)</title><rect x="0.7326%" y="485" width="0.0255%" height="15" fill="rgb(241,131,45)" fg:x="115" fg:w="4"/><text x="0.9826%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="0.8281%" y="469" width="0.0127%" height="15" fill="rgb(249,31,29)" fg:x="130" fg:w="2"/><text x="1.0781%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.8409%" y="469" width="0.0127%" height="15" fill="rgb(225,111,53)" fg:x="132" fg:w="2"/><text x="1.0909%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="0.8536%" y="469" width="0.0573%" height="15" fill="rgb(238,160,17)" fg:x="134" fg:w="9"/><text x="1.1036%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="0.9109%" y="469" width="0.0382%" height="15" fill="rgb(214,148,48)" fg:x="143" fg:w="6"/><text x="1.1609%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="0.9492%" y="469" width="0.0127%" height="15" fill="rgb(232,36,49)" fg:x="149" fg:w="2"/><text x="1.1992%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (5 samples, 0.03%)</title><rect x="0.9619%" y="469" width="0.0319%" height="15" fill="rgb(209,103,24)" fg:x="151" fg:w="5"/><text x="1.2119%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (9 samples, 0.06%)</title><rect x="0.9938%" y="469" width="0.0573%" height="15" fill="rgb(229,88,8)" fg:x="156" fg:w="9"/><text x="1.2438%" y="479.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="1.0511%" y="469" width="0.0191%" height="15" fill="rgb(213,181,19)" fg:x="165" fg:w="3"/><text x="1.3011%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="1.1466%" y="453" width="0.0191%" height="15" fill="rgb(254,191,54)" fg:x="180" fg:w="3"/><text x="1.3966%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="1.1658%" y="453" width="0.0319%" height="15" fill="rgb(241,83,37)" fg:x="183" fg:w="5"/><text x="1.4158%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="1.1976%" y="453" width="0.0319%" height="15" fill="rgb(233,36,39)" fg:x="188" fg:w="5"/><text x="1.4476%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="1.2295%" y="453" width="0.0191%" height="15" fill="rgb(226,3,54)" fg:x="193" fg:w="3"/><text x="1.4795%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="1.2613%" y="453" width="0.0191%" height="15" fill="rgb(245,192,40)" fg:x="198" fg:w="3"/><text x="1.5113%" y="463.50"></text></g><g><title>sudoku-solver`__rdl_alloc (5 samples, 0.03%)</title><rect x="1.2804%" y="453" width="0.0319%" height="15" fill="rgb(238,167,29)" fg:x="201" fg:w="5"/><text x="1.5304%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.3951%" y="437" width="0.0127%" height="15" fill="rgb(232,182,51)" fg:x="219" fg:w="2"/><text x="1.6451%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.04%)</title><rect x="1.4078%" y="437" width="0.0446%" height="15" fill="rgb(231,60,39)" fg:x="221" fg:w="7"/><text x="1.6578%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="1.4524%" y="437" width="0.0382%" height="15" fill="rgb(208,69,12)" fg:x="228" fg:w="6"/><text x="1.7024%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="1.4906%" y="437" width="0.0191%" height="15" fill="rgb(235,93,37)" fg:x="234" fg:w="3"/><text x="1.7406%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (6 samples, 0.04%)</title><rect x="1.5161%" y="437" width="0.0382%" height="15" fill="rgb(213,116,39)" fg:x="238" fg:w="6"/><text x="1.7661%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="1.5543%" y="437" width="0.0127%" height="15" fill="rgb(222,207,29)" fg:x="244" fg:w="2"/><text x="1.8043%" y="447.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="1.5671%" y="437" width="0.0127%" height="15" fill="rgb(206,96,30)" fg:x="246" fg:w="2"/><text x="1.8171%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="1.6563%" y="421" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="260" fg:w="2"/><text x="1.9063%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="1.6690%" y="421" width="0.0255%" height="15" fill="rgb(250,191,14)" fg:x="262" fg:w="4"/><text x="1.9190%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="1.6945%" y="421" width="0.0382%" height="15" fill="rgb(239,60,40)" fg:x="266" fg:w="6"/><text x="1.9445%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="1.7327%" y="421" width="0.0127%" height="15" fill="rgb(206,27,48)" fg:x="272" fg:w="2"/><text x="1.9827%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="1.7454%" y="421" width="0.0127%" height="15" fill="rgb(225,35,8)" fg:x="274" fg:w="2"/><text x="1.9954%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.8474%" y="405" width="0.0127%" height="15" fill="rgb(250,213,24)" fg:x="290" fg:w="2"/><text x="2.0974%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.03%)</title><rect x="1.8601%" y="405" width="0.0255%" height="15" fill="rgb(247,123,22)" fg:x="292" fg:w="4"/><text x="2.1101%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="1.8856%" y="405" width="0.0191%" height="15" fill="rgb(231,138,38)" fg:x="296" fg:w="3"/><text x="2.1356%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="1.9047%" y="405" width="0.0127%" height="15" fill="rgb(231,145,46)" fg:x="299" fg:w="2"/><text x="2.1547%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="1.9174%" y="405" width="0.0255%" height="15" fill="rgb(251,118,11)" fg:x="301" fg:w="4"/><text x="2.1674%" y="415.50"></text></g><g><title>sudoku-solver`__rdl_alloc (6 samples, 0.04%)</title><rect x="1.9493%" y="405" width="0.0382%" height="15" fill="rgb(217,147,25)" fg:x="306" fg:w="6"/><text x="2.1993%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="2.0321%" y="389" width="0.0319%" height="15" fill="rgb(247,81,37)" fg:x="319" fg:w="5"/><text x="2.2821%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="2.0640%" y="389" width="0.0319%" height="15" fill="rgb(209,12,38)" fg:x="324" fg:w="5"/><text x="2.3140%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (5 samples, 0.03%)</title><rect x="2.1085%" y="389" width="0.0319%" height="15" fill="rgb(227,1,9)" fg:x="331" fg:w="5"/><text x="2.3585%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="2.1404%" y="389" width="0.0127%" height="15" fill="rgb(248,47,43)" fg:x="336" fg:w="2"/><text x="2.3904%" y="399.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="2.1531%" y="389" width="0.0191%" height="15" fill="rgb(221,10,30)" fg:x="338" fg:w="3"/><text x="2.4031%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.05%)</title><rect x="2.2360%" y="373" width="0.0510%" height="15" fill="rgb(210,229,1)" fg:x="351" fg:w="8"/><text x="2.4860%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="2.2869%" y="373" width="0.0127%" height="15" fill="rgb(222,148,37)" fg:x="359" fg:w="2"/><text x="2.5369%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="2.2997%" y="373" width="0.0255%" height="15" fill="rgb(234,67,33)" fg:x="361" fg:w="4"/><text x="2.5497%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.3251%" y="373" width="0.0127%" height="15" fill="rgb(247,98,35)" fg:x="365" fg:w="2"/><text x="2.5751%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="2.3379%" y="373" width="0.0127%" height="15" fill="rgb(247,138,52)" fg:x="367" fg:w="2"/><text x="2.5879%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="2.3506%" y="373" width="0.0255%" height="15" fill="rgb(213,79,30)" fg:x="369" fg:w="4"/><text x="2.6006%" y="383.50"></text></g><g><title>sudoku-solver`__rdl_alloc (5 samples, 0.03%)</title><rect x="2.3761%" y="373" width="0.0319%" height="15" fill="rgb(246,177,23)" fg:x="373" fg:w="5"/><text x="2.6261%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="2.4462%" y="357" width="0.0127%" height="15" fill="rgb(230,62,27)" fg:x="384" fg:w="2"/><text x="2.6962%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="2.4589%" y="357" width="0.0319%" height="15" fill="rgb(216,154,8)" fg:x="386" fg:w="5"/><text x="2.7089%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="2.4908%" y="357" width="0.0127%" height="15" fill="rgb(244,35,45)" fg:x="391" fg:w="2"/><text x="2.7408%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="2.5035%" y="357" width="0.0255%" height="15" fill="rgb(251,115,12)" fg:x="393" fg:w="4"/><text x="2.7535%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="2.5354%" y="357" width="0.0127%" height="15" fill="rgb(240,54,50)" fg:x="398" fg:w="2"/><text x="2.7854%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="2.5481%" y="357" width="0.0127%" height="15" fill="rgb(233,84,52)" fg:x="400" fg:w="2"/><text x="2.7981%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="2.5927%" y="341" width="0.0127%" height="15" fill="rgb(207,117,47)" fg:x="407" fg:w="2"/><text x="2.8427%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="2.6054%" y="341" width="0.0127%" height="15" fill="rgb(249,43,39)" fg:x="409" fg:w="2"/><text x="2.8554%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="2.6182%" y="341" width="0.0319%" height="15" fill="rgb(209,38,44)" fg:x="411" fg:w="5"/><text x="2.8682%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.03%)</title><rect x="2.6564%" y="341" width="0.0319%" height="15" fill="rgb(236,212,23)" fg:x="417" fg:w="5"/><text x="2.9064%" y="351.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="2.6882%" y="341" width="0.0191%" height="15" fill="rgb(242,79,21)" fg:x="422" fg:w="3"/><text x="2.9382%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="2.7519%" y="325" width="0.0191%" height="15" fill="rgb(211,96,35)" fg:x="432" fg:w="3"/><text x="3.0019%" y="335.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="2.7711%" y="325" width="0.0191%" height="15" fill="rgb(253,215,40)" fg:x="435" fg:w="3"/><text x="3.0211%" y="335.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="2.8029%" y="309" width="0.0127%" height="15" fill="rgb(211,81,21)" fg:x="440" fg:w="2"/><text x="3.0529%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="2.8730%" y="213" width="0.0127%" height="15" fill="rgb(208,190,38)" fg:x="451" fg:w="2"/><text x="3.1230%" y="223.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="2.8985%" y="181" width="0.0127%" height="15" fill="rgb(235,213,38)" fg:x="455" fg:w="2"/><text x="3.1485%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="2.9494%" y="133" width="0.0127%" height="15" fill="rgb(237,122,38)" fg:x="463" fg:w="2"/><text x="3.1994%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (6 samples, 0.04%)</title><rect x="2.9876%" y="69" width="0.0382%" height="15" fill="rgb(244,218,35)" fg:x="469" fg:w="6"/><text x="3.2376%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.03%)</title><rect x="2.9940%" y="53" width="0.0319%" height="15" fill="rgb(240,68,47)" fg:x="470" fg:w="5"/><text x="3.2440%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (5 samples, 0.03%)</title><rect x="2.9940%" y="37" width="0.0319%" height="15" fill="rgb(210,16,53)" fg:x="470" fg:w="5"/><text x="3.2440%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12 samples, 0.08%)</title><rect x="2.9876%" y="85" width="0.0764%" height="15" fill="rgb(235,124,12)" fg:x="469" fg:w="12"/><text x="3.2376%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.04%)</title><rect x="3.0259%" y="69" width="0.0382%" height="15" fill="rgb(224,169,11)" fg:x="475" fg:w="6"/><text x="3.2759%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.03%)</title><rect x="3.0386%" y="53" width="0.0255%" height="15" fill="rgb(250,166,2)" fg:x="477" fg:w="4"/><text x="3.2886%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (27 samples, 0.17%)</title><rect x="2.9876%" y="101" width="0.1720%" height="15" fill="rgb(242,216,29)" fg:x="469" fg:w="27"/><text x="3.2376%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (15 samples, 0.10%)</title><rect x="3.0641%" y="85" width="0.0956%" height="15" fill="rgb(230,116,27)" fg:x="481" fg:w="15"/><text x="3.3141%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (14 samples, 0.09%)</title><rect x="3.0705%" y="69" width="0.0892%" height="15" fill="rgb(228,99,48)" fg:x="482" fg:w="14"/><text x="3.3205%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (37 samples, 0.24%)</title><rect x="2.9813%" y="117" width="0.2357%" height="15" fill="rgb(253,11,6)" fg:x="468" fg:w="37"/><text x="3.2313%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 0.06%)</title><rect x="3.1596%" y="101" width="0.0573%" height="15" fill="rgb(247,143,39)" fg:x="496" fg:w="9"/><text x="3.4096%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (7 samples, 0.04%)</title><rect x="3.1724%" y="85" width="0.0446%" height="15" fill="rgb(236,97,10)" fg:x="498" fg:w="7"/><text x="3.4224%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="3.2170%" y="101" width="0.0127%" height="15" fill="rgb(233,208,19)" fg:x="505" fg:w="2"/><text x="3.4670%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (48 samples, 0.31%)</title><rect x="2.9813%" y="133" width="0.3058%" height="15" fill="rgb(216,164,2)" fg:x="468" fg:w="48"/><text x="3.2313%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.07%)</title><rect x="3.2170%" y="117" width="0.0701%" height="15" fill="rgb(220,129,5)" fg:x="505" fg:w="11"/><text x="3.4670%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.06%)</title><rect x="3.2297%" y="101" width="0.0573%" height="15" fill="rgb(242,17,10)" fg:x="507" fg:w="9"/><text x="3.4797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="3.2998%" y="117" width="0.0191%" height="15" fill="rgb(242,107,0)" fg:x="518" fg:w="3"/><text x="3.5498%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="3.3062%" y="101" width="0.0127%" height="15" fill="rgb(251,28,31)" fg:x="519" fg:w="2"/><text x="3.5562%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (84 samples, 0.54%)</title><rect x="2.9431%" y="149" width="0.5351%" height="15" fill="rgb(233,223,10)" fg:x="462" fg:w="84"/><text x="3.1931%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (30 samples, 0.19%)</title><rect x="3.2870%" y="133" width="0.1911%" height="15" fill="rgb(215,21,27)" fg:x="516" fg:w="30"/><text x="3.5370%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (24 samples, 0.15%)</title><rect x="3.3253%" y="117" width="0.1529%" height="15" fill="rgb(232,23,21)" fg:x="522" fg:w="24"/><text x="3.5753%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (118 samples, 0.75%)</title><rect x="2.9303%" y="165" width="0.7517%" height="15" fill="rgb(244,5,23)" fg:x="460" fg:w="118"/><text x="3.1803%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (32 samples, 0.20%)</title><rect x="3.4782%" y="149" width="0.2038%" height="15" fill="rgb(226,81,46)" fg:x="546" fg:w="32"/><text x="3.7282%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (30 samples, 0.19%)</title><rect x="3.4909%" y="133" width="0.1911%" height="15" fill="rgb(247,70,30)" fg:x="548" fg:w="30"/><text x="3.7409%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="3.7075%" y="149" width="0.0127%" height="15" fill="rgb(212,68,19)" fg:x="582" fg:w="2"/><text x="3.9575%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="3.7075%" y="133" width="0.0127%" height="15" fill="rgb(240,187,13)" fg:x="582" fg:w="2"/><text x="3.9575%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="3.7202%" y="149" width="0.0127%" height="15" fill="rgb(223,113,26)" fg:x="584" fg:w="2"/><text x="3.9702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="3.7202%" y="133" width="0.0127%" height="15" fill="rgb(206,192,2)" fg:x="584" fg:w="2"/><text x="3.9702%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (191 samples, 1.22%)</title><rect x="2.9112%" y="181" width="1.2167%" height="15" fill="rgb(241,108,4)" fg:x="457" fg:w="191"/><text x="3.1612%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (70 samples, 0.45%)</title><rect x="3.6820%" y="165" width="0.4459%" height="15" fill="rgb(247,173,49)" fg:x="578" fg:w="70"/><text x="3.9320%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (61 samples, 0.39%)</title><rect x="3.7393%" y="149" width="0.3886%" height="15" fill="rgb(224,114,35)" fg:x="587" fg:w="61"/><text x="3.9893%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="4.1470%" y="165" width="0.0255%" height="15" fill="rgb(245,159,27)" fg:x="651" fg:w="4"/><text x="4.3970%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="4.1534%" y="149" width="0.0191%" height="15" fill="rgb(245,172,44)" fg:x="652" fg:w="3"/><text x="4.4034%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="4.1598%" y="133" width="0.0127%" height="15" fill="rgb(236,23,11)" fg:x="653" fg:w="2"/><text x="4.4098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="4.1725%" y="165" width="0.0255%" height="15" fill="rgb(205,117,38)" fg:x="655" fg:w="4"/><text x="4.4225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="4.1852%" y="149" width="0.0127%" height="15" fill="rgb(237,72,25)" fg:x="657" fg:w="2"/><text x="4.4352%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (276 samples, 1.76%)</title><rect x="2.8985%" y="197" width="1.7582%" height="15" fill="rgb(244,70,9)" fg:x="455" fg:w="276"/><text x="3.1485%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (83 samples, 0.53%)</title><rect x="4.1279%" y="181" width="0.5287%" height="15" fill="rgb(217,125,39)" fg:x="648" fg:w="83"/><text x="4.3779%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (71 samples, 0.45%)</title><rect x="4.2044%" y="165" width="0.4523%" height="15" fill="rgb(235,36,10)" fg:x="660" fg:w="71"/><text x="4.4544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="4.7140%" y="149" width="0.0191%" height="15" fill="rgb(251,123,47)" fg:x="740" fg:w="3"/><text x="4.9640%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="4.7012%" y="181" width="0.0382%" height="15" fill="rgb(221,13,13)" fg:x="738" fg:w="6"/><text x="4.9512%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="4.7076%" y="165" width="0.0319%" height="15" fill="rgb(238,131,9)" fg:x="739" fg:w="5"/><text x="4.9576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="4.7395%" y="181" width="0.0127%" height="15" fill="rgb(211,50,8)" fg:x="744" fg:w="2"/><text x="4.9895%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="4.7522%" y="181" width="0.0127%" height="15" fill="rgb(245,182,24)" fg:x="746" fg:w="2"/><text x="5.0022%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (403 samples, 2.57%)</title><rect x="2.8857%" y="213" width="2.5672%" height="15" fill="rgb(242,14,37)" fg:x="453" fg:w="403"/><text x="3.1357%" y="223.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (125 samples, 0.80%)</title><rect x="4.6566%" y="197" width="0.7963%" height="15" fill="rgb(246,228,12)" fg:x="731" fg:w="125"/><text x="4.9066%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (108 samples, 0.69%)</title><rect x="4.7649%" y="181" width="0.6880%" height="15" fill="rgb(213,55,15)" fg:x="748" fg:w="108"/><text x="5.0149%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="5.4848%" y="165" width="0.0319%" height="15" fill="rgb(209,9,3)" fg:x="861" fg:w="5"/><text x="5.7348%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="5.4975%" y="149" width="0.0191%" height="15" fill="rgb(230,59,30)" fg:x="863" fg:w="3"/><text x="5.7475%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="5.4784%" y="197" width="0.0446%" height="15" fill="rgb(209,121,21)" fg:x="860" fg:w="7"/><text x="5.7284%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="5.4848%" y="181" width="0.0382%" height="15" fill="rgb(220,109,13)" fg:x="861" fg:w="6"/><text x="5.7348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="5.5294%" y="197" width="0.0255%" height="15" fill="rgb(232,18,1)" fg:x="868" fg:w="4"/><text x="5.7794%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (512 samples, 3.26%)</title><rect x="2.8730%" y="229" width="3.2616%" height="15" fill="rgb(215,41,42)" fg:x="451" fg:w="512"/><text x="3.1230%" y="239.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (107 samples, 0.68%)</title><rect x="5.4529%" y="213" width="0.6816%" height="15" fill="rgb(224,123,36)" fg:x="856" fg:w="107"/><text x="5.7029%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (91 samples, 0.58%)</title><rect x="5.5548%" y="197" width="0.5797%" height="15" fill="rgb(240,125,3)" fg:x="872" fg:w="91"/><text x="5.8048%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="6.1728%" y="213" width="0.0191%" height="15" fill="rgb(205,98,50)" fg:x="969" fg:w="3"/><text x="6.4228%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="6.1728%" y="197" width="0.0191%" height="15" fill="rgb(205,185,37)" fg:x="969" fg:w="3"/><text x="6.4228%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="6.1728%" y="181" width="0.0191%" height="15" fill="rgb(238,207,15)" fg:x="969" fg:w="3"/><text x="6.4228%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="6.1919%" y="213" width="0.0191%" height="15" fill="rgb(213,199,42)" fg:x="972" fg:w="3"/><text x="6.4419%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (612 samples, 3.90%)</title><rect x="2.8666%" y="245" width="3.8986%" height="15" fill="rgb(235,201,11)" fg:x="450" fg:w="612"/><text x="3.1166%" y="255.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (99 samples, 0.63%)</title><rect x="6.1345%" y="229" width="0.6307%" height="15" fill="rgb(207,46,11)" fg:x="963" fg:w="99"/><text x="6.3845%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (86 samples, 0.55%)</title><rect x="6.2174%" y="213" width="0.5478%" height="15" fill="rgb(241,35,35)" fg:x="976" fg:w="86"/><text x="6.4674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="6.8353%" y="229" width="0.0319%" height="15" fill="rgb(243,32,47)" fg:x="1073" fg:w="5"/><text x="7.0853%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="6.8544%" y="213" width="0.0127%" height="15" fill="rgb(247,202,23)" fg:x="1076" fg:w="2"/><text x="7.1044%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (729 samples, 4.64%)</title><rect x="2.8666%" y="261" width="4.6439%" height="15" fill="rgb(219,102,11)" fg:x="450" fg:w="729"/><text x="3.1166%" y="271.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (117 samples, 0.75%)</title><rect x="6.7652%" y="245" width="0.7453%" height="15" fill="rgb(243,110,44)" fg:x="1062" fg:w="117"/><text x="7.0152%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (99 samples, 0.63%)</title><rect x="6.8799%" y="229" width="0.6307%" height="15" fill="rgb(222,74,54)" fg:x="1080" fg:w="99"/><text x="7.1299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="7.5615%" y="213" width="0.0255%" height="15" fill="rgb(216,99,12)" fg:x="1187" fg:w="4"/><text x="7.8115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="7.5742%" y="197" width="0.0127%" height="15" fill="rgb(226,22,26)" fg:x="1189" fg:w="2"/><text x="7.8242%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.06%)</title><rect x="7.5360%" y="245" width="0.0573%" height="15" fill="rgb(217,163,10)" fg:x="1183" fg:w="9"/><text x="7.7860%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="7.5551%" y="229" width="0.0382%" height="15" fill="rgb(213,25,53)" fg:x="1186" fg:w="6"/><text x="7.8051%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="7.5933%" y="245" width="0.0127%" height="15" fill="rgb(252,105,26)" fg:x="1192" fg:w="2"/><text x="7.8433%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="7.6061%" y="245" width="0.0191%" height="15" fill="rgb(220,39,43)" fg:x="1194" fg:w="3"/><text x="7.8561%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (840 samples, 5.35%)</title><rect x="2.8539%" y="277" width="5.3510%" height="15" fill="rgb(229,68,48)" fg:x="448" fg:w="840"/><text x="3.1039%" y="287.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (109 samples, 0.69%)</title><rect x="7.5105%" y="261" width="0.6944%" height="15" fill="rgb(252,8,32)" fg:x="1179" fg:w="109"/><text x="7.7605%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (90 samples, 0.57%)</title><rect x="7.6315%" y="245" width="0.5733%" height="15" fill="rgb(223,20,43)" fg:x="1198" fg:w="90"/><text x="7.8815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="8.2495%" y="261" width="0.0255%" height="15" fill="rgb(229,81,49)" fg:x="1295" fg:w="4"/><text x="8.4995%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="8.2558%" y="245" width="0.0191%" height="15" fill="rgb(236,28,36)" fg:x="1296" fg:w="3"/><text x="8.5058%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="8.2622%" y="229" width="0.0127%" height="15" fill="rgb(249,185,26)" fg:x="1297" fg:w="2"/><text x="8.5122%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="8.2749%" y="261" width="0.0255%" height="15" fill="rgb(249,174,33)" fg:x="1299" fg:w="4"/><text x="8.5249%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="8.3004%" y="261" width="0.0191%" height="15" fill="rgb(233,201,37)" fg:x="1303" fg:w="3"/><text x="8.5504%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (970 samples, 6.18%)</title><rect x="2.8411%" y="293" width="6.1791%" height="15" fill="rgb(221,78,26)" fg:x="446" fg:w="970"/><text x="3.0911%" y="303.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (128 samples, 0.82%)</title><rect x="8.2049%" y="277" width="0.8154%" height="15" fill="rgb(250,127,30)" fg:x="1288" fg:w="128"/><text x="8.4549%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (110 samples, 0.70%)</title><rect x="8.3195%" y="261" width="0.7007%" height="15" fill="rgb(230,49,44)" fg:x="1306" fg:w="110"/><text x="8.5695%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="9.0648%" y="245" width="0.0255%" height="15" fill="rgb(229,67,23)" fg:x="1423" fg:w="4"/><text x="9.3148%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="9.0521%" y="277" width="0.0446%" height="15" fill="rgb(249,83,47)" fg:x="1421" fg:w="7"/><text x="9.3021%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="9.0585%" y="261" width="0.0382%" height="15" fill="rgb(215,43,3)" fg:x="1422" fg:w="6"/><text x="9.3085%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="9.1031%" y="277" width="0.0319%" height="15" fill="rgb(238,154,13)" fg:x="1429" fg:w="5"/><text x="9.3531%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="9.1222%" y="261" width="0.0127%" height="15" fill="rgb(219,56,2)" fg:x="1432" fg:w="2"/><text x="9.3722%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="9.1413%" y="277" width="0.0127%" height="15" fill="rgb(233,0,4)" fg:x="1435" fg:w="2"/><text x="9.3913%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,124 samples, 7.16%)</title><rect x="2.8220%" y="309" width="7.1601%" height="15" fill="rgb(235,30,7)" fg:x="443" fg:w="1124"/><text x="3.0720%" y="319.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (151 samples, 0.96%)</title><rect x="9.0203%" y="293" width="0.9619%" height="15" fill="rgb(250,79,13)" fg:x="1416" fg:w="151"/><text x="9.2703%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (130 samples, 0.83%)</title><rect x="9.1540%" y="277" width="0.8281%" height="15" fill="rgb(211,146,34)" fg:x="1437" fg:w="130"/><text x="9.4040%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="10.0905%" y="277" width="0.0127%" height="15" fill="rgb(228,22,38)" fg:x="1584" fg:w="2"/><text x="10.3405%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.05%)</title><rect x="10.1096%" y="261" width="0.0510%" height="15" fill="rgb(235,168,5)" fg:x="1587" fg:w="8"/><text x="10.3596%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="10.1478%" y="245" width="0.0127%" height="15" fill="rgb(221,155,16)" fg:x="1593" fg:w="2"/><text x="10.3978%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.11%)</title><rect x="10.0650%" y="293" width="0.1083%" height="15" fill="rgb(215,215,53)" fg:x="1580" fg:w="17"/><text x="10.3150%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.07%)</title><rect x="10.1032%" y="277" width="0.0701%" height="15" fill="rgb(223,4,10)" fg:x="1586" fg:w="11"/><text x="10.3532%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="10.1605%" y="261" width="0.0127%" height="15" fill="rgb(234,103,6)" fg:x="1595" fg:w="2"/><text x="10.4105%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.08%)</title><rect x="10.1733%" y="293" width="0.0764%" height="15" fill="rgb(227,97,0)" fg:x="1597" fg:w="12"/><text x="10.4233%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.03%)</title><rect x="10.2179%" y="277" width="0.0319%" height="15" fill="rgb(234,150,53)" fg:x="1604" fg:w="5"/><text x="10.4679%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,348 samples, 8.59%)</title><rect x="2.7902%" y="325" width="8.5871%" height="15" fill="rgb(228,201,54)" fg:x="438" fg:w="1348"/><text x="3.0402%" y="335.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (219 samples, 1.40%)</title><rect x="9.9822%" y="309" width="1.3951%" height="15" fill="rgb(222,22,37)" fg:x="1567" fg:w="219"/><text x="10.2322%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (176 samples, 1.12%)</title><rect x="10.2561%" y="293" width="1.1212%" height="15" fill="rgb(237,53,32)" fg:x="1610" fg:w="176"/><text x="10.5061%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="11.5238%" y="293" width="0.0127%" height="15" fill="rgb(233,25,53)" fg:x="1809" fg:w="2"/><text x="11.7738%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.06%)</title><rect x="11.5365%" y="277" width="0.0573%" height="15" fill="rgb(210,40,34)" fg:x="1811" fg:w="9"/><text x="11.7865%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.11%)</title><rect x="11.4983%" y="309" width="0.1083%" height="15" fill="rgb(241,220,44)" fg:x="1805" fg:w="17"/><text x="11.7483%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.07%)</title><rect x="11.5365%" y="293" width="0.0701%" height="15" fill="rgb(235,28,35)" fg:x="1811" fg:w="11"/><text x="11.7865%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="11.5938%" y="277" width="0.0127%" height="15" fill="rgb(210,56,17)" fg:x="1820" fg:w="2"/><text x="11.8438%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.04%)</title><rect x="11.6129%" y="309" width="0.0446%" height="15" fill="rgb(224,130,29)" fg:x="1823" fg:w="7"/><text x="11.8629%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="11.6639%" y="309" width="0.0255%" height="15" fill="rgb(235,212,8)" fg:x="1831" fg:w="4"/><text x="11.9139%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="11.6894%" y="309" width="0.0127%" height="15" fill="rgb(223,33,50)" fg:x="1835" fg:w="2"/><text x="11.9394%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,714 samples, 10.92%)</title><rect x="2.7074%" y="341" width="10.9186%" height="15" fill="rgb(219,149,13)" fg:x="425" fg:w="1714"/><text x="2.9574%" y="351.50">sudoku-solver`su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (353 samples, 2.25%)</title><rect x="11.3772%" y="325" width="2.2487%" height="15" fill="rgb(250,156,29)" fg:x="1786" fg:w="353"/><text x="11.6272%" y="335.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (302 samples, 1.92%)</title><rect x="11.7021%" y="309" width="1.9238%" height="15" fill="rgb(216,193,19)" fg:x="1837" fg:w="302"/><text x="11.9521%" y="319.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="13.8043%" y="309" width="0.0191%" height="15" fill="rgb(216,135,14)" fg:x="2167" fg:w="3"/><text x="14.0543%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.13%)</title><rect x="13.8425%" y="293" width="0.1274%" height="15" fill="rgb(241,47,5)" fg:x="2173" fg:w="20"/><text x="14.0925%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="13.9572%" y="277" width="0.0127%" height="15" fill="rgb(233,42,35)" fg:x="2191" fg:w="2"/><text x="14.2072%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.24%)</title><rect x="13.7406%" y="325" width="0.2421%" height="15" fill="rgb(231,13,6)" fg:x="2157" fg:w="38"/><text x="13.9906%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.16%)</title><rect x="13.8234%" y="309" width="0.1593%" height="15" fill="rgb(207,181,40)" fg:x="2170" fg:w="25"/><text x="14.0734%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="13.9699%" y="293" width="0.0127%" height="15" fill="rgb(254,173,49)" fg:x="2193" fg:w="2"/><text x="14.2199%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="13.9827%" y="325" width="0.0191%" height="15" fill="rgb(221,1,38)" fg:x="2195" fg:w="3"/><text x="14.2327%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.14%)</title><rect x="14.0018%" y="325" width="0.1401%" height="15" fill="rgb(206,124,46)" fg:x="2198" fg:w="22"/><text x="14.2518%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.06%)</title><rect x="14.0782%" y="309" width="0.0637%" height="15" fill="rgb(249,21,11)" fg:x="2210" fg:w="10"/><text x="14.3282%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="14.1419%" y="325" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="2220" fg:w="2"/><text x="14.3919%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="14.1547%" y="325" width="0.0382%" height="15" fill="rgb(235,61,29)" fg:x="2222" fg:w="6"/><text x="14.4047%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="14.1929%" y="325" width="0.0191%" height="15" fill="rgb(219,207,3)" fg:x="2228" fg:w="3"/><text x="14.4429%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,345 samples, 14.94%)</title><rect x="2.5672%" y="357" width="14.9382%" height="15" fill="rgb(222,56,46)" fg:x="403" fg:w="2345"/><text x="2.8172%" y="367.50">sudoku-solver`sudoku_so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (609 samples, 3.88%)</title><rect x="13.6259%" y="341" width="3.8795%" height="15" fill="rgb(239,76,54)" fg:x="2139" fg:w="609"/><text x="13.8759%" y="351.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (517 samples, 3.29%)</title><rect x="14.2120%" y="325" width="3.2934%" height="15" fill="rgb(231,124,27)" fg:x="2231" fg:w="517"/><text x="14.4620%" y="335.50">sud..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="17.8367%" y="325" width="0.0191%" height="15" fill="rgb(249,195,6)" fg:x="2800" fg:w="3"/><text x="18.0867%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.16%)</title><rect x="17.8876%" y="309" width="0.1593%" height="15" fill="rgb(237,174,47)" fg:x="2808" fg:w="25"/><text x="18.1376%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="18.0214%" y="293" width="0.0255%" height="15" fill="rgb(206,201,31)" fg:x="2829" fg:w="4"/><text x="18.2714%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (49 samples, 0.31%)</title><rect x="17.7539%" y="341" width="0.3121%" height="15" fill="rgb(231,57,52)" fg:x="2787" fg:w="49"/><text x="18.0039%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 0.21%)</title><rect x="17.8558%" y="325" width="0.2102%" height="15" fill="rgb(248,177,22)" fg:x="2803" fg:w="33"/><text x="18.1058%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="18.0469%" y="309" width="0.0191%" height="15" fill="rgb(215,211,37)" fg:x="2833" fg:w="3"/><text x="18.2969%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="18.0660%" y="341" width="0.0127%" height="15" fill="rgb(241,128,51)" fg:x="2836" fg:w="2"/><text x="18.3160%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.24%)</title><rect x="18.0787%" y="341" width="0.2421%" height="15" fill="rgb(227,165,31)" fg:x="2838" fg:w="38"/><text x="18.3287%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.10%)</title><rect x="18.2189%" y="325" width="0.1019%" height="15" fill="rgb(228,167,24)" fg:x="2860" fg:w="16"/><text x="18.4689%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.04%)</title><rect x="18.3272%" y="341" width="0.0446%" height="15" fill="rgb(228,143,12)" fg:x="2877" fg:w="7"/><text x="18.5772%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="18.3718%" y="341" width="0.0255%" height="15" fill="rgb(249,149,8)" fg:x="2884" fg:w="4"/><text x="18.6218%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3,275 samples, 20.86%)</title><rect x="2.4080%" y="373" width="20.8625%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="3275"/><text x="2.6580%" y="383.50">sudoku-solver`sudoku_solver::back..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (905 samples, 5.77%)</title><rect x="17.5054%" y="357" width="5.7651%" height="15" fill="rgb(246,89,9)" fg:x="2748" fg:w="905"/><text x="17.7554%" y="367.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (765 samples, 4.87%)</title><rect x="18.3972%" y="341" width="4.8732%" height="15" fill="rgb(233,213,13)" fg:x="2888" fg:w="765"/><text x="18.6472%" y="351.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="23.7100%" y="341" width="0.0255%" height="15" fill="rgb(233,141,41)" fg:x="3722" fg:w="4"/><text x="23.9600%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (32 samples, 0.20%)</title><rect x="23.7992%" y="325" width="0.2038%" height="15" fill="rgb(239,167,4)" fg:x="3736" fg:w="32"/><text x="24.0492%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="23.9648%" y="309" width="0.0382%" height="15" fill="rgb(209,217,16)" fg:x="3762" fg:w="6"/><text x="24.2148%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.45%)</title><rect x="23.5954%" y="357" width="0.4459%" height="15" fill="rgb(219,88,35)" fg:x="3704" fg:w="70"/><text x="23.8454%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.31%)</title><rect x="23.7355%" y="341" width="0.3058%" height="15" fill="rgb(220,193,23)" fg:x="3726" fg:w="48"/><text x="23.9855%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="24.0031%" y="325" width="0.0382%" height="15" fill="rgb(230,90,52)" fg:x="3768" fg:w="6"/><text x="24.2531%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.03%)</title><rect x="24.0413%" y="357" width="0.0319%" height="15" fill="rgb(252,106,19)" fg:x="3774" fg:w="5"/><text x="24.2913%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (56 samples, 0.36%)</title><rect x="24.0731%" y="357" width="0.3567%" height="15" fill="rgb(206,74,20)" fg:x="3779" fg:w="56"/><text x="24.3231%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.17%)</title><rect x="24.2642%" y="341" width="0.1656%" height="15" fill="rgb(230,138,44)" fg:x="3809" fg:w="26"/><text x="24.5142%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="24.4299%" y="357" width="0.0191%" height="15" fill="rgb(235,182,43)" fg:x="3835" fg:w="3"/><text x="24.6799%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.10%)</title><rect x="24.4490%" y="357" width="0.1019%" height="15" fill="rgb(242,16,51)" fg:x="3838" fg:w="16"/><text x="24.6990%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="24.5573%" y="357" width="0.0382%" height="15" fill="rgb(248,9,4)" fg:x="3855" fg:w="6"/><text x="24.8073%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (4,505 samples, 28.70%)</title><rect x="2.1723%" y="389" width="28.6979%" height="15" fill="rgb(210,31,22)" fg:x="341" fg:w="4505"/><text x="2.4223%" y="399.50">sudoku-solver`sudoku_solver::backtraking::back..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,193 samples, 7.60%)</title><rect x="23.2705%" y="373" width="7.5997%" height="15" fill="rgb(239,54,39)" fg:x="3653" fg:w="1193"/><text x="23.5205%" y="383.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (985 samples, 6.27%)</title><rect x="24.5955%" y="357" width="6.2747%" height="15" fill="rgb(230,99,41)" fg:x="3861" fg:w="985"/><text x="24.8455%" y="367.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="31.2842%" y="357" width="0.0255%" height="15" fill="rgb(253,106,12)" fg:x="4911" fg:w="4"/><text x="31.5342%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.17%)</title><rect x="31.3416%" y="341" width="0.1720%" height="15" fill="rgb(213,46,41)" fg:x="4920" fg:w="27"/><text x="31.5916%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.04%)</title><rect x="31.4690%" y="325" width="0.0446%" height="15" fill="rgb(215,133,35)" fg:x="4940" fg:w="7"/><text x="31.7190%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.32%)</title><rect x="31.2078%" y="373" width="0.3249%" height="15" fill="rgb(213,28,5)" fg:x="4899" fg:w="51"/><text x="31.4578%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.22%)</title><rect x="31.3097%" y="357" width="0.2230%" height="15" fill="rgb(215,77,49)" fg:x="4915" fg:w="35"/><text x="31.5597%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="31.5136%" y="341" width="0.0191%" height="15" fill="rgb(248,100,22)" fg:x="4947" fg:w="3"/><text x="31.7636%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.24%)</title><rect x="31.5390%" y="373" width="0.2421%" height="15" fill="rgb(208,67,9)" fg:x="4951" fg:w="38"/><text x="31.7890%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.11%)</title><rect x="31.6665%" y="357" width="0.1147%" height="15" fill="rgb(219,133,21)" fg:x="4971" fg:w="18"/><text x="31.9165%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="31.7811%" y="373" width="0.0191%" height="15" fill="rgb(246,46,29)" fg:x="4989" fg:w="3"/><text x="32.0311%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.09%)</title><rect x="31.8002%" y="373" width="0.0892%" height="15" fill="rgb(246,185,52)" fg:x="4992" fg:w="14"/><text x="32.0502%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="31.8894%" y="373" width="0.0127%" height="15" fill="rgb(252,136,11)" fg:x="5006" fg:w="2"/><text x="32.1394%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="31.9022%" y="373" width="0.0319%" height="15" fill="rgb(219,138,53)" fg:x="5008" fg:w="5"/><text x="32.1522%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5,572 samples, 35.49%)</title><rect x="1.9875%" y="405" width="35.4950%" height="15" fill="rgb(211,51,23)" fg:x="312" fg:w="5572"/><text x="2.2375%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recu..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,038 samples, 6.61%)</title><rect x="30.8702%" y="389" width="6.6123%" height="15" fill="rgb(247,221,28)" fg:x="4846" fg:w="1038"/><text x="31.1202%" y="399.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (871 samples, 5.55%)</title><rect x="31.9340%" y="373" width="5.5485%" height="15" fill="rgb(251,222,45)" fg:x="5013" fg:w="871"/><text x="32.1840%" y="383.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="37.9602%" y="373" width="0.0127%" height="15" fill="rgb(217,162,53)" fg:x="5959" fg:w="2"/><text x="38.2102%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.18%)</title><rect x="38.0303%" y="357" width="0.1847%" height="15" fill="rgb(229,93,14)" fg:x="5970" fg:w="29"/><text x="38.2803%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="38.1768%" y="341" width="0.0382%" height="15" fill="rgb(209,67,49)" fg:x="5993" fg:w="6"/><text x="38.4268%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.38%)</title><rect x="37.8583%" y="389" width="0.3758%" height="15" fill="rgb(213,87,29)" fg:x="5943" fg:w="59"/><text x="38.1083%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.26%)</title><rect x="37.9730%" y="373" width="0.2612%" height="15" fill="rgb(205,151,52)" fg:x="5961" fg:w="41"/><text x="38.2230%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="38.2151%" y="357" width="0.0191%" height="15" fill="rgb(253,215,39)" fg:x="5999" fg:w="3"/><text x="38.4651%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="38.2342%" y="389" width="0.0191%" height="15" fill="rgb(221,220,41)" fg:x="6002" fg:w="3"/><text x="38.4842%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.18%)</title><rect x="38.2533%" y="389" width="0.1784%" height="15" fill="rgb(218,133,21)" fg:x="6005" fg:w="28"/><text x="38.5033%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.06%)</title><rect x="38.3743%" y="373" width="0.0573%" height="15" fill="rgb(221,193,43)" fg:x="6024" fg:w="9"/><text x="38.6243%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="38.4316%" y="389" width="0.0191%" height="15" fill="rgb(240,128,52)" fg:x="6033" fg:w="3"/><text x="38.6816%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.10%)</title><rect x="38.4508%" y="389" width="0.0956%" height="15" fill="rgb(253,114,12)" fg:x="6036" fg:w="15"/><text x="38.7008%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="38.5463%" y="389" width="0.0191%" height="15" fill="rgb(215,223,47)" fg:x="6051" fg:w="3"/><text x="38.7963%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (6,690 samples, 42.62%)</title><rect x="1.7646%" y="421" width="42.6169%" height="15" fill="rgb(248,225,23)" fg:x="277" fg:w="6690"/><text x="2.0146%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,083 samples, 6.90%)</title><rect x="37.4825%" y="405" width="6.8990%" height="15" fill="rgb(250,108,0)" fg:x="5884" fg:w="1083"/><text x="37.7325%" y="415.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (913 samples, 5.82%)</title><rect x="38.5654%" y="389" width="5.8160%" height="15" fill="rgb(228,208,7)" fg:x="6054" fg:w="913"/><text x="38.8154%" y="399.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="44.7382%" y="389" width="0.0127%" height="15" fill="rgb(244,45,10)" fg:x="7023" fg:w="2"/><text x="44.9882%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.18%)</title><rect x="44.7828%" y="373" width="0.1784%" height="15" fill="rgb(207,125,25)" fg:x="7030" fg:w="28"/><text x="45.0328%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.05%)</title><rect x="44.9102%" y="357" width="0.0510%" height="15" fill="rgb(210,195,18)" fg:x="7050" fg:w="8"/><text x="45.1602%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.35%)</title><rect x="44.6426%" y="405" width="0.3504%" height="15" fill="rgb(249,80,12)" fg:x="7008" fg:w="55"/><text x="44.8926%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.24%)</title><rect x="44.7509%" y="389" width="0.2421%" height="15" fill="rgb(221,65,9)" fg:x="7025" fg:w="38"/><text x="45.0009%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="44.9611%" y="373" width="0.0319%" height="15" fill="rgb(235,49,36)" fg:x="7058" fg:w="5"/><text x="45.2111%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.24%)</title><rect x="44.9994%" y="405" width="0.2357%" height="15" fill="rgb(225,32,20)" fg:x="7064" fg:w="37"/><text x="45.2494%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.12%)</title><rect x="45.1140%" y="389" width="0.1210%" height="15" fill="rgb(215,141,46)" fg:x="7082" fg:w="19"/><text x="45.3640%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="45.2351%" y="405" width="0.0191%" height="15" fill="rgb(250,160,47)" fg:x="7101" fg:w="3"/><text x="45.4851%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.08%)</title><rect x="45.2542%" y="405" width="0.0828%" height="15" fill="rgb(216,222,40)" fg:x="7104" fg:w="13"/><text x="45.5042%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (7,735 samples, 49.27%)</title><rect x="1.5798%" y="437" width="49.2738%" height="15" fill="rgb(234,217,39)" fg:x="248" fg:w="7735"/><text x="1.8298%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,016 samples, 6.47%)</title><rect x="44.3814%" y="421" width="6.4722%" height="15" fill="rgb(207,178,40)" fg:x="6967" fg:w="1016"/><text x="44.6314%" y="431.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (864 samples, 5.50%)</title><rect x="45.3497%" y="405" width="5.5039%" height="15" fill="rgb(221,136,13)" fg:x="7119" fg:w="864"/><text x="45.5997%" y="415.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="51.4333%" y="405" width="0.0191%" height="15" fill="rgb(249,199,10)" fg:x="8074" fg:w="3"/><text x="51.6833%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.16%)</title><rect x="51.5352%" y="389" width="0.1593%" height="15" fill="rgb(249,222,13)" fg:x="8090" fg:w="25"/><text x="51.7852%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.06%)</title><rect x="51.6372%" y="373" width="0.0573%" height="15" fill="rgb(244,185,38)" fg:x="8106" fg:w="9"/><text x="51.8872%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (78 samples, 0.50%)</title><rect x="51.2103%" y="421" width="0.4969%" height="15" fill="rgb(236,202,9)" fg:x="8039" fg:w="78"/><text x="51.4603%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.25%)</title><rect x="51.4524%" y="405" width="0.2548%" height="15" fill="rgb(250,229,37)" fg:x="8077" fg:w="40"/><text x="51.7024%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="51.6945%" y="389" width="0.0127%" height="15" fill="rgb(206,174,23)" fg:x="8115" fg:w="2"/><text x="51.9445%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="51.7072%" y="421" width="0.0127%" height="15" fill="rgb(211,33,43)" fg:x="8117" fg:w="2"/><text x="51.9572%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.34%)</title><rect x="51.7200%" y="421" width="0.3440%" height="15" fill="rgb(245,58,50)" fg:x="8119" fg:w="54"/><text x="51.9700%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.13%)</title><rect x="51.9302%" y="405" width="0.1338%" height="15" fill="rgb(244,68,36)" fg:x="8152" fg:w="21"/><text x="52.1802%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="52.0640%" y="421" width="0.0127%" height="15" fill="rgb(232,229,15)" fg:x="8173" fg:w="2"/><text x="52.3140%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.10%)</title><rect x="52.0767%" y="421" width="0.1019%" height="15" fill="rgb(254,30,23)" fg:x="8175" fg:w="16"/><text x="52.3267%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="52.1786%" y="421" width="0.0319%" height="15" fill="rgb(235,160,14)" fg:x="8191" fg:w="5"/><text x="52.4286%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="52.2105%" y="421" width="0.0382%" height="15" fill="rgb(212,155,44)" fg:x="8196" fg:w="6"/><text x="52.4605%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9,088 samples, 57.89%)</title><rect x="1.3123%" y="453" width="57.8927%" height="15" fill="rgb(226,2,50)" fg:x="206" fg:w="9088"/><text x="1.5623%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,311 samples, 8.35%)</title><rect x="50.8536%" y="437" width="8.3514%" height="15" fill="rgb(234,177,6)" fg:x="7983" fg:w="1311"/><text x="51.1036%" y="447.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,092 samples, 6.96%)</title><rect x="52.2487%" y="421" width="6.9563%" height="15" fill="rgb(217,24,9)" fg:x="8202" fg:w="1092"/><text x="52.4987%" y="431.50">sudoku-so..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.29%)</title><rect x="59.8293%" y="405" width="0.2930%" height="15" fill="rgb(220,13,46)" fg:x="9392" fg:w="46"/><text x="60.0793%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.07%)</title><rect x="60.0522%" y="389" width="0.0701%" height="15" fill="rgb(239,221,27)" fg:x="9427" fg:w="11"/><text x="60.3022%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (81 samples, 0.52%)</title><rect x="59.6382%" y="437" width="0.5160%" height="15" fill="rgb(222,198,25)" fg:x="9362" fg:w="81"/><text x="59.8882%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (63 samples, 0.40%)</title><rect x="59.7528%" y="421" width="0.4013%" height="15" fill="rgb(211,99,13)" fg:x="9380" fg:w="63"/><text x="60.0028%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="60.1223%" y="405" width="0.0319%" height="15" fill="rgb(232,111,31)" fg:x="9438" fg:w="5"/><text x="60.3723%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.06%)</title><rect x="60.1542%" y="437" width="0.0637%" height="15" fill="rgb(245,82,37)" fg:x="9443" fg:w="10"/><text x="60.4042%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.31%)</title><rect x="60.2179%" y="437" width="0.3121%" height="15" fill="rgb(227,149,46)" fg:x="9453" fg:w="49"/><text x="60.4679%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.13%)</title><rect x="60.3962%" y="421" width="0.1338%" height="15" fill="rgb(218,36,50)" fg:x="9481" fg:w="21"/><text x="60.6462%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="60.5300%" y="437" width="0.0191%" height="15" fill="rgb(226,80,48)" fg:x="9502" fg:w="3"/><text x="60.7800%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.14%)</title><rect x="60.5491%" y="437" width="0.1401%" height="15" fill="rgb(238,224,15)" fg:x="9505" fg:w="22"/><text x="60.7991%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="60.6893%" y="437" width="0.0382%" height="15" fill="rgb(241,136,10)" fg:x="9527" fg:w="6"/><text x="60.9393%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (10,598 samples, 67.51%)</title><rect x="1.0702%" y="469" width="67.5118%" height="15" fill="rgb(208,32,45)" fg:x="168" fg:w="10598"/><text x="1.3202%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,472 samples, 9.38%)</title><rect x="59.2050%" y="453" width="9.3770%" height="15" fill="rgb(207,135,9)" fg:x="9294" fg:w="1472"/><text x="59.4550%" y="463.50">sudoku-solver..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,233 samples, 7.85%)</title><rect x="60.7275%" y="437" width="7.8545%" height="15" fill="rgb(206,86,44)" fg:x="9533" fg:w="1233"/><text x="60.9775%" y="447.50">sudoku-solv..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.15%)</title><rect x="68.9833%" y="421" width="0.1529%" height="15" fill="rgb(245,177,15)" fg:x="10829" fg:w="24"/><text x="69.2333%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="69.0980%" y="405" width="0.0382%" height="15" fill="rgb(206,64,50)" fg:x="10847" fg:w="6"/><text x="69.3480%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.33%)</title><rect x="68.8686%" y="453" width="0.3313%" height="15" fill="rgb(234,36,40)" fg:x="10811" fg:w="52"/><text x="69.1186%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.24%)</title><rect x="68.9578%" y="437" width="0.2421%" height="15" fill="rgb(213,64,8)" fg:x="10825" fg:w="38"/><text x="69.2078%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.06%)</title><rect x="69.1362%" y="421" width="0.0637%" height="15" fill="rgb(210,75,36)" fg:x="10853" fg:w="10"/><text x="69.3862%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="69.1999%" y="453" width="0.0446%" height="15" fill="rgb(229,88,21)" fg:x="10863" fg:w="7"/><text x="69.4499%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.26%)</title><rect x="69.2445%" y="453" width="0.2612%" height="15" fill="rgb(252,204,47)" fg:x="10870" fg:w="41"/><text x="69.4945%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.09%)</title><rect x="69.4165%" y="437" width="0.0892%" height="15" fill="rgb(208,77,27)" fg:x="10897" fg:w="14"/><text x="69.6665%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="69.5057%" y="453" width="0.0191%" height="15" fill="rgb(221,76,26)" fg:x="10911" fg:w="3"/><text x="69.7557%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.12%)</title><rect x="69.5248%" y="453" width="0.1210%" height="15" fill="rgb(225,139,18)" fg:x="10914" fg:w="19"/><text x="69.7748%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="69.6458%" y="453" width="0.0255%" height="15" fill="rgb(230,137,11)" fg:x="10933" fg:w="4"/><text x="69.8958%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11,768 samples, 74.96%)</title><rect x="0.7581%" y="485" width="74.9650%" height="15" fill="rgb(212,28,1)" fg:x="119" fg:w="11768"/><text x="1.0081%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,121 samples, 7.14%)</title><rect x="68.5820%" y="469" width="7.1410%" height="15" fill="rgb(248,164,17)" fg:x="10766" fg:w="1121"/><text x="68.8320%" y="479.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (950 samples, 6.05%)</title><rect x="69.6713%" y="453" width="6.0517%" height="15" fill="rgb(222,171,42)" fg:x="10937" fg:w="950"/><text x="69.9213%" y="463.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="76.0798%" y="453" width="0.0191%" height="15" fill="rgb(243,84,45)" fg:x="11943" fg:w="3"/><text x="76.3298%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.17%)</title><rect x="76.1243%" y="437" width="0.1720%" height="15" fill="rgb(252,49,23)" fg:x="11950" fg:w="27"/><text x="76.3743%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="76.2581%" y="421" width="0.0382%" height="15" fill="rgb(215,19,7)" fg:x="11971" fg:w="6"/><text x="76.5081%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.32%)</title><rect x="75.9969%" y="469" width="0.3249%" height="15" fill="rgb(238,81,41)" fg:x="11930" fg:w="51"/><text x="76.2469%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.22%)</title><rect x="76.0989%" y="453" width="0.2230%" height="15" fill="rgb(210,199,37)" fg:x="11946" fg:w="35"/><text x="76.3489%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="76.2963%" y="437" width="0.0255%" height="15" fill="rgb(244,192,49)" fg:x="11977" fg:w="4"/><text x="76.5463%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.04%)</title><rect x="76.3218%" y="469" width="0.0382%" height="15" fill="rgb(226,211,11)" fg:x="11981" fg:w="6"/><text x="76.5718%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.24%)</title><rect x="76.3600%" y="469" width="0.2421%" height="15" fill="rgb(236,162,54)" fg:x="11987" fg:w="38"/><text x="76.6100%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.10%)</title><rect x="76.5066%" y="453" width="0.0956%" height="15" fill="rgb(220,229,9)" fg:x="12010" fg:w="15"/><text x="76.7566%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="76.6021%" y="469" width="0.0127%" height="15" fill="rgb(250,87,22)" fg:x="12025" fg:w="2"/><text x="76.8521%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.07%)</title><rect x="76.6149%" y="469" width="0.0701%" height="15" fill="rgb(239,43,17)" fg:x="12027" fg:w="11"/><text x="76.8649%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12,687 samples, 80.82%)</title><rect x="0.5924%" y="501" width="80.8192%" height="15" fill="rgb(231,177,25)" fg:x="93" fg:w="12687"/><text x="0.8424%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (893 samples, 5.69%)</title><rect x="75.7230%" y="485" width="5.6886%" height="15" fill="rgb(219,179,1)" fg:x="11887" fg:w="893"/><text x="75.9730%" y="495.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (741 samples, 4.72%)</title><rect x="76.6913%" y="469" width="4.7203%" height="15" fill="rgb(238,219,53)" fg:x="12039" fg:w="741"/><text x="76.9413%" y="479.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="81.6665%" y="469" width="0.0127%" height="15" fill="rgb(232,167,36)" fg:x="12820" fg:w="2"/><text x="81.9165%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.12%)</title><rect x="81.6983%" y="453" width="0.1210%" height="15" fill="rgb(244,19,51)" fg:x="12825" fg:w="19"/><text x="81.9483%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="81.8002%" y="437" width="0.0191%" height="15" fill="rgb(224,6,22)" fg:x="12841" fg:w="3"/><text x="82.0502%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.20%)</title><rect x="81.6282%" y="485" width="0.2038%" height="15" fill="rgb(224,145,5)" fg:x="12814" fg:w="32"/><text x="81.8782%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.15%)</title><rect x="81.6792%" y="469" width="0.1529%" height="15" fill="rgb(234,130,49)" fg:x="12822" fg:w="24"/><text x="81.9292%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="81.8193%" y="453" width="0.0127%" height="15" fill="rgb(254,6,2)" fg:x="12844" fg:w="2"/><text x="82.0693%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.15%)</title><rect x="81.8385%" y="485" width="0.1529%" height="15" fill="rgb(208,96,46)" fg:x="12847" fg:w="24"/><text x="82.0885%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.06%)</title><rect x="81.9340%" y="469" width="0.0573%" height="15" fill="rgb(239,3,39)" fg:x="12862" fg:w="9"/><text x="82.1840%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="81.9913%" y="485" width="0.0255%" height="15" fill="rgb(233,210,1)" fg:x="12871" fg:w="4"/><text x="82.2413%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.05%)</title><rect x="82.0168%" y="485" width="0.0510%" height="15" fill="rgb(244,137,37)" fg:x="12875" fg:w="8"/><text x="82.2668%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="82.0741%" y="485" width="0.0127%" height="15" fill="rgb(240,136,2)" fg:x="12884" fg:w="2"/><text x="82.3241%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,335 samples, 84.95%)</title><rect x="0.5287%" y="517" width="84.9471%" height="15" fill="rgb(239,18,37)" fg:x="83" fg:w="13335"/><text x="0.7787%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (638 samples, 4.06%)</title><rect x="81.4116%" y="501" width="4.0642%" height="15" fill="rgb(218,185,22)" fg:x="12780" fg:w="638"/><text x="81.6616%" y="511.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (532 samples, 3.39%)</title><rect x="82.0869%" y="485" width="3.3890%" height="15" fill="rgb(225,218,4)" fg:x="12886" fg:w="532"/><text x="82.3369%" y="495.50">sud..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="85.6479%" y="485" width="0.0191%" height="15" fill="rgb(230,182,32)" fg:x="13445" fg:w="3"/><text x="85.8979%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.16%)</title><rect x="85.5778%" y="501" width="0.1593%" height="15" fill="rgb(242,56,43)" fg:x="13434" fg:w="25"/><text x="85.8278%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.07%)</title><rect x="85.6670%" y="485" width="0.0701%" height="15" fill="rgb(233,99,24)" fg:x="13448" fg:w="11"/><text x="85.9170%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.06%)</title><rect x="85.6797%" y="469" width="0.0573%" height="15" fill="rgb(234,209,42)" fg:x="13450" fg:w="9"/><text x="85.9297%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="85.7243%" y="453" width="0.0127%" height="15" fill="rgb(227,7,12)" fg:x="13457" fg:w="2"/><text x="85.9743%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.09%)</title><rect x="85.7370%" y="501" width="0.0892%" height="15" fill="rgb(245,203,43)" fg:x="13459" fg:w="14"/><text x="85.9870%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="85.7880%" y="485" width="0.0382%" height="15" fill="rgb(238,205,33)" fg:x="13467" fg:w="6"/><text x="86.0380%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="85.8326%" y="501" width="0.0382%" height="15" fill="rgb(231,56,7)" fg:x="13474" fg:w="6"/><text x="86.0826%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="85.8772%" y="501" width="0.0319%" height="15" fill="rgb(244,186,29)" fg:x="13481" fg:w="5"/><text x="86.1272%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,726 samples, 87.44%)</title><rect x="0.4459%" y="533" width="87.4379%" height="15" fill="rgb(234,111,31)" fg:x="70" fg:w="13726"/><text x="0.6959%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (378 samples, 2.41%)</title><rect x="85.4759%" y="517" width="2.4080%" height="15" fill="rgb(241,149,10)" fg:x="13418" fg:w="378"/><text x="85.7259%" y="527.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (310 samples, 1.97%)</title><rect x="85.9090%" y="501" width="1.9748%" height="15" fill="rgb(249,206,44)" fg:x="13486" fg:w="310"/><text x="86.1590%" y="511.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="87.9985%" y="485" width="0.0255%" height="15" fill="rgb(251,153,30)" fg:x="13814" fg:w="4"/><text x="88.2485%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.06%)</title><rect x="87.9730%" y="517" width="0.0637%" height="15" fill="rgb(239,152,38)" fg:x="13810" fg:w="10"/><text x="88.2230%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="87.9985%" y="501" width="0.0382%" height="15" fill="rgb(249,139,47)" fg:x="13814" fg:w="6"/><text x="88.2485%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="88.0240%" y="485" width="0.0127%" height="15" fill="rgb(244,64,35)" fg:x="13818" fg:w="2"/><text x="88.2740%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="88.0367%" y="517" width="0.0191%" height="15" fill="rgb(216,46,15)" fg:x="13820" fg:w="3"/><text x="88.2867%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="88.0558%" y="517" width="0.0573%" height="15" fill="rgb(250,74,19)" fg:x="13823" fg:w="9"/><text x="88.3058%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="88.0940%" y="501" width="0.0191%" height="15" fill="rgb(249,42,33)" fg:x="13829" fg:w="3"/><text x="88.3440%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="88.1195%" y="517" width="0.0191%" height="15" fill="rgb(242,149,17)" fg:x="13833" fg:w="3"/><text x="88.3695%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="88.1386%" y="517" width="0.0127%" height="15" fill="rgb(244,29,21)" fg:x="13836" fg:w="2"/><text x="88.3886%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,981 samples, 89.06%)</title><rect x="0.4013%" y="549" width="89.0623%" height="15" fill="rgb(220,130,37)" fg:x="63" fg:w="13981"/><text x="0.6513%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (248 samples, 1.58%)</title><rect x="87.8838%" y="533" width="1.5798%" height="15" fill="rgb(211,67,2)" fg:x="13796" fg:w="248"/><text x="88.1338%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (206 samples, 1.31%)</title><rect x="88.1514%" y="517" width="1.3123%" height="15" fill="rgb(235,68,52)" fg:x="13838" fg:w="206"/><text x="88.4014%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.06%)</title><rect x="89.6356%" y="501" width="0.0573%" height="15" fill="rgb(246,142,3)" fg:x="14071" fg:w="9"/><text x="89.8856%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="89.6738%" y="485" width="0.0191%" height="15" fill="rgb(241,25,7)" fg:x="14077" fg:w="3"/><text x="89.9238%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.15%)</title><rect x="89.5592%" y="533" width="0.1465%" height="15" fill="rgb(242,119,39)" fg:x="14059" fg:w="23"/><text x="89.8092%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.08%)</title><rect x="89.6293%" y="517" width="0.0764%" height="15" fill="rgb(241,98,45)" fg:x="14070" fg:w="12"/><text x="89.8793%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="89.6930%" y="501" width="0.0127%" height="15" fill="rgb(254,28,30)" fg:x="14080" fg:w="2"/><text x="89.9430%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="89.7057%" y="533" width="0.0191%" height="15" fill="rgb(241,142,54)" fg:x="14082" fg:w="3"/><text x="89.9557%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="89.7248%" y="533" width="0.0319%" height="15" fill="rgb(222,85,15)" fg:x="14085" fg:w="5"/><text x="89.9748%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="89.7630%" y="533" width="0.0127%" height="15" fill="rgb(210,85,47)" fg:x="14091" fg:w="2"/><text x="90.0130%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,200 samples, 90.46%)</title><rect x="0.3631%" y="565" width="90.4574%" height="15" fill="rgb(224,206,25)" fg:x="57" fg:w="14200"/><text x="0.6131%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (213 samples, 1.36%)</title><rect x="89.4636%" y="549" width="1.3569%" height="15" fill="rgb(243,201,19)" fg:x="14044" fg:w="213"/><text x="89.7136%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (164 samples, 1.04%)</title><rect x="89.7758%" y="533" width="1.0447%" height="15" fill="rgb(236,59,4)" fg:x="14093" fg:w="164"/><text x="90.0258%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="90.8778%" y="517" width="0.0127%" height="15" fill="rgb(254,179,45)" fg:x="14266" fg:w="2"/><text x="91.1278%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="90.8587%" y="549" width="0.0382%" height="15" fill="rgb(226,14,10)" fg:x="14263" fg:w="6"/><text x="91.1087%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="90.8778%" y="533" width="0.0191%" height="15" fill="rgb(244,27,41)" fg:x="14266" fg:w="3"/><text x="91.1278%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="90.9033%" y="549" width="0.0573%" height="15" fill="rgb(235,35,32)" fg:x="14270" fg:w="9"/><text x="91.1533%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="90.9224%" y="533" width="0.0382%" height="15" fill="rgb(218,68,31)" fg:x="14273" fg:w="6"/><text x="91.1724%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="90.9606%" y="549" width="0.0255%" height="15" fill="rgb(207,120,37)" fg:x="14279" fg:w="4"/><text x="91.2106%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,354 samples, 91.44%)</title><rect x="0.3185%" y="581" width="91.4384%" height="15" fill="rgb(227,98,0)" fg:x="50" fg:w="14354"/><text x="0.5685%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (147 samples, 0.94%)</title><rect x="90.8205%" y="565" width="0.9364%" height="15" fill="rgb(207,7,3)" fg:x="14257" fg:w="147"/><text x="91.0705%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (120 samples, 0.76%)</title><rect x="90.9925%" y="549" width="0.7644%" height="15" fill="rgb(206,98,19)" fg:x="14284" fg:w="120"/><text x="91.2425%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="91.7951%" y="565" width="0.0446%" height="15" fill="rgb(217,5,26)" fg:x="14410" fg:w="7"/><text x="92.0451%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="91.8142%" y="549" width="0.0255%" height="15" fill="rgb(235,190,38)" fg:x="14413" fg:w="4"/><text x="92.0642%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="91.8206%" y="533" width="0.0191%" height="15" fill="rgb(247,86,24)" fg:x="14414" fg:w="3"/><text x="92.0706%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="91.8397%" y="565" width="0.0255%" height="15" fill="rgb(205,101,16)" fg:x="14417" fg:w="4"/><text x="92.0897%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="91.8652%" y="565" width="0.0127%" height="15" fill="rgb(246,168,33)" fg:x="14421" fg:w="2"/><text x="92.1152%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="91.8779%" y="565" width="0.0127%" height="15" fill="rgb(231,114,1)" fg:x="14423" fg:w="2"/><text x="92.1279%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,484 samples, 92.27%)</title><rect x="0.3058%" y="597" width="92.2665%" height="15" fill="rgb(207,184,53)" fg:x="48" fg:w="14484"/><text x="0.5558%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (128 samples, 0.82%)</title><rect x="91.7569%" y="581" width="0.8154%" height="15" fill="rgb(224,95,51)" fg:x="14404" fg:w="128"/><text x="92.0069%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (107 samples, 0.68%)</title><rect x="91.8907%" y="565" width="0.6816%" height="15" fill="rgb(212,188,45)" fg:x="14425" fg:w="107"/><text x="92.1407%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="92.6424%" y="549" width="0.0255%" height="15" fill="rgb(223,154,38)" fg:x="14543" fg:w="4"/><text x="92.8924%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="92.6551%" y="533" width="0.0127%" height="15" fill="rgb(251,22,52)" fg:x="14545" fg:w="2"/><text x="92.9051%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="92.6296%" y="581" width="0.0446%" height="15" fill="rgb(229,209,22)" fg:x="14541" fg:w="7"/><text x="92.8796%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="92.6360%" y="565" width="0.0382%" height="15" fill="rgb(234,138,34)" fg:x="14542" fg:w="6"/><text x="92.8860%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="92.6742%" y="581" width="0.0255%" height="15" fill="rgb(212,95,11)" fg:x="14548" fg:w="4"/><text x="92.9242%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="92.6870%" y="565" width="0.0127%" height="15" fill="rgb(240,179,47)" fg:x="14550" fg:w="2"/><text x="92.9370%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="92.6997%" y="581" width="0.0127%" height="15" fill="rgb(240,163,11)" fg:x="14552" fg:w="2"/><text x="92.9497%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,603 samples, 93.02%)</title><rect x="0.3058%" y="613" width="93.0246%" height="15" fill="rgb(236,37,12)" fg:x="48" fg:w="14603"/><text x="0.5558%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (119 samples, 0.76%)</title><rect x="92.5723%" y="597" width="0.7581%" height="15" fill="rgb(232,164,16)" fg:x="14532" fg:w="119"/><text x="92.8223%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (97 samples, 0.62%)</title><rect x="92.7124%" y="581" width="0.6179%" height="15" fill="rgb(244,205,15)" fg:x="14554" fg:w="97"/><text x="92.9624%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.06%)</title><rect x="93.3750%" y="597" width="0.0573%" height="15" fill="rgb(223,117,47)" fg:x="14658" fg:w="9"/><text x="93.6250%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.04%)</title><rect x="93.3877%" y="581" width="0.0446%" height="15" fill="rgb(244,107,35)" fg:x="14660" fg:w="7"/><text x="93.6377%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="93.3941%" y="565" width="0.0382%" height="15" fill="rgb(205,140,8)" fg:x="14661" fg:w="6"/><text x="93.6441%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="93.4323%" y="597" width="0.0319%" height="15" fill="rgb(228,84,46)" fg:x="14667" fg:w="5"/><text x="93.6823%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="93.4514%" y="581" width="0.0127%" height="15" fill="rgb(254,188,9)" fg:x="14670" fg:w="2"/><text x="93.7014%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,735 samples, 93.87%)</title><rect x="0.2867%" y="629" width="93.8655%" height="15" fill="rgb(206,112,54)" fg:x="45" fg:w="14735"/><text x="0.5367%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (129 samples, 0.82%)</title><rect x="93.3304%" y="613" width="0.8218%" height="15" fill="rgb(216,84,49)" fg:x="14651" fg:w="129"/><text x="93.5804%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (107 samples, 0.68%)</title><rect x="93.4705%" y="597" width="0.6816%" height="15" fill="rgb(214,194,35)" fg:x="14673" fg:w="107"/><text x="93.7205%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="94.2095%" y="613" width="0.0127%" height="15" fill="rgb(249,28,3)" fg:x="14789" fg:w="2"/><text x="94.4595%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="94.2095%" y="597" width="0.0127%" height="15" fill="rgb(222,56,52)" fg:x="14789" fg:w="2"/><text x="94.4595%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="94.2222%" y="613" width="0.0191%" height="15" fill="rgb(245,217,50)" fg:x="14791" fg:w="3"/><text x="94.4722%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,874 samples, 94.75%)</title><rect x="0.2548%" y="645" width="94.7509%" height="15" fill="rgb(213,201,24)" fg:x="40" fg:w="14874"/><text x="0.5048%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (134 samples, 0.85%)</title><rect x="94.1521%" y="629" width="0.8536%" height="15" fill="rgb(248,116,28)" fg:x="14780" fg:w="134"/><text x="94.4021%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (119 samples, 0.76%)</title><rect x="94.2477%" y="613" width="0.7581%" height="15" fill="rgb(219,72,43)" fg:x="14795" fg:w="119"/><text x="94.4977%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="95.0631%" y="629" width="0.0255%" height="15" fill="rgb(209,138,14)" fg:x="14923" fg:w="4"/><text x="95.3131%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="95.0694%" y="613" width="0.0191%" height="15" fill="rgb(222,18,33)" fg:x="14924" fg:w="3"/><text x="95.3194%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="95.0885%" y="629" width="0.0191%" height="15" fill="rgb(213,199,7)" fg:x="14927" fg:w="3"/><text x="95.3385%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="95.1140%" y="629" width="0.0191%" height="15" fill="rgb(250,110,10)" fg:x="14931" fg:w="3"/><text x="95.3640%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,024 samples, 95.71%)</title><rect x="0.1975%" y="661" width="95.7065%" height="15" fill="rgb(248,123,6)" fg:x="31" fg:w="15024"/><text x="0.4475%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (141 samples, 0.90%)</title><rect x="95.0057%" y="645" width="0.8982%" height="15" fill="rgb(206,91,31)" fg:x="14914" fg:w="141"/><text x="95.2557%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (121 samples, 0.77%)</title><rect x="95.1331%" y="629" width="0.7708%" height="15" fill="rgb(211,154,13)" fg:x="14934" fg:w="121"/><text x="95.3831%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.07%)</title><rect x="95.9613%" y="645" width="0.0701%" height="15" fill="rgb(225,148,7)" fg:x="15064" fg:w="11"/><text x="96.2113%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.05%)</title><rect x="95.9804%" y="629" width="0.0510%" height="15" fill="rgb(220,160,43)" fg:x="15067" fg:w="8"/><text x="96.2304%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.04%)</title><rect x="95.9867%" y="613" width="0.0446%" height="15" fill="rgb(213,52,39)" fg:x="15068" fg:w="7"/><text x="96.2367%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="96.0122%" y="597" width="0.0191%" height="15" fill="rgb(243,137,7)" fg:x="15072" fg:w="3"/><text x="96.2622%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="96.0313%" y="645" width="0.0382%" height="15" fill="rgb(230,79,13)" fg:x="15075" fg:w="6"/><text x="96.2813%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="96.0505%" y="629" width="0.0191%" height="15" fill="rgb(247,105,23)" fg:x="15078" fg:w="3"/><text x="96.3005%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="96.0696%" y="645" width="0.0255%" height="15" fill="rgb(223,179,41)" fg:x="15081" fg:w="4"/><text x="96.3196%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,203 samples, 96.85%)</title><rect x="0.1656%" y="677" width="96.8467%" height="15" fill="rgb(218,9,34)" fg:x="26" fg:w="15203"/><text x="0.4156%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (174 samples, 1.11%)</title><rect x="95.9039%" y="661" width="1.1084%" height="15" fill="rgb(222,106,8)" fg:x="15055" fg:w="174"/><text x="96.1539%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (144 samples, 0.92%)</title><rect x="96.0950%" y="645" width="0.9173%" height="15" fill="rgb(211,220,0)" fg:x="15085" fg:w="144"/><text x="96.3450%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="97.0888%" y="661" width="0.0319%" height="15" fill="rgb(229,52,16)" fg:x="15241" fg:w="5"/><text x="97.3388%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="97.0952%" y="645" width="0.0255%" height="15" fill="rgb(212,155,18)" fg:x="15242" fg:w="4"/><text x="97.3452%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="97.1015%" y="629" width="0.0191%" height="15" fill="rgb(242,21,14)" fg:x="15243" fg:w="3"/><text x="97.3515%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.04%)</title><rect x="97.1207%" y="661" width="0.0446%" height="15" fill="rgb(222,19,48)" fg:x="15246" fg:w="7"/><text x="97.3707%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="97.1398%" y="645" width="0.0255%" height="15" fill="rgb(232,45,27)" fg:x="15249" fg:w="4"/><text x="97.3898%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,344 samples, 97.74%)</title><rect x="0.1465%" y="693" width="97.7449%" height="15" fill="rgb(249,103,42)" fg:x="23" fg:w="15344"/><text x="0.3965%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (138 samples, 0.88%)</title><rect x="97.0124%" y="677" width="0.8791%" height="15" fill="rgb(246,81,33)" fg:x="15229" fg:w="138"/><text x="97.2624%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (113 samples, 0.72%)</title><rect x="97.1716%" y="661" width="0.7198%" height="15" fill="rgb(252,33,42)" fg:x="15254" fg:w="113"/><text x="97.4216%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="97.9488%" y="677" width="0.0319%" height="15" fill="rgb(209,212,41)" fg:x="15376" fg:w="5"/><text x="98.1988%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="97.9552%" y="661" width="0.0255%" height="15" fill="rgb(207,154,6)" fg:x="15377" fg:w="4"/><text x="98.2052%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="97.9552%" y="645" width="0.0255%" height="15" fill="rgb(223,64,47)" fg:x="15377" fg:w="4"/><text x="98.2052%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,439 samples, 98.35%)</title><rect x="0.1401%" y="709" width="98.3501%" height="15" fill="rgb(211,161,38)" fg:x="22" fg:w="15439"/><text x="0.3901%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (94 samples, 0.60%)</title><rect x="97.8915%" y="693" width="0.5988%" height="15" fill="rgb(219,138,40)" fg:x="15367" fg:w="94"/><text x="98.1415%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (77 samples, 0.49%)</title><rect x="97.9997%" y="677" width="0.4905%" height="15" fill="rgb(241,228,46)" fg:x="15384" fg:w="77"/><text x="98.2497%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="98.5094%" y="693" width="0.0127%" height="15" fill="rgb(223,209,38)" fg:x="15464" fg:w="2"/><text x="98.7594%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.5094%" y="677" width="0.0127%" height="15" fill="rgb(236,164,45)" fg:x="15464" fg:w="2"/><text x="98.7594%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="98.5285%" y="693" width="0.0191%" height="15" fill="rgb(231,15,5)" fg:x="15467" fg:w="3"/><text x="98.7785%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,497 samples, 98.72%)</title><rect x="0.1338%" y="725" width="98.7196%" height="15" fill="rgb(252,35,15)" fg:x="21" fg:w="15497"/><text x="0.3838%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (57 samples, 0.36%)</title><rect x="98.4903%" y="709" width="0.3631%" height="15" fill="rgb(248,181,18)" fg:x="15461" fg:w="57"/><text x="98.7403%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (48 samples, 0.31%)</title><rect x="98.5476%" y="693" width="0.3058%" height="15" fill="rgb(233,39,42)" fg:x="15470" fg:w="48"/><text x="98.7976%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,523 samples, 98.89%)</title><rect x="0.1338%" y="741" width="98.8852%" height="15" fill="rgb(238,110,33)" fg:x="21" fg:w="15523"/><text x="0.3838%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (26 samples, 0.17%)</title><rect x="98.8534%" y="725" width="0.1656%" height="15" fill="rgb(233,195,10)" fg:x="15518" fg:w="26"/><text x="99.1034%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (22 samples, 0.14%)</title><rect x="98.8788%" y="709" width="0.1401%" height="15" fill="rgb(254,105,3)" fg:x="15522" fg:w="22"/><text x="99.1288%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,549 samples, 99.05%)</title><rect x="0.1274%" y="757" width="99.0508%" height="15" fill="rgb(221,225,9)" fg:x="20" fg:w="15549"/><text x="0.3774%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (25 samples, 0.16%)</title><rect x="99.0190%" y="741" width="0.1593%" height="15" fill="rgb(224,227,45)" fg:x="15544" fg:w="25"/><text x="99.2690%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (21 samples, 0.13%)</title><rect x="99.0445%" y="725" width="0.1338%" height="15" fill="rgb(229,198,43)" fg:x="15548" fg:w="21"/><text x="99.2945%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="99.1782%" y="741" width="0.0127%" height="15" fill="rgb(206,209,35)" fg:x="15569" fg:w="2"/><text x="99.4282%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,569 samples, 99.18%)</title><rect x="0.1274%" y="773" width="99.1782%" height="15" fill="rgb(245,195,53)" fg:x="20" fg:w="15569"/><text x="0.3774%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (20 samples, 0.13%)</title><rect x="99.1782%" y="757" width="0.1274%" height="15" fill="rgb(240,92,26)" fg:x="15569" fg:w="20"/><text x="99.4282%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (18 samples, 0.11%)</title><rect x="99.1910%" y="741" width="0.1147%" height="15" fill="rgb(207,40,23)" fg:x="15571" fg:w="18"/><text x="99.4410%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="99.3184%" y="757" width="0.0127%" height="15" fill="rgb(223,111,35)" fg:x="15591" fg:w="2"/><text x="99.5684%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,587 samples, 99.29%)</title><rect x="0.1210%" y="789" width="99.2929%" height="15" fill="rgb(229,147,28)" fg:x="19" fg:w="15587"/><text x="0.3710%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (17 samples, 0.11%)</title><rect x="99.3056%" y="773" width="0.1083%" height="15" fill="rgb(211,29,28)" fg:x="15589" fg:w="17"/><text x="99.5556%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.08%)</title><rect x="99.3375%" y="757" width="0.0764%" height="15" fill="rgb(228,72,33)" fg:x="15594" fg:w="12"/><text x="99.5875%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,600 samples, 99.38%)</title><rect x="0.1210%" y="805" width="99.3757%" height="15" fill="rgb(205,214,31)" fg:x="19" fg:w="15600"/><text x="0.3710%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (13 samples, 0.08%)</title><rect x="99.4139%" y="789" width="0.0828%" height="15" fill="rgb(224,111,15)" fg:x="15606" fg:w="13"/><text x="99.6639%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.08%)</title><rect x="99.4203%" y="773" width="0.0764%" height="15" fill="rgb(253,21,26)" fg:x="15607" fg:w="12"/><text x="99.6703%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,606 samples, 99.41%)</title><rect x="0.1210%" y="821" width="99.4139%" height="15" fill="rgb(245,139,43)" fg:x="19" fg:w="15606"/><text x="0.3710%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.04%)</title><rect x="99.4968%" y="805" width="0.0382%" height="15" fill="rgb(252,170,7)" fg:x="15619" fg:w="6"/><text x="99.7468%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (6 samples, 0.04%)</title><rect x="99.4968%" y="789" width="0.0382%" height="15" fill="rgb(231,118,14)" fg:x="15619" fg:w="6"/><text x="99.7468%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,608 samples, 99.43%)</title><rect x="0.1210%" y="837" width="99.4267%" height="15" fill="rgb(238,83,0)" fg:x="19" fg:w="15608"/><text x="0.3710%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.01%)</title><rect x="99.5350%" y="821" width="0.0127%" height="15" fill="rgb(221,39,39)" fg:x="15625" fg:w="2"/><text x="99.7850%" y="831.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="99.5350%" y="805" width="0.0127%" height="15" fill="rgb(222,119,46)" fg:x="15625" fg:w="2"/><text x="99.7850%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,610 samples, 99.44%)</title><rect x="0.1210%" y="853" width="99.4394%" height="15" fill="rgb(222,165,49)" fg:x="19" fg:w="15610"/><text x="0.3710%" y="863.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.01%)</title><rect x="99.5477%" y="837" width="0.0127%" height="15" fill="rgb(219,113,52)" fg:x="15627" fg:w="2"/><text x="99.7977%" y="847.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="99.5477%" y="821" width="0.0127%" height="15" fill="rgb(214,7,15)" fg:x="15627" fg:w="2"/><text x="99.7977%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.7962%" y="837" width="0.0191%" height="15" fill="rgb(235,32,4)" fg:x="15666" fg:w="3"/><text x="100.0462%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.8025%" y="821" width="0.0127%" height="15" fill="rgb(238,90,54)" fg:x="15667" fg:w="2"/><text x="100.0525%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="99.8153%" y="837" width="0.0191%" height="15" fill="rgb(213,208,19)" fg:x="15669" fg:w="3"/><text x="100.0653%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="99.8216%" y="821" width="0.0127%" height="15" fill="rgb(233,156,4)" fg:x="15670" fg:w="2"/><text x="100.0716%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="99.8344%" y="837" width="0.0127%" height="15" fill="rgb(207,194,5)" fg:x="15672" fg:w="2"/><text x="100.0844%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="99.8726%" y="789" width="0.0191%" height="15" fill="rgb(206,111,30)" fg:x="15678" fg:w="3"/><text x="100.1226%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (53 samples, 0.34%)</title><rect x="99.5605%" y="853" width="0.3376%" height="15" fill="rgb(243,70,54)" fg:x="15629" fg:w="53"/><text x="99.8105%" y="863.50"></text></g><g><title>sudoku-solver`alloc::vec::from_elem (8 samples, 0.05%)</title><rect x="99.8471%" y="837" width="0.0510%" height="15" fill="rgb(242,28,8)" fg:x="15674" fg:w="8"/><text x="100.0971%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="99.8662%" y="821" width="0.0319%" height="15" fill="rgb(219,106,18)" fg:x="15677" fg:w="5"/><text x="100.1162%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="99.8726%" y="805" width="0.0255%" height="15" fill="rgb(244,222,10)" fg:x="15678" fg:w="4"/><text x="100.1226%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.05%)</title><rect x="99.9236%" y="757" width="0.0510%" height="15" fill="rgb(236,179,52)" fg:x="15686" fg:w="8"/><text x="100.1736%" y="767.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.08%)</title><rect x="99.9108%" y="789" width="0.0764%" height="15" fill="rgb(213,23,39)" fg:x="15684" fg:w="12"/><text x="100.1608%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (11 samples, 0.07%)</title><rect x="99.9172%" y="773" width="0.0701%" height="15" fill="rgb(238,48,10)" fg:x="15685" fg:w="11"/><text x="100.1672%" y="783.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (2 samples, 0.01%)</title><rect x="99.9745%" y="757" width="0.0127%" height="15" fill="rgb(251,196,23)" fg:x="15694" fg:w="2"/><text x="100.2245%" y="767.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.10%)</title><rect x="99.8981%" y="821" width="0.0956%" height="15" fill="rgb(250,152,24)" fg:x="15682" fg:w="15"/><text x="100.1481%" y="831.50"></text></g><g><title>sudoku-solver`core::fmt::write (13 samples, 0.08%)</title><rect x="99.9108%" y="805" width="0.0828%" height="15" fill="rgb(209,150,17)" fg:x="15684" fg:w="13"/><text x="100.1608%" y="815.50"></text></g><g><title>all (15,698 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="975.50"></text></g><g><title>dyld`start (15,698 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="959.50">dyld`start</text></g><g><title>sudoku-solver`main (15,698 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(218,129,16)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="943.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (15,698 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(216,85,19)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="927.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (15,698 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="911.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (15,698 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="15698"/><text x="0.2500%" y="895.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (15,697 samples, 99.99%)</title><rect x="0.0064%" y="869" width="99.9936%" height="15" fill="rgb(208,168,36)" fg:x="1" fg:w="15697"/><text x="0.2564%" y="879.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (16 samples, 0.10%)</title><rect x="99.8981%" y="853" width="0.1019%" height="15" fill="rgb(246,171,24)" fg:x="15682" fg:w="16"/><text x="100.1481%" y="863.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (16 samples, 0.10%)</title><rect x="99.8981%" y="837" width="0.1019%" height="15" fill="rgb(215,142,24)" fg:x="15682" fg:w="16"/><text x="100.1481%" y="847.50"></text></g></svg></svg>