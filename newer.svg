<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="15480"><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="0.0194%" y="869" width="0.0258%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="4"/><text x="0.2694%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="0.0323%" y="853" width="0.0129%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="2"/><text x="0.2823%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="0.0452%" y="869" width="0.0129%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="2"/><text x="0.2952%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="0.0452%" y="853" width="0.0129%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="0.2952%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="0.0452%" y="837" width="0.0129%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="0.2952%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="0.0581%" y="869" width="0.0129%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="2"/><text x="0.3081%" y="879.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.0840%" y="853" width="0.0129%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="2"/><text x="0.3340%" y="863.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="0.0775%" y="869" width="0.0323%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="5"/><text x="0.3275%" y="879.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="0.0969%" y="853" width="0.0129%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="2"/><text x="0.3469%" y="863.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="0.0969%" y="837" width="0.0129%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="2"/><text x="0.3469%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="0.0969%" y="821" width="0.0129%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="2"/><text x="0.3469%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="0.0969%" y="805" width="0.0129%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="2"/><text x="0.3469%" y="815.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (7 samples, 0.05%)</title><rect x="0.1098%" y="869" width="0.0452%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="7"/><text x="0.3598%" y="879.50"></text></g><g><title>sudoku-solver`std::fs::read_to_string::inner (2 samples, 0.01%)</title><rect x="0.1550%" y="869" width="0.0129%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="2"/><text x="0.4050%" y="879.50"></text></g><g><title>sudoku-solver`&lt;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.01%)</title><rect x="0.1550%" y="853" width="0.0129%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="2"/><text x="0.4050%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.01%)</title><rect x="0.1550%" y="837" width="0.0129%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="2"/><text x="0.4050%" y="847.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (2 samples, 0.01%)</title><rect x="0.1680%" y="869" width="0.0129%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="2"/><text x="0.4180%" y="879.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.01%)</title><rect x="0.1680%" y="853" width="0.0129%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="2"/><text x="0.4180%" y="863.50"></text></g><g><title>sudoku-solver`core::fmt::write (2 samples, 0.01%)</title><rect x="0.1680%" y="837" width="0.0129%" height="15" fill="rgb(221,200,47)" fg:x="26" fg:w="2"/><text x="0.4180%" y="847.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="0.1680%" y="821" width="0.0129%" height="15" fill="rgb(226,26,5)" fg:x="26" fg:w="2"/><text x="0.4180%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.01%)</title><rect x="0.1680%" y="805" width="0.0129%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="2"/><text x="0.4180%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.1873%" y="773" width="0.0129%" height="15" fill="rgb(235,183,28)" fg:x="29" fg:w="2"/><text x="0.4373%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.2390%" y="709" width="0.0129%" height="15" fill="rgb(221,5,38)" fg:x="37" fg:w="2"/><text x="0.4890%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.2519%" y="709" width="0.0129%" height="15" fill="rgb(247,18,42)" fg:x="39" fg:w="2"/><text x="0.5019%" y="719.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="0.2972%" y="693" width="0.0129%" height="15" fill="rgb(241,131,45)" fg:x="46" fg:w="2"/><text x="0.5472%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.3424%" y="661" width="0.0129%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="2"/><text x="0.5924%" y="671.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="0.3618%" y="661" width="0.0129%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="2"/><text x="0.6118%" y="671.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="0.4070%" y="645" width="0.0129%" height="15" fill="rgb(238,160,17)" fg:x="63" fg:w="2"/><text x="0.6570%" y="655.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="0.4199%" y="645" width="0.0194%" height="15" fill="rgb(214,148,48)" fg:x="65" fg:w="3"/><text x="0.6699%" y="655.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="0.4587%" y="629" width="0.0129%" height="15" fill="rgb(232,36,49)" fg:x="71" fg:w="2"/><text x="0.7087%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.4780%" y="613" width="0.0129%" height="15" fill="rgb(209,103,24)" fg:x="74" fg:w="2"/><text x="0.7280%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.4910%" y="613" width="0.0129%" height="15" fill="rgb(229,88,8)" fg:x="76" fg:w="2"/><text x="0.7410%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="0.5362%" y="597" width="0.0129%" height="15" fill="rgb(213,181,19)" fg:x="83" fg:w="2"/><text x="0.7862%" y="607.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="0.5491%" y="597" width="0.0129%" height="15" fill="rgb(254,191,54)" fg:x="85" fg:w="2"/><text x="0.7991%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.5814%" y="581" width="0.0129%" height="15" fill="rgb(241,83,37)" fg:x="90" fg:w="2"/><text x="0.8314%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="0.6331%" y="565" width="0.0258%" height="15" fill="rgb(233,36,39)" fg:x="98" fg:w="4"/><text x="0.8831%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.6783%" y="549" width="0.0129%" height="15" fill="rgb(226,3,54)" fg:x="105" fg:w="2"/><text x="0.9283%" y="559.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="0.6912%" y="549" width="0.0194%" height="15" fill="rgb(245,192,40)" fg:x="107" fg:w="3"/><text x="0.9412%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="0.7881%" y="517" width="0.0258%" height="15" fill="rgb(238,167,29)" fg:x="122" fg:w="4"/><text x="1.0381%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="0.8140%" y="517" width="0.0323%" height="15" fill="rgb(232,182,51)" fg:x="126" fg:w="5"/><text x="1.0640%" y="527.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="0.8527%" y="517" width="0.0258%" height="15" fill="rgb(231,60,39)" fg:x="132" fg:w="4"/><text x="1.1027%" y="527.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="0.8850%" y="517" width="0.0194%" height="15" fill="rgb(208,69,12)" fg:x="137" fg:w="3"/><text x="1.1350%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.03%)</title><rect x="0.9496%" y="501" width="0.0258%" height="15" fill="rgb(235,93,37)" fg:x="147" fg:w="4"/><text x="1.1996%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="0.9755%" y="501" width="0.0581%" height="15" fill="rgb(213,116,39)" fg:x="151" fg:w="9"/><text x="1.2255%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="1.0336%" y="501" width="0.0129%" height="15" fill="rgb(222,207,29)" fg:x="160" fg:w="2"/><text x="1.2836%" y="511.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="1.0530%" y="501" width="0.0258%" height="15" fill="rgb(206,96,30)" fg:x="163" fg:w="4"/><text x="1.3030%" y="511.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="1.0788%" y="501" width="0.0194%" height="15" fill="rgb(218,138,4)" fg:x="167" fg:w="3"/><text x="1.3288%" y="511.50"></text></g><g><title>sudoku-solver`__rdl_alloc (6 samples, 0.04%)</title><rect x="1.0982%" y="501" width="0.0388%" height="15" fill="rgb(250,191,14)" fg:x="170" fg:w="6"/><text x="1.3482%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="1.1757%" y="485" width="0.0129%" height="15" fill="rgb(239,60,40)" fg:x="182" fg:w="2"/><text x="1.4257%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="1.1886%" y="485" width="0.0517%" height="15" fill="rgb(206,27,48)" fg:x="184" fg:w="8"/><text x="1.4386%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="1.2403%" y="485" width="0.0388%" height="15" fill="rgb(225,35,8)" fg:x="192" fg:w="6"/><text x="1.4903%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="1.2855%" y="485" width="0.0258%" height="15" fill="rgb(250,213,24)" fg:x="199" fg:w="4"/><text x="1.5355%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.03%)</title><rect x="1.3114%" y="485" width="0.0323%" height="15" fill="rgb(247,123,22)" fg:x="203" fg:w="5"/><text x="1.5614%" y="495.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="1.3437%" y="485" width="0.0194%" height="15" fill="rgb(231,138,38)" fg:x="208" fg:w="3"/><text x="1.5937%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.3953%" y="469" width="0.0129%" height="15" fill="rgb(231,145,46)" fg:x="216" fg:w="2"/><text x="1.6453%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="1.4083%" y="469" width="0.0129%" height="15" fill="rgb(251,118,11)" fg:x="218" fg:w="2"/><text x="1.6583%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="1.4212%" y="469" width="0.0388%" height="15" fill="rgb(217,147,25)" fg:x="220" fg:w="6"/><text x="1.6712%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="1.4599%" y="469" width="0.0323%" height="15" fill="rgb(247,81,37)" fg:x="226" fg:w="5"/><text x="1.7099%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="1.4922%" y="469" width="0.0388%" height="15" fill="rgb(209,12,38)" fg:x="231" fg:w="6"/><text x="1.7422%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (11 samples, 0.07%)</title><rect x="1.5310%" y="469" width="0.0711%" height="15" fill="rgb(227,1,9)" fg:x="237" fg:w="11"/><text x="1.7810%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (7 samples, 0.05%)</title><rect x="1.6021%" y="469" width="0.0452%" height="15" fill="rgb(248,47,43)" fg:x="248" fg:w="7"/><text x="1.8521%" y="479.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="1.6473%" y="469" width="0.0129%" height="15" fill="rgb(221,10,30)" fg:x="255" fg:w="2"/><text x="1.8973%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.03%)</title><rect x="1.7442%" y="453" width="0.0258%" height="15" fill="rgb(210,229,1)" fg:x="270" fg:w="4"/><text x="1.9942%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="1.7700%" y="453" width="0.0581%" height="15" fill="rgb(222,148,37)" fg:x="274" fg:w="9"/><text x="2.0200%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="1.8282%" y="453" width="0.0323%" height="15" fill="rgb(234,67,33)" fg:x="283" fg:w="5"/><text x="2.0782%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="1.8605%" y="453" width="0.0258%" height="15" fill="rgb(247,98,35)" fg:x="288" fg:w="4"/><text x="2.1105%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="1.8863%" y="453" width="0.0258%" height="15" fill="rgb(247,138,52)" fg:x="292" fg:w="4"/><text x="2.1363%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="1.9121%" y="453" width="0.0258%" height="15" fill="rgb(213,79,30)" fg:x="296" fg:w="4"/><text x="2.1621%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="2.0284%" y="437" width="0.0194%" height="15" fill="rgb(246,177,23)" fg:x="314" fg:w="3"/><text x="2.2784%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="2.0478%" y="437" width="0.0452%" height="15" fill="rgb(230,62,27)" fg:x="317" fg:w="7"/><text x="2.2978%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="2.0930%" y="437" width="0.0258%" height="15" fill="rgb(216,154,8)" fg:x="324" fg:w="4"/><text x="2.3430%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.1189%" y="437" width="0.0129%" height="15" fill="rgb(244,35,45)" fg:x="328" fg:w="2"/><text x="2.3689%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="2.1318%" y="437" width="0.0194%" height="15" fill="rgb(251,115,12)" fg:x="330" fg:w="3"/><text x="2.3818%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="2.1512%" y="437" width="0.0258%" height="15" fill="rgb(240,54,50)" fg:x="333" fg:w="4"/><text x="2.4012%" y="447.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="2.1770%" y="437" width="0.0194%" height="15" fill="rgb(233,84,52)" fg:x="337" fg:w="3"/><text x="2.4270%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="2.2416%" y="421" width="0.0129%" height="15" fill="rgb(207,117,47)" fg:x="347" fg:w="2"/><text x="2.4916%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.05%)</title><rect x="2.2545%" y="421" width="0.0517%" height="15" fill="rgb(249,43,39)" fg:x="349" fg:w="8"/><text x="2.5045%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="2.3062%" y="421" width="0.0258%" height="15" fill="rgb(209,38,44)" fg:x="357" fg:w="4"/><text x="2.5562%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.05%)</title><rect x="2.3320%" y="421" width="0.0452%" height="15" fill="rgb(236,212,23)" fg:x="361" fg:w="7"/><text x="2.5820%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.3773%" y="421" width="0.0129%" height="15" fill="rgb(242,79,21)" fg:x="368" fg:w="2"/><text x="2.6273%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (5 samples, 0.03%)</title><rect x="2.3902%" y="421" width="0.0323%" height="15" fill="rgb(211,96,35)" fg:x="370" fg:w="5"/><text x="2.6402%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="2.4225%" y="421" width="0.0258%" height="15" fill="rgb(253,215,40)" fg:x="375" fg:w="4"/><text x="2.6725%" y="431.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="2.4483%" y="421" width="0.0194%" height="15" fill="rgb(211,81,21)" fg:x="379" fg:w="3"/><text x="2.6983%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="2.5129%" y="405" width="0.0194%" height="15" fill="rgb(208,190,38)" fg:x="389" fg:w="3"/><text x="2.7629%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.05%)</title><rect x="2.5323%" y="405" width="0.0452%" height="15" fill="rgb(235,213,38)" fg:x="392" fg:w="7"/><text x="2.7823%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="2.5775%" y="405" width="0.0517%" height="15" fill="rgb(237,122,38)" fg:x="399" fg:w="8"/><text x="2.8275%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.05%)</title><rect x="2.6292%" y="405" width="0.0517%" height="15" fill="rgb(244,218,35)" fg:x="407" fg:w="8"/><text x="2.8792%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="2.6809%" y="405" width="0.0129%" height="15" fill="rgb(240,68,47)" fg:x="415" fg:w="2"/><text x="2.9309%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="2.6938%" y="405" width="0.0129%" height="15" fill="rgb(210,16,53)" fg:x="417" fg:w="2"/><text x="2.9438%" y="415.50"></text></g><g><title>sudoku-solver`__rdl_alloc (4 samples, 0.03%)</title><rect x="2.7132%" y="405" width="0.0258%" height="15" fill="rgb(235,124,12)" fg:x="420" fg:w="4"/><text x="2.9632%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="2.7842%" y="389" width="0.0194%" height="15" fill="rgb(224,169,11)" fg:x="431" fg:w="3"/><text x="3.0342%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.06%)</title><rect x="2.8036%" y="389" width="0.0646%" height="15" fill="rgb(250,166,2)" fg:x="434" fg:w="10"/><text x="3.0536%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.05%)</title><rect x="2.8682%" y="389" width="0.0452%" height="15" fill="rgb(242,216,29)" fg:x="444" fg:w="7"/><text x="3.1182%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="2.9199%" y="389" width="0.0194%" height="15" fill="rgb(230,116,27)" fg:x="452" fg:w="3"/><text x="3.1699%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="2.9393%" y="389" width="0.0258%" height="15" fill="rgb(228,99,48)" fg:x="455" fg:w="4"/><text x="3.1893%" y="399.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="2.9651%" y="389" width="0.0129%" height="15" fill="rgb(253,11,6)" fg:x="459" fg:w="2"/><text x="3.2151%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="3.0297%" y="373" width="0.0194%" height="15" fill="rgb(247,143,39)" fg:x="469" fg:w="3"/><text x="3.2797%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="3.0491%" y="373" width="0.0258%" height="15" fill="rgb(236,97,10)" fg:x="472" fg:w="4"/><text x="3.2991%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="3.0749%" y="373" width="0.0258%" height="15" fill="rgb(233,208,19)" fg:x="476" fg:w="4"/><text x="3.3249%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="3.1008%" y="373" width="0.0129%" height="15" fill="rgb(216,164,2)" fg:x="480" fg:w="2"/><text x="3.3508%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="3.1137%" y="373" width="0.0129%" height="15" fill="rgb(220,129,5)" fg:x="482" fg:w="2"/><text x="3.3637%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="3.1266%" y="373" width="0.0129%" height="15" fill="rgb(242,17,10)" fg:x="484" fg:w="2"/><text x="3.3766%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="3.1654%" y="357" width="0.0194%" height="15" fill="rgb(242,107,0)" fg:x="490" fg:w="3"/><text x="3.4154%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="3.1848%" y="357" width="0.0258%" height="15" fill="rgb(251,28,31)" fg:x="493" fg:w="4"/><text x="3.4348%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="3.2106%" y="357" width="0.0194%" height="15" fill="rgb(233,223,10)" fg:x="497" fg:w="3"/><text x="3.4606%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="3.2300%" y="357" width="0.0194%" height="15" fill="rgb(215,21,27)" fg:x="500" fg:w="3"/><text x="3.4800%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="3.2494%" y="357" width="0.0129%" height="15" fill="rgb(232,23,21)" fg:x="503" fg:w="2"/><text x="3.4994%" y="367.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.02%)</title><rect x="3.2623%" y="357" width="0.0194%" height="15" fill="rgb(244,5,23)" fg:x="505" fg:w="3"/><text x="3.5123%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="3.3204%" y="341" width="0.0129%" height="15" fill="rgb(226,81,46)" fg:x="514" fg:w="2"/><text x="3.5704%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="3.3463%" y="341" width="0.0194%" height="15" fill="rgb(247,70,30)" fg:x="518" fg:w="3"/><text x="3.5963%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="3.3850%" y="325" width="0.0129%" height="15" fill="rgb(212,68,19)" fg:x="524" fg:w="2"/><text x="3.6350%" y="335.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="3.4044%" y="325" width="0.0194%" height="15" fill="rgb(240,187,13)" fg:x="527" fg:w="3"/><text x="3.6544%" y="335.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="3.4238%" y="325" width="0.0129%" height="15" fill="rgb(223,113,26)" fg:x="530" fg:w="2"/><text x="3.6738%" y="335.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="3.5659%" y="213" width="0.0129%" height="15" fill="rgb(206,192,2)" fg:x="552" fg:w="2"/><text x="3.8159%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="3.5982%" y="181" width="0.0129%" height="15" fill="rgb(241,108,4)" fg:x="557" fg:w="2"/><text x="3.8482%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="3.6111%" y="181" width="0.0129%" height="15" fill="rgb(247,173,49)" fg:x="559" fg:w="2"/><text x="3.8611%" y="191.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.01%)</title><rect x="3.6628%" y="149" width="0.0129%" height="15" fill="rgb(224,114,35)" fg:x="567" fg:w="2"/><text x="3.9128%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.02%)</title><rect x="3.6757%" y="69" width="0.0194%" height="15" fill="rgb(245,159,27)" fg:x="569" fg:w="3"/><text x="3.9257%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.01%)</title><rect x="3.6822%" y="53" width="0.0129%" height="15" fill="rgb(245,172,44)" fg:x="570" fg:w="2"/><text x="3.9322%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="3.6822%" y="37" width="0.0129%" height="15" fill="rgb(236,23,11)" fg:x="570" fg:w="2"/><text x="3.9322%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5 samples, 0.03%)</title><rect x="3.6757%" y="85" width="0.0323%" height="15" fill="rgb(205,117,38)" fg:x="569" fg:w="5"/><text x="3.9257%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.01%)</title><rect x="3.6951%" y="69" width="0.0129%" height="15" fill="rgb(237,72,25)" fg:x="572" fg:w="2"/><text x="3.9451%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="3.6951%" y="53" width="0.0129%" height="15" fill="rgb(244,70,9)" fg:x="572" fg:w="2"/><text x="3.9451%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11 samples, 0.07%)</title><rect x="3.6757%" y="101" width="0.0711%" height="15" fill="rgb(217,125,39)" fg:x="569" fg:w="11"/><text x="3.9257%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.04%)</title><rect x="3.7080%" y="85" width="0.0388%" height="15" fill="rgb(235,36,10)" fg:x="574" fg:w="6"/><text x="3.9580%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (5 samples, 0.03%)</title><rect x="3.7145%" y="69" width="0.0323%" height="15" fill="rgb(251,123,47)" fg:x="575" fg:w="5"/><text x="3.9645%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19 samples, 0.12%)</title><rect x="3.6757%" y="117" width="0.1227%" height="15" fill="rgb(221,13,13)" fg:x="569" fg:w="19"/><text x="3.9257%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (8 samples, 0.05%)</title><rect x="3.7468%" y="101" width="0.0517%" height="15" fill="rgb(238,131,9)" fg:x="580" fg:w="8"/><text x="3.9968%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (8 samples, 0.05%)</title><rect x="3.7468%" y="85" width="0.0517%" height="15" fill="rgb(211,50,8)" fg:x="580" fg:w="8"/><text x="3.9968%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (30 samples, 0.19%)</title><rect x="3.6757%" y="133" width="0.1938%" height="15" fill="rgb(245,182,24)" fg:x="569" fg:w="30"/><text x="3.9257%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.07%)</title><rect x="3.7984%" y="117" width="0.0711%" height="15" fill="rgb(242,14,37)" fg:x="588" fg:w="11"/><text x="4.0484%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.06%)</title><rect x="3.8114%" y="101" width="0.0581%" height="15" fill="rgb(246,228,12)" fg:x="590" fg:w="9"/><text x="4.0614%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (43 samples, 0.28%)</title><rect x="3.6757%" y="149" width="0.2778%" height="15" fill="rgb(213,55,15)" fg:x="569" fg:w="43"/><text x="3.9257%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (13 samples, 0.08%)</title><rect x="3.8695%" y="133" width="0.0840%" height="15" fill="rgb(209,9,3)" fg:x="599" fg:w="13"/><text x="4.1195%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (10 samples, 0.06%)</title><rect x="3.8889%" y="117" width="0.0646%" height="15" fill="rgb(230,59,30)" fg:x="602" fg:w="10"/><text x="4.1389%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="3.9664%" y="133" width="0.0258%" height="15" fill="rgb(209,121,21)" fg:x="614" fg:w="4"/><text x="4.2164%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="3.9729%" y="117" width="0.0194%" height="15" fill="rgb(220,109,13)" fg:x="615" fg:w="3"/><text x="4.2229%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (83 samples, 0.54%)</title><rect x="3.6499%" y="165" width="0.5362%" height="15" fill="rgb(232,18,1)" fg:x="565" fg:w="83"/><text x="3.8999%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (36 samples, 0.23%)</title><rect x="3.9535%" y="149" width="0.2326%" height="15" fill="rgb(215,41,42)" fg:x="612" fg:w="36"/><text x="4.2035%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (30 samples, 0.19%)</title><rect x="3.9922%" y="133" width="0.1938%" height="15" fill="rgb(224,123,36)" fg:x="618" fg:w="30"/><text x="4.2422%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="4.1925%" y="149" width="0.0194%" height="15" fill="rgb(240,125,3)" fg:x="649" fg:w="3"/><text x="4.4425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="4.2119%" y="149" width="0.0194%" height="15" fill="rgb(205,98,50)" fg:x="652" fg:w="3"/><text x="4.4619%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (135 samples, 0.87%)</title><rect x="3.6240%" y="181" width="0.8721%" height="15" fill="rgb(205,185,37)" fg:x="561" fg:w="135"/><text x="3.8740%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (48 samples, 0.31%)</title><rect x="4.1860%" y="165" width="0.3101%" height="15" fill="rgb(238,207,15)" fg:x="648" fg:w="48"/><text x="4.4360%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (40 samples, 0.26%)</title><rect x="4.2377%" y="149" width="0.2584%" height="15" fill="rgb(213,199,42)" fg:x="656" fg:w="40"/><text x="4.4877%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="4.5155%" y="165" width="0.0129%" height="15" fill="rgb(235,201,11)" fg:x="699" fg:w="2"/><text x="4.7655%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (190 samples, 1.23%)</title><rect x="3.5982%" y="197" width="1.2274%" height="15" fill="rgb(207,46,11)" fg:x="557" fg:w="190"/><text x="3.8482%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (51 samples, 0.33%)</title><rect x="4.4961%" y="181" width="0.3295%" height="15" fill="rgb(241,35,35)" fg:x="696" fg:w="51"/><text x="4.7461%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (45 samples, 0.29%)</title><rect x="4.5349%" y="165" width="0.2907%" height="15" fill="rgb(243,32,47)" fg:x="702" fg:w="45"/><text x="4.7849%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="4.8320%" y="181" width="0.0323%" height="15" fill="rgb(247,202,23)" fg:x="748" fg:w="5"/><text x="5.0820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="4.8450%" y="165" width="0.0194%" height="15" fill="rgb(219,102,11)" fg:x="750" fg:w="3"/><text x="5.0950%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="4.8450%" y="149" width="0.0194%" height="15" fill="rgb(243,110,44)" fg:x="750" fg:w="3"/><text x="5.0950%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="4.8708%" y="181" width="0.0129%" height="15" fill="rgb(222,74,54)" fg:x="754" fg:w="2"/><text x="5.1208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="4.8837%" y="181" width="0.0194%" height="15" fill="rgb(216,99,12)" fg:x="756" fg:w="3"/><text x="5.1337%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (273 samples, 1.76%)</title><rect x="3.5788%" y="213" width="1.7636%" height="15" fill="rgb(226,22,26)" fg:x="554" fg:w="273"/><text x="3.8288%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (80 samples, 0.52%)</title><rect x="4.8256%" y="197" width="0.5168%" height="15" fill="rgb(217,163,10)" fg:x="747" fg:w="80"/><text x="5.0756%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (68 samples, 0.44%)</title><rect x="4.9031%" y="181" width="0.4393%" height="15" fill="rgb(213,25,53)" fg:x="759" fg:w="68"/><text x="5.1531%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="5.3682%" y="197" width="0.0258%" height="15" fill="rgb(252,105,26)" fg:x="831" fg:w="4"/><text x="5.6182%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="5.3747%" y="181" width="0.0194%" height="15" fill="rgb(220,39,43)" fg:x="832" fg:w="3"/><text x="5.6247%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="5.3811%" y="165" width="0.0129%" height="15" fill="rgb(229,68,48)" fg:x="833" fg:w="2"/><text x="5.6311%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="5.3941%" y="197" width="0.0194%" height="15" fill="rgb(252,8,32)" fg:x="835" fg:w="3"/><text x="5.6441%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="5.4005%" y="181" width="0.0129%" height="15" fill="rgb(223,20,43)" fg:x="836" fg:w="2"/><text x="5.6505%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (373 samples, 2.41%)</title><rect x="3.5530%" y="229" width="2.4096%" height="15" fill="rgb(229,81,49)" fg:x="550" fg:w="373"/><text x="3.8030%" y="239.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (96 samples, 0.62%)</title><rect x="5.3424%" y="213" width="0.6202%" height="15" fill="rgb(236,28,36)" fg:x="827" fg:w="96"/><text x="5.5924%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (84 samples, 0.54%)</title><rect x="5.4199%" y="197" width="0.5426%" height="15" fill="rgb(249,185,26)" fg:x="839" fg:w="84"/><text x="5.6699%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="5.9948%" y="213" width="0.0517%" height="15" fill="rgb(249,174,33)" fg:x="928" fg:w="8"/><text x="6.2448%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="6.0078%" y="197" width="0.0388%" height="15" fill="rgb(233,201,37)" fg:x="930" fg:w="6"/><text x="6.2578%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="6.0207%" y="181" width="0.0258%" height="15" fill="rgb(221,78,26)" fg:x="932" fg:w="4"/><text x="6.2707%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="6.0465%" y="213" width="0.0194%" height="15" fill="rgb(250,127,30)" fg:x="936" fg:w="3"/><text x="6.2965%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="6.0465%" y="197" width="0.0194%" height="15" fill="rgb(230,49,44)" fg:x="936" fg:w="3"/><text x="6.2965%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="6.0788%" y="213" width="0.0129%" height="15" fill="rgb(229,67,23)" fg:x="941" fg:w="2"/><text x="6.3288%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (488 samples, 3.15%)</title><rect x="3.5465%" y="245" width="3.1525%" height="15" fill="rgb(249,83,47)" fg:x="549" fg:w="488"/><text x="3.7965%" y="255.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (114 samples, 0.74%)</title><rect x="5.9625%" y="229" width="0.7364%" height="15" fill="rgb(215,43,3)" fg:x="923" fg:w="114"/><text x="6.2125%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (94 samples, 0.61%)</title><rect x="6.0917%" y="213" width="0.6072%" height="15" fill="rgb(238,154,13)" fg:x="943" fg:w="94"/><text x="6.3417%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="6.7183%" y="229" width="0.0258%" height="15" fill="rgb(219,56,2)" fg:x="1040" fg:w="4"/><text x="6.9683%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="6.7183%" y="213" width="0.0258%" height="15" fill="rgb(233,0,4)" fg:x="1040" fg:w="4"/><text x="6.9683%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="6.7248%" y="197" width="0.0194%" height="15" fill="rgb(235,30,7)" fg:x="1041" fg:w="3"/><text x="6.9748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="6.7442%" y="229" width="0.0388%" height="15" fill="rgb(250,79,13)" fg:x="1044" fg:w="6"/><text x="6.9942%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="6.7700%" y="213" width="0.0129%" height="15" fill="rgb(211,146,34)" fg:x="1048" fg:w="2"/><text x="7.0200%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (596 samples, 3.85%)</title><rect x="3.5207%" y="261" width="3.8501%" height="15" fill="rgb(228,22,38)" fg:x="545" fg:w="596"/><text x="3.7707%" y="271.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (104 samples, 0.67%)</title><rect x="6.6990%" y="245" width="0.6718%" height="15" fill="rgb(235,168,5)" fg:x="1037" fg:w="104"/><text x="6.9490%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (91 samples, 0.59%)</title><rect x="6.7829%" y="229" width="0.5879%" height="15" fill="rgb(221,155,16)" fg:x="1050" fg:w="91"/><text x="7.0329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="7.4096%" y="245" width="0.0517%" height="15" fill="rgb(215,215,53)" fg:x="1147" fg:w="8"/><text x="7.6596%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="7.4354%" y="229" width="0.0258%" height="15" fill="rgb(223,4,10)" fg:x="1151" fg:w="4"/><text x="7.6854%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="7.4419%" y="213" width="0.0194%" height="15" fill="rgb(234,103,6)" fg:x="1152" fg:w="3"/><text x="7.6919%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="7.4612%" y="245" width="0.0388%" height="15" fill="rgb(227,97,0)" fg:x="1155" fg:w="6"/><text x="7.7112%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="7.4742%" y="229" width="0.0258%" height="15" fill="rgb(234,150,53)" fg:x="1157" fg:w="4"/><text x="7.7242%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (731 samples, 4.72%)</title><rect x="3.5207%" y="277" width="4.7222%" height="15" fill="rgb(228,201,54)" fg:x="545" fg:w="731"/><text x="3.7707%" y="287.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (135 samples, 0.87%)</title><rect x="7.3708%" y="261" width="0.8721%" height="15" fill="rgb(222,22,37)" fg:x="1141" fg:w="135"/><text x="7.6208%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (115 samples, 0.74%)</title><rect x="7.5000%" y="245" width="0.7429%" height="15" fill="rgb(237,53,32)" fg:x="1161" fg:w="115"/><text x="7.7500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="8.3075%" y="229" width="0.0194%" height="15" fill="rgb(233,25,53)" fg:x="1286" fg:w="3"/><text x="8.5575%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="8.3010%" y="261" width="0.0323%" height="15" fill="rgb(210,40,34)" fg:x="1285" fg:w="5"/><text x="8.5510%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="8.3075%" y="245" width="0.0258%" height="15" fill="rgb(241,220,44)" fg:x="1286" fg:w="4"/><text x="8.5575%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="8.3333%" y="261" width="0.0258%" height="15" fill="rgb(235,28,35)" fg:x="1290" fg:w="4"/><text x="8.5833%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="8.3398%" y="245" width="0.0194%" height="15" fill="rgb(210,56,17)" fg:x="1291" fg:w="3"/><text x="8.5898%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="8.3656%" y="261" width="0.0129%" height="15" fill="rgb(224,130,29)" fg:x="1295" fg:w="2"/><text x="8.6156%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (856 samples, 5.53%)</title><rect x="3.4948%" y="293" width="5.5297%" height="15" fill="rgb(235,212,8)" fg:x="541" fg:w="856"/><text x="3.7448%" y="303.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (121 samples, 0.78%)</title><rect x="8.2429%" y="277" width="0.7817%" height="15" fill="rgb(223,33,50)" fg:x="1276" fg:w="121"/><text x="8.4929%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (100 samples, 0.65%)</title><rect x="8.3786%" y="261" width="0.6460%" height="15" fill="rgb(219,149,13)" fg:x="1297" fg:w="100"/><text x="8.6286%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="9.0439%" y="277" width="0.0517%" height="15" fill="rgb(250,156,29)" fg:x="1400" fg:w="8"/><text x="9.2939%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="9.0504%" y="261" width="0.0452%" height="15" fill="rgb(216,193,19)" fg:x="1401" fg:w="7"/><text x="9.3004%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="9.0633%" y="245" width="0.0323%" height="15" fill="rgb(216,135,14)" fg:x="1403" fg:w="5"/><text x="9.3133%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="9.0827%" y="229" width="0.0129%" height="15" fill="rgb(241,47,5)" fg:x="1406" fg:w="2"/><text x="9.3327%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="9.0956%" y="277" width="0.0129%" height="15" fill="rgb(233,42,35)" fg:x="1408" fg:w="2"/><text x="9.3456%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="9.1085%" y="277" width="0.0581%" height="15" fill="rgb(231,13,6)" fg:x="1410" fg:w="9"/><text x="9.3585%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="9.1279%" y="261" width="0.0388%" height="15" fill="rgb(207,181,40)" fg:x="1413" fg:w="6"/><text x="9.3779%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,003 samples, 6.48%)</title><rect x="3.4625%" y="309" width="6.4793%" height="15" fill="rgb(254,173,49)" fg:x="536" fg:w="1003"/><text x="3.7125%" y="319.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (142 samples, 0.92%)</title><rect x="9.0245%" y="293" width="0.9173%" height="15" fill="rgb(221,1,38)" fg:x="1397" fg:w="142"/><text x="9.2745%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (119 samples, 0.77%)</title><rect x="9.1731%" y="277" width="0.7687%" height="15" fill="rgb(206,124,46)" fg:x="1420" fg:w="119"/><text x="9.4231%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="10.0388%" y="261" width="0.0194%" height="15" fill="rgb(249,21,11)" fg:x="1554" fg:w="3"/><text x="10.2888%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="10.0452%" y="245" width="0.0129%" height="15" fill="rgb(222,201,40)" fg:x="1555" fg:w="2"/><text x="10.2952%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="10.0129%" y="293" width="0.0517%" height="15" fill="rgb(235,61,29)" fg:x="1550" fg:w="8"/><text x="10.2629%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="10.0323%" y="277" width="0.0323%" height="15" fill="rgb(219,207,3)" fg:x="1553" fg:w="5"/><text x="10.2823%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="10.0646%" y="293" width="0.0388%" height="15" fill="rgb(222,56,46)" fg:x="1558" fg:w="6"/><text x="10.3146%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="10.0840%" y="277" width="0.0194%" height="15" fill="rgb(239,76,54)" fg:x="1561" fg:w="3"/><text x="10.3340%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="10.1034%" y="293" width="0.0129%" height="15" fill="rgb(231,124,27)" fg:x="1564" fg:w="2"/><text x="10.3534%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,163 samples, 7.51%)</title><rect x="3.4367%" y="325" width="7.5129%" height="15" fill="rgb(249,195,6)" fg:x="532" fg:w="1163"/><text x="3.6867%" y="335.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (156 samples, 1.01%)</title><rect x="9.9419%" y="309" width="1.0078%" height="15" fill="rgb(237,174,47)" fg:x="1539" fg:w="156"/><text x="10.1919%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (129 samples, 0.83%)</title><rect x="10.1163%" y="293" width="0.8333%" height="15" fill="rgb(206,201,31)" fg:x="1566" fg:w="129"/><text x="10.3663%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="11.0788%" y="277" width="0.0258%" height="15" fill="rgb(231,57,52)" fg:x="1715" fg:w="4"/><text x="11.3288%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.09%)</title><rect x="11.0207%" y="309" width="0.0904%" height="15" fill="rgb(248,177,22)" fg:x="1706" fg:w="14"/><text x="11.2707%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.05%)</title><rect x="11.0594%" y="293" width="0.0517%" height="15" fill="rgb(215,211,37)" fg:x="1712" fg:w="8"/><text x="11.3094%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.06%)</title><rect x="11.1111%" y="309" width="0.0646%" height="15" fill="rgb(241,128,51)" fg:x="1720" fg:w="10"/><text x="11.3611%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.03%)</title><rect x="11.1434%" y="293" width="0.0323%" height="15" fill="rgb(227,165,31)" fg:x="1725" fg:w="5"/><text x="11.3934%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.05%)</title><rect x="11.1822%" y="309" width="0.0517%" height="15" fill="rgb(228,167,24)" fg:x="1731" fg:w="8"/><text x="11.4322%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,400 samples, 9.04%)</title><rect x="3.3721%" y="341" width="9.0439%" height="15" fill="rgb(228,143,12)" fg:x="522" fg:w="1400"/><text x="3.6221%" y="351.50">sudoku-solver..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (227 samples, 1.47%)</title><rect x="10.9496%" y="325" width="1.4664%" height="15" fill="rgb(249,149,8)" fg:x="1695" fg:w="227"/><text x="11.1996%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (181 samples, 1.17%)</title><rect x="11.2468%" y="309" width="1.1693%" height="15" fill="rgb(243,35,44)" fg:x="1741" fg:w="181"/><text x="11.4968%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.05%)</title><rect x="12.5452%" y="293" width="0.0517%" height="15" fill="rgb(246,89,9)" fg:x="1942" fg:w="8"/><text x="12.7952%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="12.5840%" y="277" width="0.0129%" height="15" fill="rgb(233,213,13)" fg:x="1948" fg:w="2"/><text x="12.8340%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.12%)</title><rect x="12.4935%" y="325" width="0.1163%" height="15" fill="rgb(233,141,41)" fg:x="1934" fg:w="18"/><text x="12.7435%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.08%)</title><rect x="12.5323%" y="309" width="0.0775%" height="15" fill="rgb(239,167,4)" fg:x="1940" fg:w="12"/><text x="12.7823%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="12.5969%" y="293" width="0.0129%" height="15" fill="rgb(209,217,16)" fg:x="1950" fg:w="2"/><text x="12.8469%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.07%)</title><rect x="12.6098%" y="325" width="0.0711%" height="15" fill="rgb(219,88,35)" fg:x="1952" fg:w="11"/><text x="12.8598%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="12.6615%" y="309" width="0.0194%" height="15" fill="rgb(220,193,23)" fg:x="1960" fg:w="3"/><text x="12.9115%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.06%)</title><rect x="12.6809%" y="325" width="0.0646%" height="15" fill="rgb(230,90,52)" fg:x="1963" fg:w="10"/><text x="12.9309%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,737 samples, 11.22%)</title><rect x="3.2817%" y="357" width="11.2209%" height="15" fill="rgb(252,106,19)" fg:x="508" fg:w="1737"/><text x="3.5317%" y="367.50">sudoku-solver`sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (323 samples, 2.09%)</title><rect x="12.4160%" y="341" width="2.0866%" height="15" fill="rgb(206,74,20)" fg:x="1922" fg:w="323"/><text x="12.6660%" y="351.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (270 samples, 1.74%)</title><rect x="12.7584%" y="325" width="1.7442%" height="15" fill="rgb(230,138,44)" fg:x="1975" fg:w="270"/><text x="13.0084%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.10%)</title><rect x="14.6576%" y="309" width="0.0969%" height="15" fill="rgb(235,182,43)" fg:x="2269" fg:w="15"/><text x="14.9076%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="14.7416%" y="293" width="0.0129%" height="15" fill="rgb(242,16,51)" fg:x="2282" fg:w="2"/><text x="14.9916%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.13%)</title><rect x="14.6318%" y="341" width="0.1292%" height="15" fill="rgb(248,9,4)" fg:x="2265" fg:w="20"/><text x="14.8818%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.12%)</title><rect x="14.6382%" y="325" width="0.1227%" height="15" fill="rgb(210,31,22)" fg:x="2266" fg:w="19"/><text x="14.8882%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.05%)</title><rect x="14.7610%" y="341" width="0.0452%" height="15" fill="rgb(239,54,39)" fg:x="2285" fg:w="7"/><text x="15.0110%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.09%)</title><rect x="14.8062%" y="341" width="0.0904%" height="15" fill="rgb(230,99,41)" fg:x="2292" fg:w="14"/><text x="15.0562%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.05%)</title><rect x="14.8450%" y="325" width="0.0517%" height="15" fill="rgb(253,106,12)" fg:x="2298" fg:w="8"/><text x="15.0950%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="14.9031%" y="341" width="0.0388%" height="15" fill="rgb(213,46,41)" fg:x="2307" fg:w="6"/><text x="15.1531%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="14.9483%" y="341" width="0.0129%" height="15" fill="rgb(215,133,35)" fg:x="2314" fg:w="2"/><text x="15.1983%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,336 samples, 15.09%)</title><rect x="3.1460%" y="373" width="15.0904%" height="15" fill="rgb(213,28,5)" fg:x="487" fg:w="2336"/><text x="3.3960%" y="383.50">sudoku-solver`sudoku_so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (578 samples, 3.73%)</title><rect x="14.5026%" y="357" width="3.7339%" height="15" fill="rgb(215,77,49)" fg:x="2245" fg:w="578"/><text x="14.7526%" y="367.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (507 samples, 3.28%)</title><rect x="14.9612%" y="341" width="3.2752%" height="15" fill="rgb(248,100,22)" fg:x="2316" fg:w="507"/><text x="15.2112%" y="351.50">sud..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.15%)</title><rect x="18.6499%" y="325" width="0.1486%" height="15" fill="rgb(208,67,9)" fg:x="2887" fg:w="23"/><text x="18.8999%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="18.7597%" y="309" width="0.0388%" height="15" fill="rgb(219,133,21)" fg:x="2904" fg:w="6"/><text x="19.0097%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.30%)</title><rect x="18.5207%" y="357" width="0.2972%" height="15" fill="rgb(246,46,29)" fg:x="2867" fg:w="46"/><text x="18.7707%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.21%)</title><rect x="18.6111%" y="341" width="0.2067%" height="15" fill="rgb(246,185,52)" fg:x="2881" fg:w="32"/><text x="18.8611%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="18.7984%" y="325" width="0.0194%" height="15" fill="rgb(252,136,11)" fg:x="2910" fg:w="3"/><text x="19.0484%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.30%)</title><rect x="18.8243%" y="357" width="0.2972%" height="15" fill="rgb(219,138,53)" fg:x="2914" fg:w="46"/><text x="19.0743%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.12%)</title><rect x="19.0052%" y="341" width="0.1163%" height="15" fill="rgb(211,51,23)" fg:x="2942" fg:w="18"/><text x="19.2552%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="19.1214%" y="357" width="0.0129%" height="15" fill="rgb(247,221,28)" fg:x="2960" fg:w="2"/><text x="19.3714%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.11%)</title><rect x="19.1344%" y="357" width="0.1098%" height="15" fill="rgb(251,222,45)" fg:x="2962" fg:w="17"/><text x="19.3844%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="19.2442%" y="357" width="0.0129%" height="15" fill="rgb(217,162,53)" fg:x="2979" fg:w="2"/><text x="19.4942%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3,318 samples, 21.43%)</title><rect x="2.9780%" y="389" width="21.4341%" height="15" fill="rgb(229,93,14)" fg:x="461" fg:w="3318"/><text x="3.2280%" y="399.50">sudoku-solver`sudoku_solver::backt..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (956 samples, 6.18%)</title><rect x="18.2364%" y="373" width="6.1757%" height="15" fill="rgb(209,67,49)" fg:x="2823" fg:w="956"/><text x="18.4864%" y="383.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (798 samples, 5.16%)</title><rect x="19.2571%" y="357" width="5.1550%" height="15" fill="rgb(213,87,29)" fg:x="2981" fg:w="798"/><text x="19.5071%" y="367.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="24.8191%" y="357" width="0.0194%" height="15" fill="rgb(205,151,52)" fg:x="3842" fg:w="3"/><text x="25.0691%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.16%)</title><rect x="24.8902%" y="341" width="0.1550%" height="15" fill="rgb(253,215,39)" fg:x="3853" fg:w="24"/><text x="25.1402%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="25.0129%" y="325" width="0.0323%" height="15" fill="rgb(221,220,41)" fg:x="3872" fg:w="5"/><text x="25.2629%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.35%)</title><rect x="24.7222%" y="373" width="0.3488%" height="15" fill="rgb(218,133,21)" fg:x="3827" fg:w="54"/><text x="24.9722%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.23%)</title><rect x="24.8385%" y="357" width="0.2326%" height="15" fill="rgb(221,193,43)" fg:x="3845" fg:w="36"/><text x="25.0885%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="25.0452%" y="341" width="0.0258%" height="15" fill="rgb(240,128,52)" fg:x="3877" fg:w="4"/><text x="25.2952%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.03%)</title><rect x="25.0711%" y="373" width="0.0323%" height="15" fill="rgb(253,114,12)" fg:x="3881" fg:w="5"/><text x="25.3211%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.08%)</title><rect x="25.2649%" y="357" width="0.0775%" height="15" fill="rgb(215,223,47)" fg:x="3911" fg:w="12"/><text x="25.5149%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.25%)</title><rect x="25.1034%" y="373" width="0.2455%" height="15" fill="rgb(248,225,23)" fg:x="3886" fg:w="38"/><text x="25.3534%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="25.3488%" y="373" width="0.0194%" height="15" fill="rgb(250,108,0)" fg:x="3924" fg:w="3"/><text x="25.5988%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.11%)</title><rect x="25.3682%" y="373" width="0.1098%" height="15" fill="rgb(228,208,7)" fg:x="3927" fg:w="17"/><text x="25.6182%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="25.4780%" y="373" width="0.0258%" height="15" fill="rgb(244,45,10)" fg:x="3944" fg:w="4"/><text x="25.7280%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="25.5039%" y="373" width="0.0129%" height="15" fill="rgb(207,125,25)" fg:x="3948" fg:w="2"/><text x="25.7539%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (4,455 samples, 28.78%)</title><rect x="2.7390%" y="405" width="28.7791%" height="15" fill="rgb(210,195,18)" fg:x="424" fg:w="4455"/><text x="2.9890%" y="415.50">sudoku-solver`sudoku_solver::backtraking::back..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,100 samples, 7.11%)</title><rect x="24.4121%" y="389" width="7.1059%" height="15" fill="rgb(249,80,12)" fg:x="3779" fg:w="1100"/><text x="24.6621%" y="399.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (929 samples, 6.00%)</title><rect x="25.5168%" y="373" width="6.0013%" height="15" fill="rgb(221,65,9)" fg:x="3950" fg:w="929"/><text x="25.7668%" y="383.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="31.9251%" y="373" width="0.0194%" height="15" fill="rgb(235,49,36)" fg:x="4942" fg:w="3"/><text x="32.1751%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (35 samples, 0.23%)</title><rect x="31.9961%" y="357" width="0.2261%" height="15" fill="rgb(225,32,20)" fg:x="4953" fg:w="35"/><text x="32.2461%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.05%)</title><rect x="32.1770%" y="341" width="0.0452%" height="15" fill="rgb(215,141,46)" fg:x="4981" fg:w="7"/><text x="32.4270%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (68 samples, 0.44%)</title><rect x="31.8152%" y="389" width="0.4393%" height="15" fill="rgb(250,160,47)" fg:x="4925" fg:w="68"/><text x="32.0652%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.31%)</title><rect x="31.9444%" y="373" width="0.3101%" height="15" fill="rgb(216,222,40)" fg:x="4945" fg:w="48"/><text x="32.1944%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="32.2222%" y="357" width="0.0323%" height="15" fill="rgb(234,217,39)" fg:x="4988" fg:w="5"/><text x="32.4722%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="32.2545%" y="389" width="0.0194%" height="15" fill="rgb(207,178,40)" fg:x="4993" fg:w="3"/><text x="32.5045%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.24%)</title><rect x="32.2739%" y="389" width="0.2390%" height="15" fill="rgb(221,136,13)" fg:x="4996" fg:w="37"/><text x="32.5239%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.10%)</title><rect x="32.4096%" y="373" width="0.1034%" height="15" fill="rgb(249,199,10)" fg:x="5017" fg:w="16"/><text x="32.6596%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="32.5129%" y="389" width="0.0129%" height="15" fill="rgb(249,222,13)" fg:x="5033" fg:w="2"/><text x="32.7629%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.07%)</title><rect x="32.5258%" y="389" width="0.0711%" height="15" fill="rgb(244,185,38)" fg:x="5035" fg:w="11"/><text x="32.7758%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="32.5969%" y="389" width="0.0194%" height="15" fill="rgb(236,202,9)" fg:x="5046" fg:w="3"/><text x="32.8469%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5,469 samples, 35.33%)</title><rect x="2.4677%" y="421" width="35.3295%" height="15" fill="rgb(250,229,37)" fg:x="382" fg:w="5469"/><text x="2.7177%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_rec..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (972 samples, 6.28%)</title><rect x="31.5181%" y="405" width="6.2791%" height="15" fill="rgb(206,174,23)" fg:x="4879" fg:w="972"/><text x="31.7681%" y="415.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (802 samples, 5.18%)</title><rect x="32.6163%" y="389" width="5.1809%" height="15" fill="rgb(211,33,43)" fg:x="5049" fg:w="802"/><text x="32.8663%" y="399.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.05%)</title><rect x="38.1654%" y="389" width="0.0452%" height="15" fill="rgb(245,58,50)" fg:x="5908" fg:w="7"/><text x="38.4154%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.17%)</title><rect x="38.2623%" y="373" width="0.1680%" height="15" fill="rgb(244,68,36)" fg:x="5923" fg:w="26"/><text x="38.5123%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="38.4044%" y="357" width="0.0258%" height="15" fill="rgb(232,229,15)" fg:x="5945" fg:w="4"/><text x="38.6544%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.39%)</title><rect x="38.0556%" y="405" width="0.3941%" height="15" fill="rgb(254,30,23)" fg:x="5891" fg:w="61"/><text x="38.3056%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.24%)</title><rect x="38.2106%" y="389" width="0.2390%" height="15" fill="rgb(235,160,14)" fg:x="5915" fg:w="37"/><text x="38.4606%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="38.4302%" y="373" width="0.0194%" height="15" fill="rgb(212,155,44)" fg:x="5949" fg:w="3"/><text x="38.6802%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="38.4496%" y="405" width="0.0194%" height="15" fill="rgb(226,2,50)" fg:x="5952" fg:w="3"/><text x="38.6996%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.28%)</title><rect x="38.4690%" y="405" width="0.2778%" height="15" fill="rgb(234,177,6)" fg:x="5955" fg:w="43"/><text x="38.7190%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.09%)</title><rect x="38.6563%" y="389" width="0.0904%" height="15" fill="rgb(217,24,9)" fg:x="5984" fg:w="14"/><text x="38.9063%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.12%)</title><rect x="38.7532%" y="405" width="0.1227%" height="15" fill="rgb(220,13,46)" fg:x="5999" fg:w="19"/><text x="39.0032%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="38.8760%" y="405" width="0.0258%" height="15" fill="rgb(239,221,27)" fg:x="6018" fg:w="4"/><text x="39.1260%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (6,537 samples, 42.23%)</title><rect x="2.1964%" y="437" width="42.2287%" height="15" fill="rgb(222,198,25)" fg:x="340" fg:w="6537"/><text x="2.4464%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,026 samples, 6.63%)</title><rect x="37.7972%" y="421" width="6.6279%" height="15" fill="rgb(211,99,13)" fg:x="5851" fg:w="1026"/><text x="38.0472%" y="431.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (855 samples, 5.52%)</title><rect x="38.9018%" y="405" width="5.5233%" height="15" fill="rgb(232,111,31)" fg:x="6022" fg:w="855"/><text x="39.1518%" y="415.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.16%)</title><rect x="44.8514%" y="389" width="0.1550%" height="15" fill="rgb(245,82,37)" fg:x="6943" fg:w="24"/><text x="45.1014%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="44.9677%" y="373" width="0.0388%" height="15" fill="rgb(227,149,46)" fg:x="6961" fg:w="6"/><text x="45.2177%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.30%)</title><rect x="44.7287%" y="421" width="0.2972%" height="15" fill="rgb(218,36,50)" fg:x="6924" fg:w="46"/><text x="44.9787%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.21%)</title><rect x="44.8191%" y="405" width="0.2067%" height="15" fill="rgb(226,80,48)" fg:x="6938" fg:w="32"/><text x="45.0691%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="45.0065%" y="389" width="0.0194%" height="15" fill="rgb(238,224,15)" fg:x="6967" fg:w="3"/><text x="45.2565%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="45.0258%" y="421" width="0.0258%" height="15" fill="rgb(241,136,10)" fg:x="6970" fg:w="4"/><text x="45.2758%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.10%)</title><rect x="45.2519%" y="405" width="0.1034%" height="15" fill="rgb(208,32,45)" fg:x="7005" fg:w="16"/><text x="45.5019%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.31%)</title><rect x="45.0517%" y="421" width="0.3101%" height="15" fill="rgb(207,135,9)" fg:x="6974" fg:w="48"/><text x="45.3017%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.14%)</title><rect x="45.3682%" y="421" width="0.1421%" height="15" fill="rgb(206,86,44)" fg:x="7023" fg:w="22"/><text x="45.6182%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="45.5103%" y="421" width="0.0258%" height="15" fill="rgb(245,177,15)" fg:x="7045" fg:w="4"/><text x="45.7603%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="45.5362%" y="421" width="0.0323%" height="15" fill="rgb(206,64,50)" fg:x="7049" fg:w="5"/><text x="45.7862%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (7,610 samples, 49.16%)</title><rect x="1.9380%" y="453" width="49.1602%" height="15" fill="rgb(234,36,40)" fg:x="300" fg:w="7610"/><text x="2.1880%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,033 samples, 6.67%)</title><rect x="44.4251%" y="437" width="6.6731%" height="15" fill="rgb(213,64,8)" fg:x="6877" fg:w="1033"/><text x="44.6751%" y="447.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (856 samples, 5.53%)</title><rect x="45.5685%" y="421" width="5.5297%" height="15" fill="rgb(210,75,36)" fg:x="7054" fg:w="856"/><text x="45.8185%" y="431.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="51.5891%" y="421" width="0.0258%" height="15" fill="rgb(229,88,21)" fg:x="7986" fg:w="4"/><text x="51.8391%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.14%)</title><rect x="51.6602%" y="405" width="0.1357%" height="15" fill="rgb(252,204,47)" fg:x="7997" fg:w="21"/><text x="51.9102%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="51.7571%" y="389" width="0.0388%" height="15" fill="rgb(208,77,27)" fg:x="8012" fg:w="6"/><text x="52.0071%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 0.37%)</title><rect x="51.4599%" y="437" width="0.3747%" height="15" fill="rgb(221,76,26)" fg:x="7966" fg:w="58"/><text x="51.7099%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.22%)</title><rect x="51.6150%" y="421" width="0.2196%" height="15" fill="rgb(225,139,18)" fg:x="7990" fg:w="34"/><text x="51.8650%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="51.7959%" y="405" width="0.0388%" height="15" fill="rgb(230,137,11)" fg:x="8018" fg:w="6"/><text x="52.0459%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="51.8346%" y="437" width="0.0194%" height="15" fill="rgb(212,28,1)" fg:x="8024" fg:w="3"/><text x="52.0846%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (50 samples, 0.32%)</title><rect x="51.8540%" y="437" width="0.3230%" height="15" fill="rgb(248,164,17)" fg:x="8027" fg:w="50"/><text x="52.1040%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.15%)</title><rect x="52.0284%" y="421" width="0.1486%" height="15" fill="rgb(222,171,42)" fg:x="8054" fg:w="23"/><text x="52.2784%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="52.1770%" y="437" width="0.0194%" height="15" fill="rgb(243,84,45)" fg:x="8077" fg:w="3"/><text x="52.4270%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.10%)</title><rect x="52.1964%" y="437" width="0.0969%" height="15" fill="rgb(252,49,23)" fg:x="8080" fg:w="15"/><text x="52.4464%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="52.2933%" y="437" width="0.0194%" height="15" fill="rgb(215,19,7)" fg:x="8095" fg:w="3"/><text x="52.5433%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="52.3127%" y="437" width="0.0129%" height="15" fill="rgb(238,81,41)" fg:x="8098" fg:w="2"/><text x="52.5627%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (8,879 samples, 57.36%)</title><rect x="1.6602%" y="469" width="57.3579%" height="15" fill="rgb(210,199,37)" fg:x="257" fg:w="8879"/><text x="1.9102%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,226 samples, 7.92%)</title><rect x="51.0982%" y="453" width="7.9199%" height="15" fill="rgb(244,192,49)" fg:x="7910" fg:w="1226"/><text x="51.3482%" y="463.50">sudoku-solv..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,036 samples, 6.69%)</title><rect x="52.3256%" y="437" width="6.6925%" height="15" fill="rgb(226,211,11)" fg:x="8100" fg:w="1036"/><text x="52.5756%" y="447.50">sudoku-so..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.05%)</title><rect x="59.5543%" y="437" width="0.0452%" height="15" fill="rgb(236,162,54)" fg:x="9219" fg:w="7"/><text x="59.8043%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (38 samples, 0.25%)</title><rect x="59.6770%" y="421" width="0.2455%" height="15" fill="rgb(220,229,9)" fg:x="9238" fg:w="38"/><text x="59.9270%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.08%)</title><rect x="59.8450%" y="405" width="0.0775%" height="15" fill="rgb(250,87,22)" fg:x="9264" fg:w="12"/><text x="60.0950%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.55%)</title><rect x="59.4251%" y="453" width="0.5491%" height="15" fill="rgb(239,43,17)" fg:x="9199" fg:w="85"/><text x="59.6751%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (58 samples, 0.37%)</title><rect x="59.5995%" y="437" width="0.3747%" height="15" fill="rgb(231,177,25)" fg:x="9226" fg:w="58"/><text x="59.8495%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.05%)</title><rect x="59.9225%" y="421" width="0.0517%" height="15" fill="rgb(219,179,1)" fg:x="9276" fg:w="8"/><text x="60.1725%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.05%)</title><rect x="59.9742%" y="453" width="0.0517%" height="15" fill="rgb(238,219,53)" fg:x="9284" fg:w="8"/><text x="60.2242%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.45%)</title><rect x="60.0258%" y="453" width="0.4457%" height="15" fill="rgb(232,167,36)" fg:x="9292" fg:w="69"/><text x="60.2758%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.19%)</title><rect x="60.2842%" y="437" width="0.1873%" height="15" fill="rgb(244,19,51)" fg:x="9332" fg:w="29"/><text x="60.5342%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (27 samples, 0.17%)</title><rect x="60.4780%" y="453" width="0.1744%" height="15" fill="rgb(224,6,22)" fg:x="9362" fg:w="27"/><text x="60.7280%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="60.6525%" y="453" width="0.0258%" height="15" fill="rgb(224,145,5)" fg:x="9389" fg:w="4"/><text x="60.9025%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="60.6783%" y="453" width="0.0388%" height="15" fill="rgb(234,130,49)" fg:x="9393" fg:w="6"/><text x="60.9283%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (10,411 samples, 67.25%)</title><rect x="1.3630%" y="485" width="67.2545%" height="15" fill="rgb(254,6,2)" fg:x="211" fg:w="10411"/><text x="1.6130%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,486 samples, 9.60%)</title><rect x="59.0181%" y="469" width="9.5995%" height="15" fill="rgb(208,96,46)" fg:x="9136" fg:w="1486"/><text x="59.2681%" y="479.50">sudoku-solver`..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,223 samples, 7.90%)</title><rect x="60.7171%" y="453" width="7.9005%" height="15" fill="rgb(239,3,39)" fg:x="9399" fg:w="1223"/><text x="60.9671%" y="463.50">sudoku-solv..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="68.9793%" y="453" width="0.0129%" height="15" fill="rgb(233,210,1)" fg:x="10678" fg:w="2"/><text x="69.2293%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.16%)</title><rect x="69.0439%" y="437" width="0.1615%" height="15" fill="rgb(244,137,37)" fg:x="10688" fg:w="25"/><text x="69.2939%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="69.1796%" y="421" width="0.0258%" height="15" fill="rgb(240,136,2)" fg:x="10709" fg:w="4"/><text x="69.4296%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (53 samples, 0.34%)</title><rect x="68.8953%" y="469" width="0.3424%" height="15" fill="rgb(239,18,37)" fg:x="10665" fg:w="53"/><text x="69.1453%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.25%)</title><rect x="68.9922%" y="453" width="0.2455%" height="15" fill="rgb(218,185,22)" fg:x="10680" fg:w="38"/><text x="69.2422%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="69.2054%" y="437" width="0.0323%" height="15" fill="rgb(225,218,4)" fg:x="10713" fg:w="5"/><text x="69.4554%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="69.2377%" y="469" width="0.0129%" height="15" fill="rgb(230,182,32)" fg:x="10718" fg:w="2"/><text x="69.4877%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.36%)</title><rect x="69.2506%" y="469" width="0.3553%" height="15" fill="rgb(242,56,43)" fg:x="10720" fg:w="55"/><text x="69.5006%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.11%)</title><rect x="69.4961%" y="453" width="0.1098%" height="15" fill="rgb(233,99,24)" fg:x="10758" fg:w="17"/><text x="69.7461%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.07%)</title><rect x="69.6059%" y="469" width="0.0711%" height="15" fill="rgb(234,209,42)" fg:x="10775" fg:w="11"/><text x="69.8559%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="69.6770%" y="469" width="0.0194%" height="15" fill="rgb(227,7,12)" fg:x="10786" fg:w="3"/><text x="69.9270%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="69.6964%" y="469" width="0.0129%" height="15" fill="rgb(245,203,43)" fg:x="10789" fg:w="2"/><text x="69.9464%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11,577 samples, 74.79%)</title><rect x="1.1370%" y="501" width="74.7868%" height="15" fill="rgb(238,205,33)" fg:x="176" fg:w="11577"/><text x="1.3870%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,131 samples, 7.31%)</title><rect x="68.6176%" y="485" width="7.3062%" height="15" fill="rgb(231,56,7)" fg:x="10622" fg:w="1131"/><text x="68.8676%" y="495.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (962 samples, 6.21%)</title><rect x="69.7093%" y="469" width="6.2145%" height="15" fill="rgb(244,186,29)" fg:x="10791" fg:w="962"/><text x="69.9593%" y="479.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="76.2661%" y="469" width="0.0129%" height="15" fill="rgb(234,111,31)" fg:x="11806" fg:w="2"/><text x="76.5161%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.18%)</title><rect x="76.3178%" y="453" width="0.1809%" height="15" fill="rgb(241,149,10)" fg:x="11814" fg:w="28"/><text x="76.5678%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.06%)</title><rect x="76.4341%" y="437" width="0.0646%" height="15" fill="rgb(249,206,44)" fg:x="11832" fg:w="10"/><text x="76.6841%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.34%)</title><rect x="76.1757%" y="485" width="0.3359%" height="15" fill="rgb(251,153,30)" fg:x="11792" fg:w="52"/><text x="76.4257%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.23%)</title><rect x="76.2791%" y="469" width="0.2326%" height="15" fill="rgb(239,152,38)" fg:x="11808" fg:w="36"/><text x="76.5291%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="76.4987%" y="453" width="0.0129%" height="15" fill="rgb(249,139,47)" fg:x="11842" fg:w="2"/><text x="76.7487%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="76.5116%" y="485" width="0.0129%" height="15" fill="rgb(244,64,35)" fg:x="11844" fg:w="2"/><text x="76.7616%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.26%)</title><rect x="76.5245%" y="485" width="0.2649%" height="15" fill="rgb(216,46,15)" fg:x="11846" fg:w="41"/><text x="76.7745%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.09%)</title><rect x="76.6990%" y="469" width="0.0904%" height="15" fill="rgb(250,74,19)" fg:x="11873" fg:w="14"/><text x="76.9490%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="76.7894%" y="485" width="0.0258%" height="15" fill="rgb(249,42,33)" fg:x="11887" fg:w="4"/><text x="77.0394%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.08%)</title><rect x="76.8152%" y="485" width="0.0840%" height="15" fill="rgb(242,149,17)" fg:x="11891" fg:w="13"/><text x="77.0652%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12,491 samples, 80.69%)</title><rect x="0.9044%" y="517" width="80.6912%" height="15" fill="rgb(244,29,21)" fg:x="140" fg:w="12491"/><text x="1.1544%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (878 samples, 5.67%)</title><rect x="75.9238%" y="501" width="5.6718%" height="15" fill="rgb(220,130,37)" fg:x="11753" fg:w="878"/><text x="76.1738%" y="511.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (727 samples, 4.70%)</title><rect x="76.8992%" y="485" width="4.6964%" height="15" fill="rgb(211,67,2)" fg:x="11904" fg:w="727"/><text x="77.1492%" y="495.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 0.14%)</title><rect x="81.5956%" y="517" width="0.1421%" height="15" fill="rgb(235,68,52)" fg:x="12631" fg:w="22"/><text x="81.8456%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="81.7959%" y="485" width="0.0388%" height="15" fill="rgb(246,142,3)" fg:x="12662" fg:w="6"/><text x="82.0459%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.10%)</title><rect x="81.8540%" y="469" width="0.0969%" height="15" fill="rgb(241,25,7)" fg:x="12671" fg:w="15"/><text x="82.1040%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="81.9186%" y="453" width="0.0323%" height="15" fill="rgb(242,119,39)" fg:x="12681" fg:w="5"/><text x="82.1686%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.22%)</title><rect x="81.7442%" y="501" width="0.2196%" height="15" fill="rgb(241,98,45)" fg:x="12654" fg:w="34"/><text x="81.9942%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.13%)</title><rect x="81.8346%" y="485" width="0.1292%" height="15" fill="rgb(254,28,30)" fg:x="12668" fg:w="20"/><text x="82.0846%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="81.9509%" y="469" width="0.0129%" height="15" fill="rgb(241,142,54)" fg:x="12686" fg:w="2"/><text x="82.2009%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.14%)</title><rect x="81.9638%" y="501" width="0.1357%" height="15" fill="rgb(222,85,15)" fg:x="12688" fg:w="21"/><text x="82.2138%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.03%)</title><rect x="82.0672%" y="485" width="0.0323%" height="15" fill="rgb(210,85,47)" fg:x="12704" fg:w="5"/><text x="82.3172%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.07%)</title><rect x="82.0995%" y="501" width="0.0711%" height="15" fill="rgb(224,206,25)" fg:x="12709" fg:w="11"/><text x="82.3495%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="82.1770%" y="501" width="0.0258%" height="15" fill="rgb(243,201,19)" fg:x="12721" fg:w="4"/><text x="82.4270%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,132 samples, 84.83%)</title><rect x="0.7429%" y="533" width="84.8320%" height="15" fill="rgb(236,59,4)" fg:x="115" fg:w="13132"/><text x="0.9929%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (593 samples, 3.83%)</title><rect x="81.7442%" y="517" width="3.8307%" height="15" fill="rgb(254,179,45)" fg:x="12654" fg:w="593"/><text x="81.9942%" y="527.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (522 samples, 3.37%)</title><rect x="82.2028%" y="501" width="3.3721%" height="15" fill="rgb(226,14,10)" fg:x="12725" fg:w="522"/><text x="82.4528%" y="511.50">sud..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.05%)</title><rect x="85.7687%" y="485" width="0.0517%" height="15" fill="rgb(244,27,41)" fg:x="13277" fg:w="8"/><text x="86.0187%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.13%)</title><rect x="85.7041%" y="517" width="0.1292%" height="15" fill="rgb(235,35,32)" fg:x="13267" fg:w="20"/><text x="85.9541%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.09%)</title><rect x="85.7429%" y="501" width="0.0904%" height="15" fill="rgb(218,68,31)" fg:x="13273" fg:w="14"/><text x="85.9929%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="85.8204%" y="485" width="0.0129%" height="15" fill="rgb(207,120,37)" fg:x="13285" fg:w="2"/><text x="86.0704%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="85.8333%" y="517" width="0.0194%" height="15" fill="rgb(227,98,0)" fg:x="13287" fg:w="3"/><text x="86.0833%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.12%)</title><rect x="85.8527%" y="517" width="0.1227%" height="15" fill="rgb(207,7,3)" fg:x="13290" fg:w="19"/><text x="86.1027%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="85.9367%" y="501" width="0.0388%" height="15" fill="rgb(206,98,19)" fg:x="13303" fg:w="6"/><text x="86.1867%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.04%)</title><rect x="85.9819%" y="517" width="0.0388%" height="15" fill="rgb(217,5,26)" fg:x="13310" fg:w="6"/><text x="86.2319%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="86.0207%" y="517" width="0.0194%" height="15" fill="rgb(235,190,38)" fg:x="13316" fg:w="3"/><text x="86.2707%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,507 samples, 87.25%)</title><rect x="0.7106%" y="549" width="87.2545%" height="15" fill="rgb(247,86,24)" fg:x="110" fg:w="13507"/><text x="0.9606%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (370 samples, 2.39%)</title><rect x="85.5749%" y="533" width="2.3902%" height="15" fill="rgb(205,101,16)" fg:x="13247" fg:w="370"/><text x="85.8249%" y="543.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (298 samples, 1.93%)</title><rect x="86.0401%" y="517" width="1.9251%" height="15" fill="rgb(246,168,33)" fg:x="13319" fg:w="298"/><text x="86.2901%" y="527.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="88.0426%" y="517" width="0.0129%" height="15" fill="rgb(231,114,1)" fg:x="13629" fg:w="2"/><text x="88.2926%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="88.0620%" y="501" width="0.0388%" height="15" fill="rgb(207,184,53)" fg:x="13632" fg:w="6"/><text x="88.3120%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="88.0814%" y="485" width="0.0194%" height="15" fill="rgb(224,95,51)" fg:x="13635" fg:w="3"/><text x="88.3314%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.08%)</title><rect x="88.0297%" y="533" width="0.0775%" height="15" fill="rgb(212,188,45)" fg:x="13627" fg:w="12"/><text x="88.2797%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.05%)</title><rect x="88.0556%" y="517" width="0.0517%" height="15" fill="rgb(223,154,38)" fg:x="13631" fg:w="8"/><text x="88.3056%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="88.1072%" y="533" width="0.0129%" height="15" fill="rgb(251,22,52)" fg:x="13639" fg:w="2"/><text x="88.3572%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.06%)</title><rect x="88.1202%" y="533" width="0.0646%" height="15" fill="rgb(229,209,22)" fg:x="13641" fg:w="10"/><text x="88.3702%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="88.1718%" y="517" width="0.0129%" height="15" fill="rgb(234,138,34)" fg:x="13649" fg:w="2"/><text x="88.4218%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="88.1912%" y="533" width="0.0323%" height="15" fill="rgb(212,95,11)" fg:x="13652" fg:w="5"/><text x="88.4412%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,775 samples, 88.99%)</title><rect x="0.6654%" y="565" width="88.9858%" height="15" fill="rgb(240,179,47)" fg:x="103" fg:w="13775"/><text x="0.9154%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (261 samples, 1.69%)</title><rect x="87.9651%" y="549" width="1.6860%" height="15" fill="rgb(240,163,11)" fg:x="13617" fg:w="261"/><text x="88.2151%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (219 samples, 1.41%)</title><rect x="88.2364%" y="533" width="1.4147%" height="15" fill="rgb(236,37,12)" fg:x="13659" fg:w="219"/><text x="88.4864%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="89.7222%" y="549" width="0.0517%" height="15" fill="rgb(232,164,16)" fg:x="13889" fg:w="8"/><text x="89.9722%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="89.7287%" y="533" width="0.0452%" height="15" fill="rgb(244,205,15)" fg:x="13890" fg:w="7"/><text x="89.9787%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="89.7351%" y="517" width="0.0388%" height="15" fill="rgb(223,117,47)" fg:x="13891" fg:w="6"/><text x="89.9851%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.10%)</title><rect x="89.7739%" y="549" width="0.1034%" height="15" fill="rgb(244,107,35)" fg:x="13897" fg:w="16"/><text x="90.0239%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.05%)</title><rect x="89.8256%" y="533" width="0.0517%" height="15" fill="rgb(205,140,8)" fg:x="13905" fg:w="8"/><text x="90.0756%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="89.8773%" y="549" width="0.0194%" height="15" fill="rgb(228,84,46)" fg:x="13913" fg:w="3"/><text x="90.1273%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,997 samples, 90.42%)</title><rect x="0.6072%" y="581" width="90.4199%" height="15" fill="rgb(254,188,9)" fg:x="94" fg:w="13997"/><text x="0.8572%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (213 samples, 1.38%)</title><rect x="89.6512%" y="565" width="1.3760%" height="15" fill="rgb(206,112,54)" fg:x="13878" fg:w="213"/><text x="89.9012%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (174 samples, 1.12%)</title><rect x="89.9031%" y="549" width="1.1240%" height="15" fill="rgb(216,84,49)" fg:x="13917" fg:w="174"/><text x="90.1531%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="91.0853%" y="533" width="0.0258%" height="15" fill="rgb(214,194,35)" fg:x="14100" fg:w="4"/><text x="91.3353%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="91.0659%" y="565" width="0.0517%" height="15" fill="rgb(249,28,3)" fg:x="14097" fg:w="8"/><text x="91.3159%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="91.0853%" y="549" width="0.0323%" height="15" fill="rgb(222,56,52)" fg:x="14100" fg:w="5"/><text x="91.3353%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="91.1176%" y="565" width="0.0388%" height="15" fill="rgb(245,217,50)" fg:x="14105" fg:w="6"/><text x="91.3676%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="91.1563%" y="565" width="0.0194%" height="15" fill="rgb(213,201,24)" fg:x="14111" fg:w="3"/><text x="91.4063%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="91.1757%" y="565" width="0.0194%" height="15" fill="rgb(248,116,28)" fg:x="14114" fg:w="3"/><text x="91.4257%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,147 samples, 91.39%)</title><rect x="0.5685%" y="597" width="91.3889%" height="15" fill="rgb(219,72,43)" fg:x="88" fg:w="14147"/><text x="0.8185%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (144 samples, 0.93%)</title><rect x="91.0271%" y="581" width="0.9302%" height="15" fill="rgb(209,138,14)" fg:x="14091" fg:w="144"/><text x="91.2771%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (118 samples, 0.76%)</title><rect x="91.1951%" y="565" width="0.7623%" height="15" fill="rgb(222,18,33)" fg:x="14117" fg:w="118"/><text x="91.4451%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="91.9832%" y="581" width="0.0194%" height="15" fill="rgb(213,199,7)" fg:x="14239" fg:w="3"/><text x="92.2332%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="91.9897%" y="565" width="0.0129%" height="15" fill="rgb(250,110,10)" fg:x="14240" fg:w="2"/><text x="92.2397%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="92.0090%" y="581" width="0.0194%" height="15" fill="rgb(248,123,6)" fg:x="14243" fg:w="3"/><text x="92.2590%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="92.0155%" y="565" width="0.0129%" height="15" fill="rgb(206,91,31)" fg:x="14244" fg:w="2"/><text x="92.2655%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="92.0284%" y="581" width="0.0323%" height="15" fill="rgb(211,154,13)" fg:x="14246" fg:w="5"/><text x="92.2784%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,252 samples, 92.07%)</title><rect x="0.5233%" y="613" width="92.0672%" height="15" fill="rgb(225,148,7)" fg:x="81" fg:w="14252"/><text x="0.7733%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (98 samples, 0.63%)</title><rect x="91.9574%" y="597" width="0.6331%" height="15" fill="rgb(220,160,43)" fg:x="14235" fg:w="98"/><text x="92.2074%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (81 samples, 0.52%)</title><rect x="92.0672%" y="581" width="0.5233%" height="15" fill="rgb(213,52,39)" fg:x="14252" fg:w="81"/><text x="92.3172%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="92.6098%" y="581" width="0.0129%" height="15" fill="rgb(243,137,7)" fg:x="14336" fg:w="2"/><text x="92.8598%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.06%)</title><rect x="92.6034%" y="597" width="0.0581%" height="15" fill="rgb(230,79,13)" fg:x="14335" fg:w="9"/><text x="92.8534%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="92.6227%" y="581" width="0.0388%" height="15" fill="rgb(247,105,23)" fg:x="14338" fg:w="6"/><text x="92.8727%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="92.6227%" y="565" width="0.0388%" height="15" fill="rgb(223,179,41)" fg:x="14338" fg:w="6"/><text x="92.8727%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="92.6680%" y="597" width="0.0323%" height="15" fill="rgb(218,9,34)" fg:x="14345" fg:w="5"/><text x="92.9180%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="92.6809%" y="581" width="0.0194%" height="15" fill="rgb(222,106,8)" fg:x="14347" fg:w="3"/><text x="92.9309%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,365 samples, 92.80%)</title><rect x="0.4716%" y="629" width="92.7972%" height="15" fill="rgb(211,220,0)" fg:x="73" fg:w="14365"/><text x="0.7216%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (105 samples, 0.68%)</title><rect x="92.5904%" y="613" width="0.6783%" height="15" fill="rgb(229,52,16)" fg:x="14333" fg:w="105"/><text x="92.8404%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (86 samples, 0.56%)</title><rect x="92.7132%" y="597" width="0.5556%" height="15" fill="rgb(212,155,18)" fg:x="14352" fg:w="86"/><text x="92.9632%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="93.3269%" y="613" width="0.0194%" height="15" fill="rgb(242,21,14)" fg:x="14447" fg:w="3"/><text x="93.5769%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="93.3527%" y="613" width="0.0452%" height="15" fill="rgb(222,19,48)" fg:x="14451" fg:w="7"/><text x="93.6027%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="93.3850%" y="597" width="0.0129%" height="15" fill="rgb(232,45,27)" fg:x="14456" fg:w="2"/><text x="93.6350%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,491 samples, 93.61%)</title><rect x="0.4393%" y="645" width="93.6111%" height="15" fill="rgb(249,103,42)" fg:x="68" fg:w="14491"/><text x="0.6893%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (121 samples, 0.78%)</title><rect x="93.2687%" y="629" width="0.7817%" height="15" fill="rgb(246,81,33)" fg:x="14438" fg:w="121"/><text x="93.5187%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (100 samples, 0.65%)</title><rect x="93.4044%" y="613" width="0.6460%" height="15" fill="rgb(252,33,42)" fg:x="14459" fg:w="100"/><text x="93.6544%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.04%)</title><rect x="94.1344%" y="597" width="0.0388%" height="15" fill="rgb(209,212,41)" fg:x="14572" fg:w="6"/><text x="94.3844%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="94.1537%" y="581" width="0.0194%" height="15" fill="rgb(207,154,6)" fg:x="14575" fg:w="3"/><text x="94.4037%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.08%)</title><rect x="94.1085%" y="629" width="0.0775%" height="15" fill="rgb(223,64,47)" fg:x="14568" fg:w="12"/><text x="94.3585%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.06%)</title><rect x="94.1214%" y="613" width="0.0646%" height="15" fill="rgb(211,161,38)" fg:x="14570" fg:w="10"/><text x="94.3714%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="94.1731%" y="597" width="0.0129%" height="15" fill="rgb(219,138,40)" fg:x="14578" fg:w="2"/><text x="94.4231%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="94.1860%" y="629" width="0.0258%" height="15" fill="rgb(241,228,46)" fg:x="14580" fg:w="4"/><text x="94.4360%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="94.1990%" y="613" width="0.0129%" height="15" fill="rgb(223,209,38)" fg:x="14582" fg:w="2"/><text x="94.4490%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="94.2119%" y="629" width="0.0129%" height="15" fill="rgb(236,164,45)" fg:x="14584" fg:w="2"/><text x="94.4619%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,648 samples, 94.63%)</title><rect x="0.3747%" y="661" width="94.6253%" height="15" fill="rgb(231,15,5)" fg:x="58" fg:w="14648"/><text x="0.6247%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (147 samples, 0.95%)</title><rect x="94.0504%" y="645" width="0.9496%" height="15" fill="rgb(252,35,15)" fg:x="14559" fg:w="147"/><text x="94.3004%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (118 samples, 0.76%)</title><rect x="94.2377%" y="629" width="0.7623%" height="15" fill="rgb(248,181,18)" fg:x="14588" fg:w="118"/><text x="94.4877%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="95.0323%" y="645" width="0.0388%" height="15" fill="rgb(233,39,42)" fg:x="14711" fg:w="6"/><text x="95.2823%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="95.0452%" y="629" width="0.0258%" height="15" fill="rgb(238,110,33)" fg:x="14713" fg:w="4"/><text x="95.2952%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="95.0517%" y="613" width="0.0194%" height="15" fill="rgb(233,195,10)" fg:x="14714" fg:w="3"/><text x="95.3017%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="95.0775%" y="645" width="0.0323%" height="15" fill="rgb(254,105,3)" fg:x="14718" fg:w="5"/><text x="95.3275%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="95.0969%" y="629" width="0.0129%" height="15" fill="rgb(221,225,9)" fg:x="14721" fg:w="2"/><text x="95.3469%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="95.1098%" y="645" width="0.0258%" height="15" fill="rgb(224,227,45)" fg:x="14723" fg:w="4"/><text x="95.3598%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,804 samples, 95.63%)</title><rect x="0.3295%" y="677" width="95.6331%" height="15" fill="rgb(229,198,43)" fg:x="51" fg:w="14804"/><text x="0.5795%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (149 samples, 0.96%)</title><rect x="95.0000%" y="661" width="0.9625%" height="15" fill="rgb(206,209,35)" fg:x="14706" fg:w="149"/><text x="95.2500%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (127 samples, 0.82%)</title><rect x="95.1421%" y="645" width="0.8204%" height="15" fill="rgb(245,195,53)" fg:x="14728" fg:w="127"/><text x="95.3921%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="96.0336%" y="629" width="0.0323%" height="15" fill="rgb(240,92,26)" fg:x="14866" fg:w="5"/><text x="96.2836%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.06%)</title><rect x="96.0142%" y="661" width="0.0646%" height="15" fill="rgb(207,40,23)" fg:x="14863" fg:w="10"/><text x="96.2642%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.05%)</title><rect x="96.0271%" y="645" width="0.0517%" height="15" fill="rgb(223,111,35)" fg:x="14865" fg:w="8"/><text x="96.2771%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="96.0659%" y="629" width="0.0129%" height="15" fill="rgb(229,147,28)" fg:x="14871" fg:w="2"/><text x="96.3159%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="96.0788%" y="661" width="0.0388%" height="15" fill="rgb(211,29,28)" fg:x="14873" fg:w="6"/><text x="96.3288%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="96.0982%" y="645" width="0.0194%" height="15" fill="rgb(228,72,33)" fg:x="14876" fg:w="3"/><text x="96.3482%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="96.1240%" y="661" width="0.0129%" height="15" fill="rgb(205,214,31)" fg:x="14880" fg:w="2"/><text x="96.3740%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,965 samples, 96.67%)</title><rect x="0.3101%" y="693" width="96.6731%" height="15" fill="rgb(224,111,15)" fg:x="48" fg:w="14965"/><text x="0.5601%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (158 samples, 1.02%)</title><rect x="95.9625%" y="677" width="1.0207%" height="15" fill="rgb(253,21,26)" fg:x="14855" fg:w="158"/><text x="96.2125%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (131 samples, 0.85%)</title><rect x="96.1370%" y="661" width="0.8463%" height="15" fill="rgb(245,139,43)" fg:x="14882" fg:w="131"/><text x="96.3870%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="97.0220%" y="677" width="0.0388%" height="15" fill="rgb(252,170,7)" fg:x="15019" fg:w="6"/><text x="97.2720%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="97.0413%" y="661" width="0.0194%" height="15" fill="rgb(231,118,14)" fg:x="15022" fg:w="3"/><text x="97.2913%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="97.0413%" y="645" width="0.0194%" height="15" fill="rgb(238,83,0)" fg:x="15022" fg:w="3"/><text x="97.2913%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="97.0607%" y="677" width="0.0452%" height="15" fill="rgb(221,39,39)" fg:x="15025" fg:w="7"/><text x="97.3107%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="97.0801%" y="661" width="0.0258%" height="15" fill="rgb(222,119,46)" fg:x="15028" fg:w="4"/><text x="97.3301%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="97.1059%" y="677" width="0.0129%" height="15" fill="rgb(222,165,49)" fg:x="15032" fg:w="2"/><text x="97.3559%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,115 samples, 97.64%)</title><rect x="0.2649%" y="709" width="97.6421%" height="15" fill="rgb(219,113,52)" fg:x="41" fg:w="15115"/><text x="0.5149%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (143 samples, 0.92%)</title><rect x="96.9832%" y="693" width="0.9238%" height="15" fill="rgb(214,7,15)" fg:x="15013" fg:w="143"/><text x="97.2332%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (121 samples, 0.78%)</title><rect x="97.1253%" y="677" width="0.7817%" height="15" fill="rgb(235,32,4)" fg:x="15035" fg:w="121"/><text x="97.3753%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="97.9393%" y="693" width="0.0194%" height="15" fill="rgb(238,90,54)" fg:x="15161" fg:w="3"/><text x="98.1893%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="97.9393%" y="677" width="0.0194%" height="15" fill="rgb(213,208,19)" fg:x="15161" fg:w="3"/><text x="98.1893%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="97.9457%" y="661" width="0.0129%" height="15" fill="rgb(233,156,4)" fg:x="15162" fg:w="2"/><text x="98.1957%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="97.9651%" y="693" width="0.0258%" height="15" fill="rgb(207,194,5)" fg:x="15165" fg:w="4"/><text x="98.2151%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="97.9651%" y="677" width="0.0258%" height="15" fill="rgb(206,111,30)" fg:x="15165" fg:w="4"/><text x="98.2151%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,219 samples, 98.31%)</title><rect x="0.2261%" y="725" width="98.3140%" height="15" fill="rgb(243,70,54)" fg:x="35" fg:w="15219"/><text x="0.4761%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (98 samples, 0.63%)</title><rect x="97.9070%" y="709" width="0.6331%" height="15" fill="rgb(242,28,8)" fg:x="15156" fg:w="98"/><text x="98.1570%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (84 samples, 0.54%)</title><rect x="97.9974%" y="693" width="0.5426%" height="15" fill="rgb(219,106,18)" fg:x="15170" fg:w="84"/><text x="98.2474%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="98.5594%" y="709" width="0.0258%" height="15" fill="rgb(244,222,10)" fg:x="15257" fg:w="4"/><text x="98.8094%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="98.5659%" y="693" width="0.0194%" height="15" fill="rgb(236,179,52)" fg:x="15258" fg:w="3"/><text x="98.8159%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="98.5853%" y="709" width="0.0194%" height="15" fill="rgb(213,23,39)" fg:x="15261" fg:w="3"/><text x="98.8353%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,267 samples, 98.62%)</title><rect x="0.2196%" y="741" width="98.6240%" height="15" fill="rgb(238,48,10)" fg:x="34" fg:w="15267"/><text x="0.4696%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (47 samples, 0.30%)</title><rect x="98.5401%" y="725" width="0.3036%" height="15" fill="rgb(251,196,23)" fg:x="15254" fg:w="47"/><text x="98.7901%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (37 samples, 0.24%)</title><rect x="98.6047%" y="709" width="0.2390%" height="15" fill="rgb(250,152,24)" fg:x="15264" fg:w="37"/><text x="98.8547%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="98.8501%" y="725" width="0.0194%" height="15" fill="rgb(209,150,17)" fg:x="15302" fg:w="3"/><text x="99.1001%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.8566%" y="709" width="0.0129%" height="15" fill="rgb(234,202,34)" fg:x="15303" fg:w="2"/><text x="99.1066%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.8760%" y="725" width="0.0129%" height="15" fill="rgb(253,148,53)" fg:x="15306" fg:w="2"/><text x="99.1260%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,303 samples, 98.86%)</title><rect x="0.2196%" y="757" width="98.8566%" height="15" fill="rgb(218,129,16)" fg:x="34" fg:w="15303"/><text x="0.4696%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (36 samples, 0.23%)</title><rect x="98.8437%" y="741" width="0.2326%" height="15" fill="rgb(216,85,19)" fg:x="15301" fg:w="36"/><text x="99.0937%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (29 samples, 0.19%)</title><rect x="98.8889%" y="725" width="0.1873%" height="15" fill="rgb(235,228,7)" fg:x="15308" fg:w="29"/><text x="99.1389%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="99.0891%" y="741" width="0.0129%" height="15" fill="rgb(245,175,0)" fg:x="15339" fg:w="2"/><text x="99.3391%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.0891%" y="725" width="0.0129%" height="15" fill="rgb(208,168,36)" fg:x="15339" fg:w="2"/><text x="99.3391%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="99.0891%" y="709" width="0.0129%" height="15" fill="rgb(246,171,24)" fg:x="15339" fg:w="2"/><text x="99.3391%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="99.1021%" y="741" width="0.0194%" height="15" fill="rgb(215,142,24)" fg:x="15341" fg:w="3"/><text x="99.3521%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="99.1085%" y="725" width="0.0129%" height="15" fill="rgb(250,187,7)" fg:x="15342" fg:w="2"/><text x="99.3585%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,330 samples, 99.03%)</title><rect x="0.2067%" y="773" width="99.0310%" height="15" fill="rgb(228,66,33)" fg:x="32" fg:w="15330"/><text x="0.4567%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (25 samples, 0.16%)</title><rect x="99.0762%" y="757" width="0.1615%" height="15" fill="rgb(234,215,21)" fg:x="15337" fg:w="25"/><text x="99.3262%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (18 samples, 0.12%)</title><rect x="99.1214%" y="741" width="0.1163%" height="15" fill="rgb(222,191,20)" fg:x="15344" fg:w="18"/><text x="99.3714%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="99.2442%" y="757" width="0.0129%" height="15" fill="rgb(245,79,54)" fg:x="15363" fg:w="2"/><text x="99.4942%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.2442%" y="741" width="0.0129%" height="15" fill="rgb(240,10,37)" fg:x="15363" fg:w="2"/><text x="99.4942%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,361 samples, 99.23%)</title><rect x="0.1873%" y="789" width="99.2313%" height="15" fill="rgb(214,192,32)" fg:x="29" fg:w="15361"/><text x="0.4373%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (28 samples, 0.18%)</title><rect x="99.2377%" y="773" width="0.1809%" height="15" fill="rgb(209,36,54)" fg:x="15362" fg:w="28"/><text x="99.4877%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (23 samples, 0.15%)</title><rect x="99.2700%" y="757" width="0.1486%" height="15" fill="rgb(220,10,11)" fg:x="15367" fg:w="23"/><text x="99.5200%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="99.4251%" y="773" width="0.0129%" height="15" fill="rgb(221,106,17)" fg:x="15391" fg:w="2"/><text x="99.6751%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="99.4380%" y="773" width="0.0129%" height="15" fill="rgb(251,142,44)" fg:x="15393" fg:w="2"/><text x="99.6880%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,380 samples, 99.35%)</title><rect x="0.1809%" y="805" width="99.3540%" height="15" fill="rgb(238,13,15)" fg:x="28" fg:w="15380"/><text x="0.4309%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 0.12%)</title><rect x="99.4186%" y="789" width="0.1163%" height="15" fill="rgb(208,107,27)" fg:x="15390" fg:w="18"/><text x="99.6686%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (13 samples, 0.08%)</title><rect x="99.4509%" y="773" width="0.0840%" height="15" fill="rgb(205,136,37)" fg:x="15395" fg:w="13"/><text x="99.7009%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,390 samples, 99.42%)</title><rect x="0.1809%" y="821" width="99.4186%" height="15" fill="rgb(250,205,27)" fg:x="28" fg:w="15390"/><text x="0.4309%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.06%)</title><rect x="99.5349%" y="805" width="0.0646%" height="15" fill="rgb(210,80,43)" fg:x="15408" fg:w="10"/><text x="99.7849%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.06%)</title><rect x="99.5413%" y="789" width="0.0581%" height="15" fill="rgb(247,160,36)" fg:x="15409" fg:w="9"/><text x="99.7913%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,394 samples, 99.44%)</title><rect x="0.1809%" y="837" width="99.4444%" height="15" fill="rgb(234,13,49)" fg:x="28" fg:w="15394"/><text x="0.4309%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.03%)</title><rect x="99.5995%" y="821" width="0.0258%" height="15" fill="rgb(234,122,0)" fg:x="15418" fg:w="4"/><text x="99.8495%" y="831.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.02%)</title><rect x="99.6059%" y="805" width="0.0194%" height="15" fill="rgb(207,146,38)" fg:x="15419" fg:w="3"/><text x="99.8559%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,396 samples, 99.46%)</title><rect x="0.1809%" y="853" width="99.4574%" height="15" fill="rgb(207,177,25)" fg:x="28" fg:w="15396"/><text x="0.4309%" y="863.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.01%)</title><rect x="99.6253%" y="837" width="0.0129%" height="15" fill="rgb(211,178,42)" fg:x="15422" fg:w="2"/><text x="99.8753%" y="847.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="99.6253%" y="821" width="0.0129%" height="15" fill="rgb(230,69,54)" fg:x="15422" fg:w="2"/><text x="99.8753%" y="831.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,397 samples, 99.46%)</title><rect x="0.1809%" y="869" width="99.4638%" height="15" fill="rgb(214,135,41)" fg:x="28" fg:w="15397"/><text x="0.4309%" y="879.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="99.8966%" y="853" width="0.0129%" height="15" fill="rgb(237,67,25)" fg:x="15464" fg:w="2"/><text x="100.1466%" y="863.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (44 samples, 0.28%)</title><rect x="99.6447%" y="869" width="0.2842%" height="15" fill="rgb(222,189,50)" fg:x="15425" fg:w="44"/><text x="99.8947%" y="879.50"></text></g><g><title>sudoku-solver`alloc::vec::from_elem (3 samples, 0.02%)</title><rect x="99.9096%" y="853" width="0.0194%" height="15" fill="rgb(245,148,34)" fg:x="15466" fg:w="3"/><text x="100.1596%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.9096%" y="837" width="0.0194%" height="15" fill="rgb(222,29,6)" fg:x="15466" fg:w="3"/><text x="100.1596%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.9160%" y="821" width="0.0129%" height="15" fill="rgb(221,189,43)" fg:x="15467" fg:w="2"/><text x="100.1660%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="99.9289%" y="821" width="0.0129%" height="15" fill="rgb(207,36,27)" fg:x="15469" fg:w="2"/><text x="100.1789%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.01%)</title><rect x="99.9419%" y="821" width="0.0129%" height="15" fill="rgb(217,90,24)" fg:x="15471" fg:w="2"/><text x="100.1919%" y="831.50"></text></g><g><title>all (15,480 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,66,35)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="991.50"></text></g><g><title>dyld`start (15,480 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(221,13,50)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="975.50">dyld`start</text></g><g><title>sudoku-solver`main (15,480 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(236,68,49)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="959.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (15,480 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(229,146,28)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="943.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (15,480 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(225,31,38)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="927.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (15,480 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="15480"/><text x="0.2500%" y="911.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (15,479 samples, 99.99%)</title><rect x="0.0065%" y="885" width="99.9935%" height="15" fill="rgb(246,54,23)" fg:x="1" fg:w="15479"/><text x="0.2565%" y="895.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (11 samples, 0.07%)</title><rect x="99.9289%" y="869" width="0.0711%" height="15" fill="rgb(243,76,11)" fg:x="15469" fg:w="11"/><text x="100.1789%" y="879.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (11 samples, 0.07%)</title><rect x="99.9289%" y="853" width="0.0711%" height="15" fill="rgb(245,21,50)" fg:x="15469" fg:w="11"/><text x="100.1789%" y="863.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (11 samples, 0.07%)</title><rect x="99.9289%" y="837" width="0.0711%" height="15" fill="rgb(228,9,43)" fg:x="15469" fg:w="11"/><text x="100.1789%" y="847.50"></text></g><g><title>sudoku-solver`core::fmt::write (7 samples, 0.05%)</title><rect x="99.9548%" y="821" width="0.0452%" height="15" fill="rgb(208,100,47)" fg:x="15473" fg:w="7"/><text x="100.2048%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.05%)</title><rect x="99.9548%" y="805" width="0.0452%" height="15" fill="rgb(232,26,8)" fg:x="15473" fg:w="7"/><text x="100.2048%" y="815.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.05%)</title><rect x="99.9548%" y="789" width="0.0452%" height="15" fill="rgb(216,166,38)" fg:x="15473" fg:w="7"/><text x="100.2048%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.05%)</title><rect x="99.9548%" y="773" width="0.0452%" height="15" fill="rgb(251,202,51)" fg:x="15473" fg:w="7"/><text x="100.2048%" y="783.50"></text></g></svg></svg>