<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="1460"><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="0.0000%" y="869" width="0.1370%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="0.1370%" y="869" width="0.0685%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3870%" y="879.50"></text></g><g><title>sudoku-solver`__rdl_dealloc (1 samples, 0.07%)</title><rect x="0.2055%" y="869" width="0.0685%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4555%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="0.3425%" y="853" width="0.1370%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="0.5925%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="0.4110%" y="837" width="0.0685%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.6610%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.07%)</title><rect x="0.4795%" y="853" width="0.0685%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.7295%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="0.5479%" y="853" width="0.0685%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.7979%" y="863.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.21%)</title><rect x="0.6164%" y="837" width="0.2055%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="3"/><text x="0.8664%" y="847.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.27%)</title><rect x="0.6164%" y="853" width="0.2740%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="4"/><text x="0.8664%" y="863.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="0.8219%" y="837" width="0.0685%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="1.0719%" y="847.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="0.8219%" y="821" width="0.0685%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="1"/><text x="1.0719%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.07%)</title><rect x="0.8219%" y="805" width="0.0685%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="1.0719%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.07%)</title><rect x="0.8219%" y="789" width="0.0685%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="1"/><text x="1.0719%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.07%)</title><rect x="0.8219%" y="773" width="0.0685%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="1.0719%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="0.8219%" y="757" width="0.0685%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="1.0719%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="0.8219%" y="741" width="0.0685%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="1"/><text x="1.0719%" y="751.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="0.8904%" y="853" width="0.0685%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="1.1404%" y="863.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (6 samples, 0.41%)</title><rect x="0.9589%" y="853" width="0.4110%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="6"/><text x="1.2089%" y="863.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (3 samples, 0.21%)</title><rect x="1.3699%" y="853" width="0.2055%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="3"/><text x="1.6199%" y="863.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.21%)</title><rect x="1.3699%" y="837" width="0.2055%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="3"/><text x="1.6199%" y="847.50"></text></g><g><title>sudoku-solver`core::fmt::write (3 samples, 0.21%)</title><rect x="1.3699%" y="821" width="0.2055%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="3"/><text x="1.6199%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="1.3699%" y="805" width="0.2055%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="3"/><text x="1.6199%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.21%)</title><rect x="1.3699%" y="789" width="0.2055%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="3"/><text x="1.6199%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="1.7123%" y="677" width="0.0685%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="1"/><text x="1.9623%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="1.8493%" y="645" width="0.0685%" height="15" fill="rgb(241,131,45)" fg:x="27" fg:w="1"/><text x="2.0993%" y="655.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="1.9178%" y="629" width="0.0685%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="1"/><text x="2.1678%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="1.9863%" y="597" width="0.0685%" height="15" fill="rgb(225,111,53)" fg:x="29" fg:w="1"/><text x="2.2363%" y="607.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="2.1233%" y="565" width="0.0685%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="1"/><text x="2.3733%" y="575.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="2.3288%" y="549" width="0.0685%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="1"/><text x="2.5788%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="2.4658%" y="533" width="0.0685%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="1"/><text x="2.7158%" y="543.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="2.6027%" y="517" width="0.0685%" height="15" fill="rgb(209,103,24)" fg:x="38" fg:w="1"/><text x="2.8527%" y="527.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="2.8082%" y="501" width="0.0685%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="1"/><text x="3.0582%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="3.0137%" y="485" width="0.0685%" height="15" fill="rgb(213,181,19)" fg:x="44" fg:w="1"/><text x="3.2637%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="3.0822%" y="485" width="0.0685%" height="15" fill="rgb(254,191,54)" fg:x="45" fg:w="1"/><text x="3.3322%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="3.1507%" y="485" width="0.0685%" height="15" fill="rgb(241,83,37)" fg:x="46" fg:w="1"/><text x="3.4007%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="3.2192%" y="485" width="0.0685%" height="15" fill="rgb(233,36,39)" fg:x="47" fg:w="1"/><text x="3.4692%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="3.3562%" y="469" width="0.0685%" height="15" fill="rgb(226,3,54)" fg:x="49" fg:w="1"/><text x="3.6062%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="3.4247%" y="469" width="0.0685%" height="15" fill="rgb(245,192,40)" fg:x="50" fg:w="1"/><text x="3.6747%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="3.6986%" y="453" width="0.0685%" height="15" fill="rgb(238,167,29)" fg:x="54" fg:w="1"/><text x="3.9486%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="4.1781%" y="437" width="0.0685%" height="15" fill="rgb(232,182,51)" fg:x="61" fg:w="1"/><text x="4.4281%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="4.2466%" y="437" width="0.0685%" height="15" fill="rgb(231,60,39)" fg:x="62" fg:w="1"/><text x="4.4966%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="4.4521%" y="421" width="0.0685%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="1"/><text x="4.7021%" y="431.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="4.6575%" y="405" width="0.0685%" height="15" fill="rgb(235,93,37)" fg:x="68" fg:w="1"/><text x="4.9075%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="4.9315%" y="389" width="0.0685%" height="15" fill="rgb(213,116,39)" fg:x="72" fg:w="1"/><text x="5.1815%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.14%)</title><rect x="5.1370%" y="373" width="0.1370%" height="15" fill="rgb(222,207,29)" fg:x="75" fg:w="2"/><text x="5.3870%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="5.2740%" y="373" width="0.0685%" height="15" fill="rgb(206,96,30)" fg:x="77" fg:w="1"/><text x="5.5240%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="5.4795%" y="357" width="0.0685%" height="15" fill="rgb(218,138,4)" fg:x="80" fg:w="1"/><text x="5.7295%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="5.6849%" y="341" width="0.0685%" height="15" fill="rgb(250,191,14)" fg:x="83" fg:w="1"/><text x="5.9349%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.07%)</title><rect x="6.2329%" y="101" width="0.0685%" height="15" fill="rgb(239,60,40)" fg:x="91" fg:w="1"/><text x="6.4829%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.07%)</title><rect x="6.2329%" y="85" width="0.0685%" height="15" fill="rgb(206,27,48)" fg:x="91" fg:w="1"/><text x="6.4829%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.07%)</title><rect x="6.2329%" y="69" width="0.0685%" height="15" fill="rgb(225,35,8)" fg:x="91" fg:w="1"/><text x="6.4829%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="6.2329%" y="53" width="0.0685%" height="15" fill="rgb(250,213,24)" fg:x="91" fg:w="1"/><text x="6.4829%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="6.2329%" y="37" width="0.0685%" height="15" fill="rgb(247,123,22)" fg:x="91" fg:w="1"/><text x="6.4829%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (4 samples, 0.27%)</title><rect x="6.1644%" y="117" width="0.2740%" height="15" fill="rgb(231,138,38)" fg:x="90" fg:w="4"/><text x="6.4144%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="6.3014%" y="101" width="0.1370%" height="15" fill="rgb(231,145,46)" fg:x="92" fg:w="2"/><text x="6.5514%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="6.3014%" y="85" width="0.1370%" height="15" fill="rgb(251,118,11)" fg:x="92" fg:w="2"/><text x="6.5514%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5 samples, 0.34%)</title><rect x="6.1644%" y="133" width="0.3425%" height="15" fill="rgb(217,147,25)" fg:x="90" fg:w="5"/><text x="6.4144%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="6.4384%" y="117" width="0.0685%" height="15" fill="rgb(247,81,37)" fg:x="94" fg:w="1"/><text x="6.6884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="6.4384%" y="101" width="0.0685%" height="15" fill="rgb(209,12,38)" fg:x="94" fg:w="1"/><text x="6.6884%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (8 samples, 0.55%)</title><rect x="6.1644%" y="149" width="0.5479%" height="15" fill="rgb(227,1,9)" fg:x="90" fg:w="8"/><text x="6.4144%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.21%)</title><rect x="6.5068%" y="133" width="0.2055%" height="15" fill="rgb(248,47,43)" fg:x="95" fg:w="3"/><text x="6.7568%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="6.5753%" y="117" width="0.1370%" height="15" fill="rgb(221,10,30)" fg:x="96" fg:w="2"/><text x="6.8253%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (10 samples, 0.68%)</title><rect x="6.1644%" y="165" width="0.6849%" height="15" fill="rgb(210,229,1)" fg:x="90" fg:w="10"/><text x="6.4144%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="6.7123%" y="149" width="0.1370%" height="15" fill="rgb(222,148,37)" fg:x="98" fg:w="2"/><text x="6.9623%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="6.7123%" y="133" width="0.1370%" height="15" fill="rgb(234,67,33)" fg:x="98" fg:w="2"/><text x="6.9623%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15 samples, 1.03%)</title><rect x="6.1644%" y="181" width="1.0274%" height="15" fill="rgb(247,98,35)" fg:x="90" fg:w="15"/><text x="6.4144%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.34%)</title><rect x="6.8493%" y="165" width="0.3425%" height="15" fill="rgb(247,138,52)" fg:x="100" fg:w="5"/><text x="7.0993%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.27%)</title><rect x="6.9178%" y="149" width="0.2740%" height="15" fill="rgb(213,79,30)" fg:x="101" fg:w="4"/><text x="7.1678%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (16 samples, 1.10%)</title><rect x="6.1644%" y="197" width="1.0959%" height="15" fill="rgb(246,177,23)" fg:x="90" fg:w="16"/><text x="6.4144%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="7.1918%" y="181" width="0.0685%" height="15" fill="rgb(230,62,27)" fg:x="105" fg:w="1"/><text x="7.4418%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="7.1918%" y="165" width="0.0685%" height="15" fill="rgb(216,154,8)" fg:x="105" fg:w="1"/><text x="7.4418%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (23 samples, 1.58%)</title><rect x="6.0959%" y="213" width="1.5753%" height="15" fill="rgb(244,35,45)" fg:x="89" fg:w="23"/><text x="6.3459%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.41%)</title><rect x="7.2603%" y="197" width="0.4110%" height="15" fill="rgb(251,115,12)" fg:x="106" fg:w="6"/><text x="7.5103%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (6 samples, 0.41%)</title><rect x="7.2603%" y="181" width="0.4110%" height="15" fill="rgb(240,54,50)" fg:x="106" fg:w="6"/><text x="7.5103%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="7.6712%" y="197" width="0.0685%" height="15" fill="rgb(233,84,52)" fg:x="112" fg:w="1"/><text x="7.9212%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="7.6712%" y="181" width="0.0685%" height="15" fill="rgb(207,117,47)" fg:x="112" fg:w="1"/><text x="7.9212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="7.6712%" y="165" width="0.0685%" height="15" fill="rgb(249,43,39)" fg:x="112" fg:w="1"/><text x="7.9212%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="7.6712%" y="149" width="0.0685%" height="15" fill="rgb(209,38,44)" fg:x="112" fg:w="1"/><text x="7.9212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="7.7397%" y="197" width="0.0685%" height="15" fill="rgb(236,212,23)" fg:x="113" fg:w="1"/><text x="7.9897%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (32 samples, 2.19%)</title><rect x="6.0959%" y="229" width="2.1918%" height="15" fill="rgb(242,79,21)" fg:x="89" fg:w="32"/><text x="6.3459%" y="239.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 0.62%)</title><rect x="7.6712%" y="213" width="0.6164%" height="15" fill="rgb(211,96,35)" fg:x="112" fg:w="9"/><text x="7.9212%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (7 samples, 0.48%)</title><rect x="7.8082%" y="197" width="0.4795%" height="15" fill="rgb(253,215,40)" fg:x="114" fg:w="7"/><text x="8.0582%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="8.2877%" y="213" width="0.0685%" height="15" fill="rgb(211,81,21)" fg:x="121" fg:w="1"/><text x="8.5377%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (44 samples, 3.01%)</title><rect x="5.9589%" y="245" width="3.0137%" height="15" fill="rgb(208,190,38)" fg:x="87" fg:w="44"/><text x="6.2089%" y="255.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.68%)</title><rect x="8.2877%" y="229" width="0.6849%" height="15" fill="rgb(235,213,38)" fg:x="121" fg:w="10"/><text x="8.5377%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="8.3562%" y="213" width="0.6164%" height="15" fill="rgb(237,122,38)" fg:x="122" fg:w="9"/><text x="8.6062%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (51 samples, 3.49%)</title><rect x="5.8219%" y="261" width="3.4932%" height="15" fill="rgb(244,218,35)" fg:x="85" fg:w="51"/><text x="6.0719%" y="271.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.34%)</title><rect x="8.9726%" y="245" width="0.3425%" height="15" fill="rgb(240,68,47)" fg:x="131" fg:w="5"/><text x="9.2226%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.27%)</title><rect x="9.0411%" y="229" width="0.2740%" height="15" fill="rgb(210,16,53)" fg:x="132" fg:w="4"/><text x="9.2911%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="9.3836%" y="245" width="0.0685%" height="15" fill="rgb(235,124,12)" fg:x="137" fg:w="1"/><text x="9.6336%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="9.3836%" y="229" width="0.0685%" height="15" fill="rgb(224,169,11)" fg:x="137" fg:w="1"/><text x="9.6336%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="9.3836%" y="213" width="0.0685%" height="15" fill="rgb(250,166,2)" fg:x="137" fg:w="1"/><text x="9.6336%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="9.4521%" y="245" width="0.0685%" height="15" fill="rgb(242,216,29)" fg:x="138" fg:w="1"/><text x="9.7021%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (66 samples, 4.52%)</title><rect x="5.7534%" y="277" width="4.5205%" height="15" fill="rgb(230,116,27)" fg:x="84" fg:w="66"/><text x="6.0034%" y="287.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.96%)</title><rect x="9.3151%" y="261" width="0.9589%" height="15" fill="rgb(228,99,48)" fg:x="136" fg:w="14"/><text x="9.5651%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (11 samples, 0.75%)</title><rect x="9.5205%" y="245" width="0.7534%" height="15" fill="rgb(253,11,6)" fg:x="139" fg:w="11"/><text x="9.7705%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="10.4110%" y="261" width="0.0685%" height="15" fill="rgb(247,143,39)" fg:x="152" fg:w="1"/><text x="10.6610%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (78 samples, 5.34%)</title><rect x="5.7534%" y="293" width="5.3425%" height="15" fill="rgb(236,97,10)" fg:x="84" fg:w="78"/><text x="6.0034%" y="303.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (12 samples, 0.82%)</title><rect x="10.2740%" y="277" width="0.8219%" height="15" fill="rgb(233,208,19)" fg:x="150" fg:w="12"/><text x="10.5240%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="10.4795%" y="261" width="0.6164%" height="15" fill="rgb(216,164,2)" fg:x="153" fg:w="9"/><text x="10.7295%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="11.1644%" y="277" width="0.0685%" height="15" fill="rgb(220,129,5)" fg:x="163" fg:w="1"/><text x="11.4144%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (90 samples, 6.16%)</title><rect x="5.7534%" y="309" width="6.1644%" height="15" fill="rgb(242,17,10)" fg:x="84" fg:w="90"/><text x="6.0034%" y="319.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (12 samples, 0.82%)</title><rect x="11.0959%" y="293" width="0.8219%" height="15" fill="rgb(242,107,0)" fg:x="162" fg:w="12"/><text x="11.3459%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (10 samples, 0.68%)</title><rect x="11.2329%" y="277" width="0.6849%" height="15" fill="rgb(251,28,31)" fg:x="164" fg:w="10"/><text x="11.4829%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="11.9863%" y="293" width="0.0685%" height="15" fill="rgb(233,223,10)" fg:x="175" fg:w="1"/><text x="12.2363%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (105 samples, 7.19%)</title><rect x="5.7534%" y="325" width="7.1918%" height="15" fill="rgb(215,21,27)" fg:x="84" fg:w="105"/><text x="6.0034%" y="335.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (15 samples, 1.03%)</title><rect x="11.9178%" y="309" width="1.0274%" height="15" fill="rgb(232,23,21)" fg:x="174" fg:w="15"/><text x="12.1678%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (13 samples, 0.89%)</title><rect x="12.0548%" y="293" width="0.8904%" height="15" fill="rgb(244,5,23)" fg:x="176" fg:w="13"/><text x="12.3048%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="12.9452%" y="309" width="0.0685%" height="15" fill="rgb(226,81,46)" fg:x="189" fg:w="1"/><text x="13.1952%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (138 samples, 9.45%)</title><rect x="5.7534%" y="341" width="9.4521%" height="15" fill="rgb(247,70,30)" fg:x="84" fg:w="138"/><text x="6.0034%" y="351.50">sudoku-solver`..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (33 samples, 2.26%)</title><rect x="12.9452%" y="325" width="2.2603%" height="15" fill="rgb(212,68,19)" fg:x="189" fg:w="33"/><text x="13.1952%" y="335.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (32 samples, 2.19%)</title><rect x="13.0137%" y="309" width="2.1918%" height="15" fill="rgb(240,187,13)" fg:x="190" fg:w="32"/><text x="13.2637%" y="319.50">s..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="15.4795%" y="325" width="0.2055%" height="15" fill="rgb(223,113,26)" fg:x="226" fg:w="3"/><text x="15.7295%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="15.6164%" y="309" width="0.0685%" height="15" fill="rgb(206,192,2)" fg:x="228" fg:w="1"/><text x="15.8664%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="15.6164%" y="293" width="0.0685%" height="15" fill="rgb(241,108,4)" fg:x="228" fg:w="1"/><text x="15.8664%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="15.6849%" y="325" width="0.0685%" height="15" fill="rgb(247,173,49)" fg:x="229" fg:w="1"/><text x="15.9349%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (194 samples, 13.29%)</title><rect x="5.5479%" y="357" width="13.2877%" height="15" fill="rgb(224,114,35)" fg:x="81" fg:w="194"/><text x="5.7979%" y="367.50">sudoku-solver`sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (53 samples, 3.63%)</title><rect x="15.2055%" y="341" width="3.6301%" height="15" fill="rgb(245,159,27)" fg:x="222" fg:w="53"/><text x="15.4555%" y="351.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (45 samples, 3.08%)</title><rect x="15.7534%" y="325" width="3.0822%" height="15" fill="rgb(245,172,44)" fg:x="230" fg:w="45"/><text x="16.0034%" y="335.50">sud..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="19.1096%" y="341" width="0.2055%" height="15" fill="rgb(236,23,11)" fg:x="279" fg:w="3"/><text x="19.3596%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="19.1781%" y="325" width="0.1370%" height="15" fill="rgb(205,117,38)" fg:x="280" fg:w="2"/><text x="19.4281%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="19.3151%" y="341" width="0.0685%" height="15" fill="rgb(237,72,25)" fg:x="282" fg:w="1"/><text x="19.5651%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (261 samples, 17.88%)</title><rect x="5.3425%" y="373" width="17.8767%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="261"/><text x="5.5925%" y="383.50">sudoku-solver`sudoku_solver:..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (64 samples, 4.38%)</title><rect x="18.8356%" y="357" width="4.3836%" height="15" fill="rgb(217,125,39)" fg:x="275" fg:w="64"/><text x="19.0856%" y="367.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (56 samples, 3.84%)</title><rect x="19.3836%" y="341" width="3.8356%" height="15" fill="rgb(235,36,10)" fg:x="283" fg:w="56"/><text x="19.6336%" y="351.50">sudo..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.34%)</title><rect x="23.4932%" y="357" width="0.3425%" height="15" fill="rgb(251,123,47)" fg:x="343" fg:w="5"/><text x="23.7432%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="23.6301%" y="341" width="0.2055%" height="15" fill="rgb(221,13,13)" fg:x="345" fg:w="3"/><text x="23.8801%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="23.6986%" y="325" width="0.1370%" height="15" fill="rgb(238,131,9)" fg:x="346" fg:w="2"/><text x="23.9486%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.27%)</title><rect x="23.8356%" y="357" width="0.2740%" height="15" fill="rgb(211,50,8)" fg:x="348" fg:w="4"/><text x="24.0856%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.21%)</title><rect x="23.9041%" y="341" width="0.2055%" height="15" fill="rgb(245,182,24)" fg:x="349" fg:w="3"/><text x="24.1541%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="24.1096%" y="357" width="0.0685%" height="15" fill="rgb(242,14,37)" fg:x="352" fg:w="1"/><text x="24.3596%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (366 samples, 25.07%)</title><rect x="5.0000%" y="389" width="25.0685%" height="15" fill="rgb(246,228,12)" fg:x="73" fg:w="366"/><text x="5.2500%" y="399.50">sudoku-solver`sudoku_solver::backtraking..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (100 samples, 6.85%)</title><rect x="23.2192%" y="373" width="6.8493%" height="15" fill="rgb(213,55,15)" fg:x="339" fg:w="100"/><text x="23.4692%" y="383.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (86 samples, 5.89%)</title><rect x="24.1781%" y="357" width="5.8904%" height="15" fill="rgb(209,9,3)" fg:x="353" fg:w="86"/><text x="24.4281%" y="367.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.41%)</title><rect x="30.2740%" y="373" width="0.4110%" height="15" fill="rgb(230,59,30)" fg:x="442" fg:w="6"/><text x="30.5240%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.34%)</title><rect x="30.3425%" y="357" width="0.3425%" height="15" fill="rgb(209,121,21)" fg:x="443" fg:w="5"/><text x="30.5925%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.34%)</title><rect x="30.3425%" y="341" width="0.3425%" height="15" fill="rgb(220,109,13)" fg:x="443" fg:w="5"/><text x="30.5925%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.14%)</title><rect x="30.5479%" y="325" width="0.1370%" height="15" fill="rgb(232,18,1)" fg:x="446" fg:w="2"/><text x="30.7979%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.14%)</title><rect x="30.6849%" y="373" width="0.1370%" height="15" fill="rgb(215,41,42)" fg:x="448" fg:w="2"/><text x="30.9349%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (450 samples, 30.82%)</title><rect x="4.7260%" y="405" width="30.8219%" height="15" fill="rgb(224,123,36)" fg:x="69" fg:w="450"/><text x="4.9760%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtrak..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (80 samples, 5.48%)</title><rect x="30.0685%" y="389" width="5.4795%" height="15" fill="rgb(240,125,3)" fg:x="439" fg:w="80"/><text x="30.3185%" y="399.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (69 samples, 4.73%)</title><rect x="30.8219%" y="373" width="4.7260%" height="15" fill="rgb(205,98,50)" fg:x="450" fg:w="69"/><text x="31.0719%" y="383.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="35.5479%" y="389" width="0.2055%" height="15" fill="rgb(205,185,37)" fg:x="519" fg:w="3"/><text x="35.7979%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="35.6164%" y="373" width="0.1370%" height="15" fill="rgb(238,207,15)" fg:x="520" fg:w="2"/><text x="35.8664%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="35.6164%" y="357" width="0.1370%" height="15" fill="rgb(213,199,42)" fg:x="520" fg:w="2"/><text x="35.8664%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.27%)</title><rect x="35.7534%" y="389" width="0.2740%" height="15" fill="rgb(235,201,11)" fg:x="522" fg:w="4"/><text x="36.0034%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="35.8904%" y="373" width="0.1370%" height="15" fill="rgb(207,46,11)" fg:x="524" fg:w="2"/><text x="36.1404%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (523 samples, 35.82%)</title><rect x="4.5205%" y="421" width="35.8219%" height="15" fill="rgb(241,35,35)" fg:x="66" fg:w="523"/><text x="4.7705%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recu..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (70 samples, 4.79%)</title><rect x="35.5479%" y="405" width="4.7945%" height="15" fill="rgb(243,32,47)" fg:x="519" fg:w="70"/><text x="35.7979%" y="415.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (63 samples, 4.32%)</title><rect x="36.0274%" y="389" width="4.3151%" height="15" fill="rgb(247,202,23)" fg:x="526" fg:w="63"/><text x="36.2774%" y="399.50">sudok..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.27%)</title><rect x="40.4795%" y="405" width="0.2740%" height="15" fill="rgb(219,102,11)" fg:x="591" fg:w="4"/><text x="40.7295%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.27%)</title><rect x="40.4795%" y="389" width="0.2740%" height="15" fill="rgb(243,110,44)" fg:x="591" fg:w="4"/><text x="40.7295%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.21%)</title><rect x="40.5479%" y="373" width="0.2055%" height="15" fill="rgb(222,74,54)" fg:x="592" fg:w="3"/><text x="40.7979%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="40.7534%" y="405" width="0.0685%" height="15" fill="rgb(216,99,12)" fg:x="595" fg:w="1"/><text x="41.0034%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (611 samples, 41.85%)</title><rect x="4.3151%" y="437" width="41.8493%" height="15" fill="rgb(226,22,26)" fg:x="63" fg:w="611"/><text x="4.5651%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (85 samples, 5.82%)</title><rect x="40.3425%" y="421" width="5.8219%" height="15" fill="rgb(217,163,10)" fg:x="589" fg:w="85"/><text x="40.5925%" y="431.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (78 samples, 5.34%)</title><rect x="40.8219%" y="405" width="5.3425%" height="15" fill="rgb(213,25,53)" fg:x="596" fg:w="78"/><text x="41.0719%" y="415.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.27%)</title><rect x="46.3699%" y="421" width="0.2740%" height="15" fill="rgb(252,105,26)" fg:x="677" fg:w="4"/><text x="46.6199%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.27%)</title><rect x="46.3699%" y="405" width="0.2740%" height="15" fill="rgb(220,39,43)" fg:x="677" fg:w="4"/><text x="46.6199%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.27%)</title><rect x="46.3699%" y="389" width="0.2740%" height="15" fill="rgb(229,68,48)" fg:x="677" fg:w="4"/><text x="46.6199%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="46.5753%" y="373" width="0.0685%" height="15" fill="rgb(252,8,32)" fg:x="680" fg:w="1"/><text x="46.8253%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="46.6438%" y="421" width="0.2055%" height="15" fill="rgb(223,20,43)" fg:x="681" fg:w="3"/><text x="46.8938%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="46.7123%" y="405" width="0.1370%" height="15" fill="rgb(229,81,49)" fg:x="682" fg:w="2"/><text x="46.9623%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="46.8493%" y="421" width="0.0685%" height="15" fill="rgb(236,28,36)" fg:x="684" fg:w="1"/><text x="47.0993%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="46.9178%" y="421" width="0.0685%" height="15" fill="rgb(249,185,26)" fg:x="685" fg:w="1"/><text x="47.1678%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (747 samples, 51.16%)</title><rect x="3.7671%" y="453" width="51.1644%" height="15" fill="rgb(249,174,33)" fg:x="55" fg:w="747"/><text x="4.0171%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (128 samples, 8.77%)</title><rect x="46.1644%" y="437" width="8.7671%" height="15" fill="rgb(233,201,37)" fg:x="674" fg:w="128"/><text x="46.4144%" y="447.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (116 samples, 7.95%)</title><rect x="46.9863%" y="421" width="7.9452%" height="15" fill="rgb(221,78,26)" fg:x="686" fg:w="116"/><text x="47.2363%" y="431.50">sudoku-solv..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="55.6849%" y="405" width="0.0685%" height="15" fill="rgb(250,127,30)" fg:x="813" fg:w="1"/><text x="55.9349%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.34%)</title><rect x="55.5479%" y="437" width="0.3425%" height="15" fill="rgb(230,49,44)" fg:x="811" fg:w="5"/><text x="55.7979%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="55.6849%" y="421" width="0.2055%" height="15" fill="rgb(229,67,23)" fg:x="813" fg:w="3"/><text x="55.9349%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.14%)</title><rect x="55.7534%" y="405" width="0.1370%" height="15" fill="rgb(249,83,47)" fg:x="814" fg:w="2"/><text x="56.0034%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="55.8904%" y="437" width="0.1370%" height="15" fill="rgb(215,43,3)" fg:x="816" fg:w="2"/><text x="56.1404%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="55.9589%" y="421" width="0.0685%" height="15" fill="rgb(238,154,13)" fg:x="817" fg:w="1"/><text x="56.2089%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.14%)</title><rect x="56.0274%" y="437" width="0.1370%" height="15" fill="rgb(219,56,2)" fg:x="818" fg:w="2"/><text x="56.2774%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="56.1644%" y="437" width="0.0685%" height="15" fill="rgb(233,0,4)" fg:x="820" fg:w="1"/><text x="56.4144%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (852 samples, 58.36%)</title><rect x="3.4932%" y="469" width="58.3562%" height="15" fill="rgb(235,30,7)" fg:x="51" fg:w="852"/><text x="3.7432%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (101 samples, 6.92%)</title><rect x="54.9315%" y="453" width="6.9178%" height="15" fill="rgb(250,79,13)" fg:x="802" fg:w="101"/><text x="55.1815%" y="463.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (82 samples, 5.62%)</title><rect x="56.2329%" y="437" width="5.6164%" height="15" fill="rgb(211,146,34)" fg:x="821" fg:w="82"/><text x="56.4829%" y="447.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="62.2603%" y="453" width="0.1370%" height="15" fill="rgb(228,22,38)" fg:x="909" fg:w="2"/><text x="62.5103%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="62.3288%" y="437" width="0.0685%" height="15" fill="rgb(235,168,5)" fg:x="910" fg:w="1"/><text x="62.5788%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.27%)</title><rect x="62.3973%" y="453" width="0.2740%" height="15" fill="rgb(221,155,16)" fg:x="911" fg:w="4"/><text x="62.6473%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="62.6027%" y="437" width="0.0685%" height="15" fill="rgb(215,215,53)" fg:x="914" fg:w="1"/><text x="62.8527%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.27%)</title><rect x="62.6712%" y="453" width="0.2740%" height="15" fill="rgb(223,4,10)" fg:x="915" fg:w="4"/><text x="62.9212%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (954 samples, 65.34%)</title><rect x="3.2877%" y="485" width="65.3425%" height="15" fill="rgb(234,103,6)" fg:x="48" fg:w="954"/><text x="3.5377%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (99 samples, 6.78%)</title><rect x="61.8493%" y="469" width="6.7808%" height="15" fill="rgb(227,97,0)" fg:x="903" fg:w="99"/><text x="62.0993%" y="479.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (83 samples, 5.68%)</title><rect x="62.9452%" y="453" width="5.6849%" height="15" fill="rgb(234,150,53)" fg:x="919" fg:w="83"/><text x="63.1952%" y="463.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.27%)</title><rect x="68.7671%" y="469" width="0.2740%" height="15" fill="rgb(228,201,54)" fg:x="1004" fg:w="4"/><text x="69.0171%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="68.9726%" y="453" width="0.0685%" height="15" fill="rgb(222,22,37)" fg:x="1007" fg:w="1"/><text x="69.2226%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="68.9726%" y="437" width="0.0685%" height="15" fill="rgb(237,53,32)" fg:x="1007" fg:w="1"/><text x="69.2226%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.27%)</title><rect x="69.0411%" y="469" width="0.2740%" height="15" fill="rgb(233,25,53)" fg:x="1008" fg:w="4"/><text x="69.2911%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="69.3151%" y="469" width="0.0685%" height="15" fill="rgb(210,40,34)" fg:x="1012" fg:w="1"/><text x="69.5651%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,038 samples, 71.10%)</title><rect x="2.8767%" y="501" width="71.0959%" height="15" fill="rgb(241,220,44)" fg:x="42" fg:w="1038"/><text x="3.1267%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (78 samples, 5.34%)</title><rect x="68.6301%" y="485" width="5.3425%" height="15" fill="rgb(235,28,35)" fg:x="1002" fg:w="78"/><text x="68.8801%" y="495.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (67 samples, 4.59%)</title><rect x="69.3836%" y="469" width="4.5890%" height="15" fill="rgb(210,56,17)" fg:x="1013" fg:w="67"/><text x="69.6336%" y="479.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="74.3836%" y="469" width="0.0685%" height="15" fill="rgb(224,130,29)" fg:x="1086" fg:w="1"/><text x="74.6336%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="74.4521%" y="453" width="0.0685%" height="15" fill="rgb(235,212,8)" fg:x="1087" fg:w="1"/><text x="74.7021%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="74.4521%" y="437" width="0.0685%" height="15" fill="rgb(223,33,50)" fg:x="1087" fg:w="1"/><text x="74.7021%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.27%)</title><rect x="74.3151%" y="485" width="0.2740%" height="15" fill="rgb(219,149,13)" fg:x="1085" fg:w="4"/><text x="74.5651%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="74.4521%" y="469" width="0.1370%" height="15" fill="rgb(250,156,29)" fg:x="1087" fg:w="2"/><text x="74.7021%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="74.5205%" y="453" width="0.0685%" height="15" fill="rgb(216,193,19)" fg:x="1088" fg:w="1"/><text x="74.7705%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="74.5890%" y="485" width="0.0685%" height="15" fill="rgb(216,135,14)" fg:x="1089" fg:w="1"/><text x="74.8390%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,110 samples, 76.03%)</title><rect x="2.6712%" y="517" width="76.0274%" height="15" fill="rgb(241,47,5)" fg:x="39" fg:w="1110"/><text x="2.9212%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (69 samples, 4.73%)</title><rect x="73.9726%" y="501" width="4.7260%" height="15" fill="rgb(233,42,35)" fg:x="1080" fg:w="69"/><text x="74.2226%" y="511.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (59 samples, 4.04%)</title><rect x="74.6575%" y="485" width="4.0411%" height="15" fill="rgb(231,13,6)" fg:x="1090" fg:w="59"/><text x="74.9075%" y="495.50">sudo..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="78.9041%" y="501" width="0.0685%" height="15" fill="rgb(207,181,40)" fg:x="1152" fg:w="1"/><text x="79.1541%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="78.9041%" y="485" width="0.0685%" height="15" fill="rgb(254,173,49)" fg:x="1152" fg:w="1"/><text x="79.1541%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.14%)</title><rect x="78.9726%" y="501" width="0.1370%" height="15" fill="rgb(221,1,38)" fg:x="1153" fg:w="2"/><text x="79.2226%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="79.1096%" y="501" width="0.1370%" height="15" fill="rgb(206,124,46)" fg:x="1155" fg:w="2"/><text x="79.3596%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="79.2466%" y="501" width="0.0685%" height="15" fill="rgb(249,21,11)" fg:x="1157" fg:w="1"/><text x="79.4966%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,147 samples, 78.56%)</title><rect x="2.5342%" y="533" width="78.5616%" height="15" fill="rgb(222,201,40)" fg:x="37" fg:w="1147"/><text x="2.7842%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (35 samples, 2.40%)</title><rect x="78.6986%" y="517" width="2.3973%" height="15" fill="rgb(235,61,29)" fg:x="1149" fg:w="35"/><text x="78.9486%" y="527.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (26 samples, 1.78%)</title><rect x="79.3151%" y="501" width="1.7808%" height="15" fill="rgb(219,207,3)" fg:x="1158" fg:w="26"/><text x="79.5651%" y="511.50">s..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="81.0959%" y="517" width="0.0685%" height="15" fill="rgb(222,56,46)" fg:x="1184" fg:w="1"/><text x="81.3459%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,170 samples, 80.14%)</title><rect x="2.3973%" y="549" width="80.1370%" height="15" fill="rgb(239,76,54)" fg:x="35" fg:w="1170"/><text x="2.6473%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (21 samples, 1.44%)</title><rect x="81.0959%" y="533" width="1.4384%" height="15" fill="rgb(231,124,27)" fg:x="1184" fg:w="21"/><text x="81.3459%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (20 samples, 1.37%)</title><rect x="81.1644%" y="517" width="1.3699%" height="15" fill="rgb(249,195,6)" fg:x="1185" fg:w="20"/><text x="81.4144%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="82.7397%" y="533" width="0.2055%" height="15" fill="rgb(237,174,47)" fg:x="1208" fg:w="3"/><text x="82.9897%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="82.8082%" y="517" width="0.1370%" height="15" fill="rgb(206,201,31)" fg:x="1209" fg:w="2"/><text x="83.0582%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="82.8767%" y="501" width="0.0685%" height="15" fill="rgb(231,57,52)" fg:x="1210" fg:w="1"/><text x="83.1267%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="82.9452%" y="533" width="0.0685%" height="15" fill="rgb(248,177,22)" fg:x="1211" fg:w="1"/><text x="83.1952%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="82.9452%" y="517" width="0.0685%" height="15" fill="rgb(215,211,37)" fg:x="1211" fg:w="1"/><text x="83.1952%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,195 samples, 81.85%)</title><rect x="2.1918%" y="565" width="81.8493%" height="15" fill="rgb(241,128,51)" fg:x="32" fg:w="1195"/><text x="2.4418%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 1.51%)</title><rect x="82.5342%" y="549" width="1.5068%" height="15" fill="rgb(227,165,31)" fg:x="1205" fg:w="22"/><text x="82.7842%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (15 samples, 1.03%)</title><rect x="83.0137%" y="533" width="1.0274%" height="15" fill="rgb(228,167,24)" fg:x="1212" fg:w="15"/><text x="83.2637%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="84.0411%" y="549" width="0.0685%" height="15" fill="rgb(228,143,12)" fg:x="1227" fg:w="1"/><text x="84.2911%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="84.0411%" y="533" width="0.0685%" height="15" fill="rgb(249,149,8)" fg:x="1227" fg:w="1"/><text x="84.2911%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="84.1096%" y="549" width="0.1370%" height="15" fill="rgb(243,35,44)" fg:x="1228" fg:w="2"/><text x="84.3596%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,213 samples, 83.08%)</title><rect x="2.0548%" y="581" width="83.0822%" height="15" fill="rgb(246,89,9)" fg:x="30" fg:w="1213"/><text x="2.3048%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (16 samples, 1.10%)</title><rect x="84.0411%" y="565" width="1.0959%" height="15" fill="rgb(233,213,13)" fg:x="1227" fg:w="16"/><text x="84.2911%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (13 samples, 0.89%)</title><rect x="84.2466%" y="549" width="0.8904%" height="15" fill="rgb(233,141,41)" fg:x="1230" fg:w="13"/><text x="84.4966%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="85.1370%" y="565" width="0.0685%" height="15" fill="rgb(239,167,4)" fg:x="1243" fg:w="1"/><text x="85.3870%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="85.2055%" y="565" width="0.0685%" height="15" fill="rgb(209,217,16)" fg:x="1244" fg:w="1"/><text x="85.4555%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,231 samples, 84.32%)</title><rect x="2.0548%" y="597" width="84.3151%" height="15" fill="rgb(219,88,35)" fg:x="30" fg:w="1231"/><text x="2.3048%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 1.23%)</title><rect x="85.1370%" y="581" width="1.2329%" height="15" fill="rgb(220,193,23)" fg:x="1243" fg:w="18"/><text x="85.3870%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (16 samples, 1.10%)</title><rect x="85.2740%" y="565" width="1.0959%" height="15" fill="rgb(230,90,52)" fg:x="1245" fg:w="16"/><text x="85.5240%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="86.4384%" y="581" width="0.0685%" height="15" fill="rgb(252,106,19)" fg:x="1262" fg:w="1"/><text x="86.6884%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="86.5068%" y="581" width="0.1370%" height="15" fill="rgb(206,74,20)" fg:x="1263" fg:w="2"/><text x="86.7568%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="86.5753%" y="565" width="0.0685%" height="15" fill="rgb(230,138,44)" fg:x="1264" fg:w="1"/><text x="86.8253%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="86.6438%" y="581" width="0.0685%" height="15" fill="rgb(235,182,43)" fg:x="1265" fg:w="1"/><text x="86.8938%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,246 samples, 85.34%)</title><rect x="1.9863%" y="613" width="85.3425%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="1246"/><text x="2.2363%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.96%)</title><rect x="86.3699%" y="597" width="0.9589%" height="15" fill="rgb(248,9,4)" fg:x="1261" fg:w="14"/><text x="86.6199%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="86.7123%" y="581" width="0.6164%" height="15" fill="rgb(210,31,22)" fg:x="1266" fg:w="9"/><text x="86.9623%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="87.3288%" y="597" width="0.0685%" height="15" fill="rgb(239,54,39)" fg:x="1275" fg:w="1"/><text x="87.5788%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.14%)</title><rect x="87.3973%" y="597" width="0.1370%" height="15" fill="rgb(230,99,41)" fg:x="1276" fg:w="2"/><text x="87.6473%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,264 samples, 86.58%)</title><rect x="1.9863%" y="629" width="86.5753%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="1264"/><text x="2.2363%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 1.23%)</title><rect x="87.3288%" y="613" width="1.2329%" height="15" fill="rgb(213,46,41)" fg:x="1275" fg:w="18"/><text x="87.5788%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (15 samples, 1.03%)</title><rect x="87.5342%" y="597" width="1.0274%" height="15" fill="rgb(215,133,35)" fg:x="1278" fg:w="15"/><text x="87.7842%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="88.6301%" y="613" width="0.0685%" height="15" fill="rgb(213,28,5)" fg:x="1294" fg:w="1"/><text x="88.8801%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="88.6301%" y="597" width="0.0685%" height="15" fill="rgb(215,77,49)" fg:x="1294" fg:w="1"/><text x="88.8801%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="88.6301%" y="581" width="0.0685%" height="15" fill="rgb(248,100,22)" fg:x="1294" fg:w="1"/><text x="88.8801%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,284 samples, 87.95%)</title><rect x="1.9178%" y="645" width="87.9452%" height="15" fill="rgb(208,67,9)" fg:x="28" fg:w="1284"/><text x="2.1678%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (19 samples, 1.30%)</title><rect x="88.5616%" y="629" width="1.3014%" height="15" fill="rgb(219,133,21)" fg:x="1293" fg:w="19"/><text x="88.8116%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (17 samples, 1.16%)</title><rect x="88.6986%" y="613" width="1.1644%" height="15" fill="rgb(246,46,29)" fg:x="1295" fg:w="17"/><text x="88.9486%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="89.8630%" y="629" width="0.0685%" height="15" fill="rgb(246,185,52)" fg:x="1312" fg:w="1"/><text x="90.1130%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="89.9315%" y="629" width="0.0685%" height="15" fill="rgb(252,136,11)" fg:x="1313" fg:w="1"/><text x="90.1815%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,300 samples, 89.04%)</title><rect x="1.7808%" y="661" width="89.0411%" height="15" fill="rgb(219,138,53)" fg:x="26" fg:w="1300"/><text x="2.0308%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.96%)</title><rect x="89.8630%" y="645" width="0.9589%" height="15" fill="rgb(211,51,23)" fg:x="1312" fg:w="14"/><text x="90.1130%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.82%)</title><rect x="90.0000%" y="629" width="0.8219%" height="15" fill="rgb(247,221,28)" fg:x="1314" fg:w="12"/><text x="90.2500%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="90.8219%" y="645" width="0.1370%" height="15" fill="rgb(251,222,45)" fg:x="1326" fg:w="2"/><text x="91.0719%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="90.8219%" y="629" width="0.1370%" height="15" fill="rgb(217,162,53)" fg:x="1326" fg:w="2"/><text x="91.0719%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="90.8904%" y="613" width="0.0685%" height="15" fill="rgb(229,93,14)" fg:x="1327" fg:w="1"/><text x="91.1404%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="90.9589%" y="645" width="0.2055%" height="15" fill="rgb(209,67,49)" fg:x="1328" fg:w="3"/><text x="91.2089%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="91.0274%" y="629" width="0.1370%" height="15" fill="rgb(213,87,29)" fg:x="1329" fg:w="2"/><text x="91.2774%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,319 samples, 90.34%)</title><rect x="1.7808%" y="677" width="90.3425%" height="15" fill="rgb(205,151,52)" fg:x="26" fg:w="1319"/><text x="2.0308%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (19 samples, 1.30%)</title><rect x="90.8219%" y="661" width="1.3014%" height="15" fill="rgb(253,215,39)" fg:x="1326" fg:w="19"/><text x="91.0719%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (14 samples, 0.96%)</title><rect x="91.1644%" y="645" width="0.9589%" height="15" fill="rgb(221,220,41)" fg:x="1331" fg:w="14"/><text x="91.4144%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="92.1918%" y="661" width="0.1370%" height="15" fill="rgb(218,133,21)" fg:x="1346" fg:w="2"/><text x="92.4418%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="92.2603%" y="645" width="0.0685%" height="15" fill="rgb(221,193,43)" fg:x="1347" fg:w="1"/><text x="92.5103%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="92.3288%" y="661" width="0.0685%" height="15" fill="rgb(240,128,52)" fg:x="1348" fg:w="1"/><text x="92.5788%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,335 samples, 91.44%)</title><rect x="1.6438%" y="693" width="91.4384%" height="15" fill="rgb(253,114,12)" fg:x="24" fg:w="1335"/><text x="1.8938%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.96%)</title><rect x="92.1233%" y="677" width="0.9589%" height="15" fill="rgb(215,223,47)" fg:x="1345" fg:w="14"/><text x="92.3733%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (10 samples, 0.68%)</title><rect x="92.3973%" y="661" width="0.6849%" height="15" fill="rgb(248,225,23)" fg:x="1349" fg:w="10"/><text x="92.6473%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="93.0822%" y="677" width="0.0685%" height="15" fill="rgb(250,108,0)" fg:x="1359" fg:w="1"/><text x="93.3322%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,348 samples, 92.33%)</title><rect x="1.6438%" y="709" width="92.3288%" height="15" fill="rgb(228,208,7)" fg:x="24" fg:w="1348"/><text x="1.8938%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (13 samples, 0.89%)</title><rect x="93.0822%" y="693" width="0.8904%" height="15" fill="rgb(244,45,10)" fg:x="1359" fg:w="13"/><text x="93.3322%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.82%)</title><rect x="93.1507%" y="677" width="0.8219%" height="15" fill="rgb(207,125,25)" fg:x="1360" fg:w="12"/><text x="93.4007%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="94.1096%" y="693" width="0.1370%" height="15" fill="rgb(210,195,18)" fg:x="1374" fg:w="2"/><text x="94.3596%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="94.1781%" y="677" width="0.0685%" height="15" fill="rgb(249,80,12)" fg:x="1375" fg:w="1"/><text x="94.4281%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="94.1781%" y="661" width="0.0685%" height="15" fill="rgb(221,65,9)" fg:x="1375" fg:w="1"/><text x="94.4281%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,358 samples, 93.01%)</title><rect x="1.6438%" y="725" width="93.0137%" height="15" fill="rgb(235,49,36)" fg:x="24" fg:w="1358"/><text x="1.8938%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.68%)</title><rect x="93.9726%" y="709" width="0.6849%" height="15" fill="rgb(225,32,20)" fg:x="1372" fg:w="10"/><text x="94.2226%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (6 samples, 0.41%)</title><rect x="94.2466%" y="693" width="0.4110%" height="15" fill="rgb(215,141,46)" fg:x="1376" fg:w="6"/><text x="94.4966%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="94.7260%" y="709" width="0.0685%" height="15" fill="rgb(250,160,47)" fg:x="1383" fg:w="1"/><text x="94.9760%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,364 samples, 93.42%)</title><rect x="1.6438%" y="741" width="93.4247%" height="15" fill="rgb(216,222,40)" fg:x="24" fg:w="1364"/><text x="1.8938%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.41%)</title><rect x="94.6575%" y="725" width="0.4110%" height="15" fill="rgb(234,217,39)" fg:x="1382" fg:w="6"/><text x="94.9075%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.27%)</title><rect x="94.7945%" y="709" width="0.2740%" height="15" fill="rgb(207,178,40)" fg:x="1384" fg:w="4"/><text x="95.0445%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="95.0685%" y="725" width="0.0685%" height="15" fill="rgb(221,136,13)" fg:x="1388" fg:w="1"/><text x="95.3185%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="95.0685%" y="709" width="0.0685%" height="15" fill="rgb(249,199,10)" fg:x="1388" fg:w="1"/><text x="95.3185%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,369 samples, 93.77%)</title><rect x="1.6438%" y="757" width="93.7671%" height="15" fill="rgb(249,222,13)" fg:x="24" fg:w="1369"/><text x="1.8938%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.34%)</title><rect x="95.0685%" y="741" width="0.3425%" height="15" fill="rgb(244,185,38)" fg:x="1388" fg:w="5"/><text x="95.3185%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.27%)</title><rect x="95.1370%" y="725" width="0.2740%" height="15" fill="rgb(236,202,9)" fg:x="1389" fg:w="4"/><text x="95.3870%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,373 samples, 94.04%)</title><rect x="1.6438%" y="773" width="94.0411%" height="15" fill="rgb(250,229,37)" fg:x="24" fg:w="1373"/><text x="1.8938%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.27%)</title><rect x="95.4110%" y="757" width="0.2740%" height="15" fill="rgb(206,174,23)" fg:x="1393" fg:w="4"/><text x="95.6610%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.27%)</title><rect x="95.4110%" y="741" width="0.2740%" height="15" fill="rgb(211,33,43)" fg:x="1393" fg:w="4"/><text x="95.6610%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,375 samples, 94.18%)</title><rect x="1.5753%" y="805" width="94.1781%" height="15" fill="rgb(245,58,50)" fg:x="23" fg:w="1375"/><text x="1.8253%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,374 samples, 94.11%)</title><rect x="1.6438%" y="789" width="94.1096%" height="15" fill="rgb(244,68,36)" fg:x="24" fg:w="1374"/><text x="1.8938%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="95.6849%" y="773" width="0.0685%" height="15" fill="rgb(232,229,15)" fg:x="1397" fg:w="1"/><text x="95.9349%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="95.6849%" y="757" width="0.0685%" height="15" fill="rgb(254,30,23)" fg:x="1397" fg:w="1"/><text x="95.9349%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,376 samples, 94.25%)</title><rect x="1.5753%" y="821" width="94.2466%" height="15" fill="rgb(235,160,14)" fg:x="23" fg:w="1376"/><text x="1.8253%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="95.7534%" y="805" width="0.0685%" height="15" fill="rgb(212,155,44)" fg:x="1398" fg:w="1"/><text x="96.0034%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="95.7534%" y="789" width="0.0685%" height="15" fill="rgb(226,2,50)" fg:x="1398" fg:w="1"/><text x="96.0034%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,377 samples, 94.32%)</title><rect x="1.5753%" y="853" width="94.3151%" height="15" fill="rgb(234,177,6)" fg:x="23" fg:w="1377"/><text x="1.8253%" y="863.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,377 samples, 94.32%)</title><rect x="1.5753%" y="837" width="94.3151%" height="15" fill="rgb(217,24,9)" fg:x="23" fg:w="1377"/><text x="1.8253%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="95.8219%" y="821" width="0.0685%" height="15" fill="rgb(220,13,46)" fg:x="1399" fg:w="1"/><text x="96.0719%" y="831.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="95.8219%" y="805" width="0.0685%" height="15" fill="rgb(239,221,27)" fg:x="1399" fg:w="1"/><text x="96.0719%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="97.8082%" y="837" width="0.1370%" height="15" fill="rgb(222,198,25)" fg:x="1428" fg:w="2"/><text x="98.0582%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="97.8082%" y="821" width="0.1370%" height="15" fill="rgb(211,99,13)" fg:x="1428" fg:w="2"/><text x="98.0582%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="97.8082%" y="805" width="0.1370%" height="15" fill="rgb(232,111,31)" fg:x="1428" fg:w="2"/><text x="98.0582%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="97.9452%" y="837" width="0.1370%" height="15" fill="rgb(245,82,37)" fg:x="1430" fg:w="2"/><text x="98.1952%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="98.0137%" y="821" width="0.0685%" height="15" fill="rgb(227,149,46)" fg:x="1431" fg:w="1"/><text x="98.2637%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="98.0822%" y="837" width="0.0685%" height="15" fill="rgb(218,36,50)" fg:x="1432" fg:w="1"/><text x="98.3322%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="98.1507%" y="837" width="0.0685%" height="15" fill="rgb(226,80,48)" fg:x="1433" fg:w="1"/><text x="98.4007%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.07%)</title><rect x="98.2192%" y="837" width="0.0685%" height="15" fill="rgb(238,224,15)" fg:x="1434" fg:w="1"/><text x="98.4692%" y="847.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$memcpy (1 samples, 0.07%)</title><rect x="98.2877%" y="837" width="0.0685%" height="15" fill="rgb(241,136,10)" fg:x="1435" fg:w="1"/><text x="98.5377%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="98.5616%" y="789" width="0.1370%" height="15" fill="rgb(208,32,45)" fg:x="1439" fg:w="2"/><text x="98.8116%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.34%)</title><rect x="98.4247%" y="821" width="0.3425%" height="15" fill="rgb(207,135,9)" fg:x="1437" fg:w="5"/><text x="98.6747%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="98.5616%" y="805" width="0.2055%" height="15" fill="rgb(206,86,44)" fg:x="1439" fg:w="3"/><text x="98.8116%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="98.6986%" y="789" width="0.0685%" height="15" fill="rgb(245,177,15)" fg:x="1441" fg:w="1"/><text x="98.9486%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (43 samples, 2.95%)</title><rect x="95.8904%" y="853" width="2.9452%" height="15" fill="rgb(206,64,50)" fg:x="1400" fg:w="43"/><text x="96.1404%" y="863.50">su..</text></g><g><title>sudoku-solver`alloc::vec::from_elem (7 samples, 0.48%)</title><rect x="98.3562%" y="837" width="0.4795%" height="15" fill="rgb(234,36,40)" fg:x="1436" fg:w="7"/><text x="98.6062%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="98.7671%" y="821" width="0.0685%" height="15" fill="rgb(213,64,8)" fg:x="1442" fg:w="1"/><text x="99.0171%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.07%)</title><rect x="98.9041%" y="805" width="0.0685%" height="15" fill="rgb(210,75,36)" fg:x="1444" fg:w="1"/><text x="99.1541%" y="815.50"></text></g><g><title>sudoku-solver`&lt;char as core::fmt::Display&gt;::fmt (2 samples, 0.14%)</title><rect x="98.9726%" y="789" width="0.1370%" height="15" fill="rgb(229,88,21)" fg:x="1445" fg:w="2"/><text x="99.2226%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.07%)</title><rect x="99.1781%" y="773" width="0.0685%" height="15" fill="rgb(252,204,47)" fg:x="1448" fg:w="1"/><text x="99.4281%" y="783.50"></text></g><g><title>sudoku-solver`main (1,459 samples, 99.93%)</title><rect x="0.0000%" y="933" width="99.9315%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="1459"/><text x="0.2500%" y="943.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (1,459 samples, 99.93%)</title><rect x="0.0000%" y="917" width="99.9315%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="1459"/><text x="0.2500%" y="927.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (1,459 samples, 99.93%)</title><rect x="0.0000%" y="901" width="99.9315%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="1459"/><text x="0.2500%" y="911.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (1,459 samples, 99.93%)</title><rect x="0.0000%" y="885" width="99.9315%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="1459"/><text x="0.2500%" y="895.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (1,455 samples, 99.66%)</title><rect x="0.2740%" y="869" width="99.6575%" height="15" fill="rgb(212,28,1)" fg:x="4" fg:w="1455"/><text x="0.5240%" y="879.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (16 samples, 1.10%)</title><rect x="98.8356%" y="853" width="1.0959%" height="15" fill="rgb(248,164,17)" fg:x="1443" fg:w="16"/><text x="99.0856%" y="863.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (15 samples, 1.03%)</title><rect x="98.9041%" y="837" width="1.0274%" height="15" fill="rgb(222,171,42)" fg:x="1444" fg:w="15"/><text x="99.1541%" y="847.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 1.03%)</title><rect x="98.9041%" y="821" width="1.0274%" height="15" fill="rgb(243,84,45)" fg:x="1444" fg:w="15"/><text x="99.1541%" y="831.50"></text></g><g><title>sudoku-solver`core::fmt::write (14 samples, 0.96%)</title><rect x="98.9726%" y="805" width="0.9589%" height="15" fill="rgb(252,49,23)" fg:x="1445" fg:w="14"/><text x="99.2226%" y="815.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.82%)</title><rect x="99.1096%" y="789" width="0.8219%" height="15" fill="rgb(215,19,7)" fg:x="1447" fg:w="12"/><text x="99.3596%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (10 samples, 0.68%)</title><rect x="99.2466%" y="773" width="0.6849%" height="15" fill="rgb(238,81,41)" fg:x="1449" fg:w="10"/><text x="99.4966%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`write (10 samples, 0.68%)</title><rect x="99.2466%" y="757" width="0.6849%" height="15" fill="rgb(210,199,37)" fg:x="1449" fg:w="10"/><text x="99.4966%" y="767.50"></text></g><g><title>all (1,460 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="1460"/><text x="0.2500%" y="975.50"></text></g><g><title>dyld`start (1,460 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="1460"/><text x="0.2500%" y="959.50">dyld`start</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (1 samples, 0.07%)</title><rect x="99.9315%" y="933" width="0.0685%" height="15" fill="rgb(236,162,54)" fg:x="1459" fg:w="1"/><text x="100.1815%" y="943.50"></text></g></svg></svg>