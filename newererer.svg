<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="1448"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.07%)</title><rect x="0.0000%" y="917" width="0.0691%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.07%)</title><rect x="0.0000%" y="901" width="0.0691%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="0.0691%" y="853" width="0.0691%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3191%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="0.1381%" y="853" width="0.0691%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3881%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="0.2072%" y="837" width="0.2072%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="3"/><text x="0.4572%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.07%)</title><rect x="0.3453%" y="821" width="0.0691%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.5953%" y="831.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.21%)</title><rect x="0.4834%" y="821" width="0.2072%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="3"/><text x="0.7334%" y="831.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.35%)</title><rect x="0.4144%" y="837" width="0.3453%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="5"/><text x="0.6644%" y="847.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="0.6906%" y="821" width="0.0691%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.9406%" y="831.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="0.6906%" y="805" width="0.0691%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="0.9406%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.07%)</title><rect x="0.6906%" y="789" width="0.0691%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="0.9406%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.07%)</title><rect x="0.6906%" y="773" width="0.0691%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="0.9406%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.07%)</title><rect x="0.6906%" y="757" width="0.0691%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="0.9406%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.07%)</title><rect x="0.6906%" y="741" width="0.0691%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="0.9406%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.07%)</title><rect x="0.6906%" y="725" width="0.0691%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="0.9406%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.07%)</title><rect x="0.6906%" y="709" width="0.0691%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="1"/><text x="0.9406%" y="719.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="0.7597%" y="837" width="0.0691%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="1"/><text x="1.0097%" y="847.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (10 samples, 0.69%)</title><rect x="0.8287%" y="837" width="0.6906%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="10"/><text x="1.0787%" y="847.50"></text></g><g><title>sudoku-solver`std::fs::read_to_string::inner (1 samples, 0.07%)</title><rect x="1.5193%" y="837" width="0.0691%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="1"/><text x="1.7693%" y="847.50"></text></g><g><title>sudoku-solver`&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.07%)</title><rect x="1.5193%" y="821" width="0.0691%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="1"/><text x="1.7693%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.07%)</title><rect x="1.5193%" y="805" width="0.0691%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="1"/><text x="1.7693%" y="815.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="1.5884%" y="789" width="0.0691%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="1"/><text x="1.8384%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.07%)</title><rect x="1.5884%" y="773" width="0.0691%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="1"/><text x="1.8384%" y="783.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (2 samples, 0.14%)</title><rect x="1.5884%" y="837" width="0.1381%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="2"/><text x="1.8384%" y="847.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.14%)</title><rect x="1.5884%" y="821" width="0.1381%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="2"/><text x="1.8384%" y="831.50"></text></g><g><title>sudoku-solver`core::fmt::write (2 samples, 0.14%)</title><rect x="1.5884%" y="805" width="0.1381%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="2"/><text x="1.8384%" y="815.50"></text></g><g><title>sudoku-solver`core::num::flt2dec::strategy::grisu::format_shortest_opt (1 samples, 0.07%)</title><rect x="1.6575%" y="789" width="0.0691%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="1"/><text x="1.9075%" y="799.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="1.8646%" y="661" width="0.0691%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="1"/><text x="2.1146%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="2.1409%" y="629" width="0.0691%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="1"/><text x="2.3909%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="2.2790%" y="613" width="0.0691%" height="15" fill="rgb(232,36,49)" fg:x="33" fg:w="1"/><text x="2.5290%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="2.4862%" y="565" width="0.0691%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="1"/><text x="2.7362%" y="575.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="2.5552%" y="549" width="0.0691%" height="15" fill="rgb(229,88,8)" fg:x="37" fg:w="1"/><text x="2.8052%" y="559.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="2.6243%" y="549" width="0.0691%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="1"/><text x="2.8743%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="2.8315%" y="501" width="0.0691%" height="15" fill="rgb(254,191,54)" fg:x="41" fg:w="1"/><text x="3.0815%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="2.9696%" y="485" width="0.0691%" height="15" fill="rgb(241,83,37)" fg:x="43" fg:w="1"/><text x="3.2196%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="3.0387%" y="485" width="0.0691%" height="15" fill="rgb(233,36,39)" fg:x="44" fg:w="1"/><text x="3.2887%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="3.1768%" y="469" width="0.0691%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="1"/><text x="3.4268%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="3.2459%" y="469" width="0.0691%" height="15" fill="rgb(245,192,40)" fg:x="47" fg:w="1"/><text x="3.4959%" y="479.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="3.3149%" y="469" width="0.0691%" height="15" fill="rgb(238,167,29)" fg:x="48" fg:w="1"/><text x="3.5649%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.28%)</title><rect x="3.5221%" y="453" width="0.2762%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="4"/><text x="3.7721%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="3.7983%" y="453" width="0.0691%" height="15" fill="rgb(231,60,39)" fg:x="55" fg:w="1"/><text x="4.0483%" y="463.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="3.8674%" y="453" width="0.0691%" height="15" fill="rgb(208,69,12)" fg:x="56" fg:w="1"/><text x="4.1174%" y="463.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="4.2818%" y="437" width="0.0691%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="1"/><text x="4.5318%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="4.9724%" y="405" width="0.0691%" height="15" fill="rgb(213,116,39)" fg:x="72" fg:w="1"/><text x="5.2224%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="5.0414%" y="405" width="0.0691%" height="15" fill="rgb(222,207,29)" fg:x="73" fg:w="1"/><text x="5.2914%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.14%)</title><rect x="5.1105%" y="405" width="0.1381%" height="15" fill="rgb(206,96,30)" fg:x="74" fg:w="2"/><text x="5.3605%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.07%)</title><rect x="5.2486%" y="405" width="0.0691%" height="15" fill="rgb(218,138,4)" fg:x="76" fg:w="1"/><text x="5.4986%" y="415.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="5.3177%" y="405" width="0.0691%" height="15" fill="rgb(250,191,14)" fg:x="77" fg:w="1"/><text x="5.5677%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.07%)</title><rect x="5.9392%" y="373" width="0.0691%" height="15" fill="rgb(239,60,40)" fg:x="86" fg:w="1"/><text x="6.1892%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="6.2155%" y="357" width="0.0691%" height="15" fill="rgb(206,27,48)" fg:x="90" fg:w="1"/><text x="6.4655%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="6.2845%" y="357" width="0.0691%" height="15" fill="rgb(225,35,8)" fg:x="91" fg:w="1"/><text x="6.5345%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="6.3536%" y="357" width="0.0691%" height="15" fill="rgb(250,213,24)" fg:x="92" fg:w="1"/><text x="6.6036%" y="367.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.07%)</title><rect x="6.4227%" y="357" width="0.0691%" height="15" fill="rgb(247,123,22)" fg:x="93" fg:w="1"/><text x="6.6727%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.07%)</title><rect x="6.6298%" y="341" width="0.0691%" height="15" fill="rgb(231,138,38)" fg:x="96" fg:w="1"/><text x="6.8798%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="7.2514%" y="229" width="0.0691%" height="15" fill="rgb(231,145,46)" fg:x="105" fg:w="1"/><text x="7.5014%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.07%)</title><rect x="7.3895%" y="85" width="0.0691%" height="15" fill="rgb(251,118,11)" fg:x="107" fg:w="1"/><text x="7.6395%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.07%)</title><rect x="7.3895%" y="69" width="0.0691%" height="15" fill="rgb(217,147,25)" fg:x="107" fg:w="1"/><text x="7.6395%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="7.3895%" y="53" width="0.0691%" height="15" fill="rgb(247,81,37)" fg:x="107" fg:w="1"/><text x="7.6395%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="7.3895%" y="37" width="0.0691%" height="15" fill="rgb(209,12,38)" fg:x="107" fg:w="1"/><text x="7.6395%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.21%)</title><rect x="7.3895%" y="101" width="0.2072%" height="15" fill="rgb(227,1,9)" fg:x="107" fg:w="3"/><text x="7.6395%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="7.4586%" y="85" width="0.1381%" height="15" fill="rgb(248,47,43)" fg:x="108" fg:w="2"/><text x="7.7086%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="7.4586%" y="69" width="0.1381%" height="15" fill="rgb(221,10,30)" fg:x="108" fg:w="2"/><text x="7.7086%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5 samples, 0.35%)</title><rect x="7.3895%" y="117" width="0.3453%" height="15" fill="rgb(210,229,1)" fg:x="107" fg:w="5"/><text x="7.6395%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="7.5967%" y="101" width="0.1381%" height="15" fill="rgb(222,148,37)" fg:x="110" fg:w="2"/><text x="7.8467%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="7.6657%" y="85" width="0.0691%" height="15" fill="rgb(234,67,33)" fg:x="111" fg:w="1"/><text x="7.9157%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9 samples, 0.62%)</title><rect x="7.3895%" y="133" width="0.6215%" height="15" fill="rgb(247,98,35)" fg:x="107" fg:w="9"/><text x="7.6395%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.28%)</title><rect x="7.7348%" y="117" width="0.2762%" height="15" fill="rgb(247,138,52)" fg:x="112" fg:w="4"/><text x="7.9848%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.28%)</title><rect x="7.7348%" y="101" width="0.2762%" height="15" fill="rgb(213,79,30)" fg:x="112" fg:w="4"/><text x="7.9848%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="8.0110%" y="117" width="0.0691%" height="15" fill="rgb(246,177,23)" fg:x="116" fg:w="1"/><text x="8.2610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="8.0110%" y="101" width="0.0691%" height="15" fill="rgb(230,62,27)" fg:x="116" fg:w="1"/><text x="8.2610%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="8.0110%" y="85" width="0.0691%" height="15" fill="rgb(216,154,8)" fg:x="116" fg:w="1"/><text x="8.2610%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="8.0801%" y="117" width="0.0691%" height="15" fill="rgb(244,35,45)" fg:x="117" fg:w="1"/><text x="8.3301%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14 samples, 0.97%)</title><rect x="7.3895%" y="149" width="0.9669%" height="15" fill="rgb(251,115,12)" fg:x="107" fg:w="14"/><text x="7.6395%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.35%)</title><rect x="8.0110%" y="133" width="0.3453%" height="15" fill="rgb(240,54,50)" fg:x="116" fg:w="5"/><text x="8.2610%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.21%)</title><rect x="8.1492%" y="117" width="0.2072%" height="15" fill="rgb(233,84,52)" fg:x="118" fg:w="3"/><text x="8.3992%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (16 samples, 1.10%)</title><rect x="7.3895%" y="165" width="1.1050%" height="15" fill="rgb(207,117,47)" fg:x="107" fg:w="16"/><text x="7.6395%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="8.3564%" y="149" width="0.1381%" height="15" fill="rgb(249,43,39)" fg:x="121" fg:w="2"/><text x="8.6064%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="8.3564%" y="133" width="0.1381%" height="15" fill="rgb(209,38,44)" fg:x="121" fg:w="2"/><text x="8.6064%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21 samples, 1.45%)</title><rect x="7.3204%" y="181" width="1.4503%" height="15" fill="rgb(236,212,23)" fg:x="106" fg:w="21"/><text x="7.5704%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.28%)</title><rect x="8.4945%" y="165" width="0.2762%" height="15" fill="rgb(242,79,21)" fg:x="123" fg:w="4"/><text x="8.7445%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.28%)</title><rect x="8.4945%" y="149" width="0.2762%" height="15" fill="rgb(211,96,35)" fg:x="123" fg:w="4"/><text x="8.7445%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (24 samples, 1.66%)</title><rect x="7.3204%" y="197" width="1.6575%" height="15" fill="rgb(253,215,40)" fg:x="106" fg:w="24"/><text x="7.5704%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.21%)</title><rect x="8.7707%" y="181" width="0.2072%" height="15" fill="rgb(211,81,21)" fg:x="127" fg:w="3"/><text x="9.0207%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.21%)</title><rect x="8.7707%" y="165" width="0.2072%" height="15" fill="rgb(208,190,38)" fg:x="127" fg:w="3"/><text x="9.0207%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="8.9779%" y="181" width="0.1381%" height="15" fill="rgb(235,213,38)" fg:x="130" fg:w="2"/><text x="9.2279%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (38 samples, 2.62%)</title><rect x="7.3204%" y="213" width="2.6243%" height="15" fill="rgb(237,122,38)" fg:x="106" fg:w="38"/><text x="7.5704%" y="223.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.97%)</title><rect x="8.9779%" y="197" width="0.9669%" height="15" fill="rgb(244,218,35)" fg:x="130" fg:w="14"/><text x="9.2279%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.83%)</title><rect x="9.1160%" y="181" width="0.8287%" height="15" fill="rgb(240,68,47)" fg:x="132" fg:w="12"/><text x="9.3660%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="10.0138%" y="197" width="0.0691%" height="15" fill="rgb(210,16,53)" fg:x="145" fg:w="1"/><text x="10.2638%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (49 samples, 3.38%)</title><rect x="7.3204%" y="229" width="3.3840%" height="15" fill="rgb(235,124,12)" fg:x="106" fg:w="49"/><text x="7.5704%" y="239.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.76%)</title><rect x="9.9448%" y="213" width="0.7597%" height="15" fill="rgb(224,169,11)" fg:x="144" fg:w="11"/><text x="10.1948%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="10.0829%" y="197" width="0.6215%" height="15" fill="rgb(250,166,2)" fg:x="146" fg:w="9"/><text x="10.3329%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (56 samples, 3.87%)</title><rect x="7.2514%" y="245" width="3.8674%" height="15" fill="rgb(242,216,29)" fg:x="105" fg:w="56"/><text x="7.5014%" y="255.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.41%)</title><rect x="10.7044%" y="229" width="0.4144%" height="15" fill="rgb(230,116,27)" fg:x="155" fg:w="6"/><text x="10.9544%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (5 samples, 0.35%)</title><rect x="10.7735%" y="213" width="0.3453%" height="15" fill="rgb(228,99,48)" fg:x="156" fg:w="5"/><text x="11.0235%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (60 samples, 4.14%)</title><rect x="7.2514%" y="261" width="4.1436%" height="15" fill="rgb(253,11,6)" fg:x="105" fg:w="60"/><text x="7.5014%" y="271.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.28%)</title><rect x="11.1188%" y="245" width="0.2762%" height="15" fill="rgb(247,143,39)" fg:x="161" fg:w="4"/><text x="11.3688%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.21%)</title><rect x="11.1878%" y="229" width="0.2072%" height="15" fill="rgb(236,97,10)" fg:x="162" fg:w="3"/><text x="11.4378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="11.3950%" y="245" width="0.0691%" height="15" fill="rgb(233,208,19)" fg:x="165" fg:w="1"/><text x="11.6450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="11.3950%" y="229" width="0.0691%" height="15" fill="rgb(216,164,2)" fg:x="165" fg:w="1"/><text x="11.6450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="11.3950%" y="213" width="0.0691%" height="15" fill="rgb(220,129,5)" fg:x="165" fg:w="1"/><text x="11.6450%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="11.4641%" y="245" width="0.0691%" height="15" fill="rgb(242,17,10)" fg:x="166" fg:w="1"/><text x="11.7141%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="11.5331%" y="245" width="0.0691%" height="15" fill="rgb(242,107,0)" fg:x="167" fg:w="1"/><text x="11.7831%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (69 samples, 4.77%)</title><rect x="7.2514%" y="277" width="4.7652%" height="15" fill="rgb(251,28,31)" fg:x="105" fg:w="69"/><text x="7.5014%" y="287.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 0.62%)</title><rect x="11.3950%" y="261" width="0.6215%" height="15" fill="rgb(233,223,10)" fg:x="165" fg:w="9"/><text x="11.6450%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (6 samples, 0.41%)</title><rect x="11.6022%" y="245" width="0.4144%" height="15" fill="rgb(215,21,27)" fg:x="168" fg:w="6"/><text x="11.8522%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="12.0166%" y="261" width="0.0691%" height="15" fill="rgb(232,23,21)" fg:x="174" fg:w="1"/><text x="12.2666%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="12.0166%" y="245" width="0.0691%" height="15" fill="rgb(244,5,23)" fg:x="174" fg:w="1"/><text x="12.2666%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (83 samples, 5.73%)</title><rect x="7.1133%" y="293" width="5.7320%" height="15" fill="rgb(226,81,46)" fg:x="103" fg:w="83"/><text x="7.3633%" y="303.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (12 samples, 0.83%)</title><rect x="12.0166%" y="277" width="0.8287%" height="15" fill="rgb(247,70,30)" fg:x="174" fg:w="12"/><text x="12.2666%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (11 samples, 0.76%)</title><rect x="12.0856%" y="261" width="0.7597%" height="15" fill="rgb(212,68,19)" fg:x="175" fg:w="11"/><text x="12.3356%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (105 samples, 7.25%)</title><rect x="6.9751%" y="309" width="7.2514%" height="15" fill="rgb(240,187,13)" fg:x="101" fg:w="105"/><text x="7.2251%" y="319.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (20 samples, 1.38%)</title><rect x="12.8453%" y="293" width="1.3812%" height="15" fill="rgb(223,113,26)" fg:x="186" fg:w="20"/><text x="13.0953%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (19 samples, 1.31%)</title><rect x="12.9144%" y="277" width="1.3122%" height="15" fill="rgb(206,192,2)" fg:x="187" fg:w="19"/><text x="13.1644%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (126 samples, 8.70%)</title><rect x="6.8370%" y="325" width="8.7017%" height="15" fill="rgb(241,108,4)" fg:x="99" fg:w="126"/><text x="7.0870%" y="335.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (19 samples, 1.31%)</title><rect x="14.2265%" y="309" width="1.3122%" height="15" fill="rgb(247,173,49)" fg:x="206" fg:w="19"/><text x="14.4765%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (18 samples, 1.24%)</title><rect x="14.2956%" y="293" width="1.2431%" height="15" fill="rgb(224,114,35)" fg:x="207" fg:w="18"/><text x="14.5456%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="15.6077%" y="309" width="0.0691%" height="15" fill="rgb(245,159,27)" fg:x="226" fg:w="1"/><text x="15.8577%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="15.6077%" y="293" width="0.0691%" height="15" fill="rgb(245,172,44)" fg:x="226" fg:w="1"/><text x="15.8577%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="15.6768%" y="309" width="0.0691%" height="15" fill="rgb(236,23,11)" fg:x="227" fg:w="1"/><text x="15.9268%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (174 samples, 12.02%)</title><rect x="6.6989%" y="341" width="12.0166%" height="15" fill="rgb(205,117,38)" fg:x="97" fg:w="174"/><text x="6.9489%" y="351.50">sudoku-solver`sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (46 samples, 3.18%)</title><rect x="15.5387%" y="325" width="3.1768%" height="15" fill="rgb(237,72,25)" fg:x="225" fg:w="46"/><text x="15.7887%" y="335.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (43 samples, 2.97%)</title><rect x="15.7459%" y="309" width="2.9696%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="43"/><text x="15.9959%" y="319.50">sud..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="18.9227%" y="325" width="0.0691%" height="15" fill="rgb(217,125,39)" fg:x="274" fg:w="1"/><text x="19.1727%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="18.9917%" y="325" width="0.2072%" height="15" fill="rgb(235,36,10)" fg:x="275" fg:w="3"/><text x="19.2417%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="19.1989%" y="325" width="0.0691%" height="15" fill="rgb(251,123,47)" fg:x="278" fg:w="1"/><text x="19.4489%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (240 samples, 16.57%)</title><rect x="6.4917%" y="357" width="16.5746%" height="15" fill="rgb(221,13,13)" fg:x="94" fg:w="240"/><text x="6.7417%" y="367.50">sudoku-solver`sudoku_solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (63 samples, 4.35%)</title><rect x="18.7155%" y="341" width="4.3508%" height="15" fill="rgb(238,131,9)" fg:x="271" fg:w="63"/><text x="18.9655%" y="351.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (55 samples, 3.80%)</title><rect x="19.2680%" y="325" width="3.7983%" height="15" fill="rgb(211,50,8)" fg:x="279" fg:w="55"/><text x="19.5180%" y="335.50">sudo..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="23.4807%" y="325" width="0.0691%" height="15" fill="rgb(245,182,24)" fg:x="340" fg:w="1"/><text x="23.7307%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.35%)</title><rect x="23.4116%" y="341" width="0.3453%" height="15" fill="rgb(242,14,37)" fg:x="339" fg:w="5"/><text x="23.6616%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="23.5497%" y="325" width="0.2072%" height="15" fill="rgb(246,228,12)" fg:x="341" fg:w="3"/><text x="23.7997%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="23.6188%" y="309" width="0.1381%" height="15" fill="rgb(213,55,15)" fg:x="342" fg:w="2"/><text x="23.8688%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="23.7569%" y="341" width="0.0691%" height="15" fill="rgb(209,9,3)" fg:x="344" fg:w="1"/><text x="24.0069%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="23.8260%" y="341" width="0.0691%" height="15" fill="rgb(230,59,30)" fg:x="345" fg:w="1"/><text x="24.0760%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="23.8260%" y="325" width="0.0691%" height="15" fill="rgb(209,121,21)" fg:x="345" fg:w="1"/><text x="24.0760%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="23.8950%" y="341" width="0.0691%" height="15" fill="rgb(220,109,13)" fg:x="346" fg:w="1"/><text x="24.1450%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (327 samples, 22.58%)</title><rect x="6.0083%" y="373" width="22.5829%" height="15" fill="rgb(232,18,1)" fg:x="87" fg:w="327"/><text x="6.2583%" y="383.50">sudoku-solver`sudoku_solver::backtra..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (80 samples, 5.52%)</title><rect x="23.0663%" y="357" width="5.5249%" height="15" fill="rgb(215,41,42)" fg:x="334" fg:w="80"/><text x="23.3163%" y="367.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (67 samples, 4.63%)</title><rect x="23.9641%" y="341" width="4.6271%" height="15" fill="rgb(224,123,36)" fg:x="347" fg:w="67"/><text x="24.2141%" y="351.50">sudok..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.28%)</title><rect x="28.9365%" y="357" width="0.2762%" height="15" fill="rgb(240,125,3)" fg:x="419" fg:w="4"/><text x="29.1865%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="29.0746%" y="341" width="0.1381%" height="15" fill="rgb(205,98,50)" fg:x="421" fg:w="2"/><text x="29.3246%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="29.0746%" y="325" width="0.1381%" height="15" fill="rgb(205,185,37)" fg:x="421" fg:w="2"/><text x="29.3246%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="29.2127%" y="357" width="0.1381%" height="15" fill="rgb(238,207,15)" fg:x="423" fg:w="2"/><text x="29.4627%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="29.2127%" y="341" width="0.1381%" height="15" fill="rgb(213,199,42)" fg:x="423" fg:w="2"/><text x="29.4627%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="29.3508%" y="357" width="0.0691%" height="15" fill="rgb(235,201,11)" fg:x="425" fg:w="1"/><text x="29.6008%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (418 samples, 28.87%)</title><rect x="5.6630%" y="389" width="28.8674%" height="15" fill="rgb(207,46,11)" fg:x="82" fg:w="418"/><text x="5.9130%" y="399.50">sudoku-solver`sudoku_solver::backtraking::back..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (86 samples, 5.94%)</title><rect x="28.5912%" y="373" width="5.9392%" height="15" fill="rgb(241,35,35)" fg:x="414" fg:w="86"/><text x="28.8412%" y="383.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (74 samples, 5.11%)</title><rect x="29.4199%" y="357" width="5.1105%" height="15" fill="rgb(243,32,47)" fg:x="426" fg:w="74"/><text x="29.6699%" y="367.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="34.7376%" y="373" width="0.2072%" height="15" fill="rgb(247,202,23)" fg:x="503" fg:w="3"/><text x="34.9876%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="34.7376%" y="357" width="0.2072%" height="15" fill="rgb(219,102,11)" fg:x="503" fg:w="3"/><text x="34.9876%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="34.8066%" y="341" width="0.1381%" height="15" fill="rgb(243,110,44)" fg:x="504" fg:w="2"/><text x="35.0566%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="34.8757%" y="325" width="0.0691%" height="15" fill="rgb(222,74,54)" fg:x="505" fg:w="1"/><text x="35.1257%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.28%)</title><rect x="34.9448%" y="373" width="0.2762%" height="15" fill="rgb(216,99,12)" fg:x="506" fg:w="4"/><text x="35.1948%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="35.1519%" y="357" width="0.0691%" height="15" fill="rgb(226,22,26)" fg:x="509" fg:w="1"/><text x="35.4019%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (500 samples, 34.53%)</title><rect x="5.3867%" y="405" width="34.5304%" height="15" fill="rgb(217,163,10)" fg:x="78" fg:w="500"/><text x="5.6367%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtraking_re..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (78 samples, 5.39%)</title><rect x="34.5304%" y="389" width="5.3867%" height="15" fill="rgb(213,25,53)" fg:x="500" fg:w="78"/><text x="34.7804%" y="399.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (68 samples, 4.70%)</title><rect x="35.2210%" y="373" width="4.6961%" height="15" fill="rgb(252,105,26)" fg:x="510" fg:w="68"/><text x="35.4710%" y="383.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="40.1934%" y="373" width="0.0691%" height="15" fill="rgb(220,39,43)" fg:x="582" fg:w="1"/><text x="40.4434%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="40.1934%" y="389" width="0.1381%" height="15" fill="rgb(229,68,48)" fg:x="582" fg:w="2"/><text x="40.4434%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="40.2624%" y="373" width="0.0691%" height="15" fill="rgb(252,8,32)" fg:x="583" fg:w="1"/><text x="40.5124%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="40.2624%" y="357" width="0.0691%" height="15" fill="rgb(223,20,43)" fg:x="583" fg:w="1"/><text x="40.5124%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="40.3315%" y="389" width="0.0691%" height="15" fill="rgb(229,81,49)" fg:x="584" fg:w="1"/><text x="40.5815%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="40.4006%" y="389" width="0.0691%" height="15" fill="rgb(236,28,36)" fg:x="585" fg:w="1"/><text x="40.6506%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="40.4696%" y="389" width="0.0691%" height="15" fill="rgb(249,185,26)" fg:x="586" fg:w="1"/><text x="40.7196%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="40.5387%" y="389" width="0.0691%" height="15" fill="rgb(249,174,33)" fg:x="587" fg:w="1"/><text x="40.7887%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (592 samples, 40.88%)</title><rect x="4.7652%" y="421" width="40.8840%" height="15" fill="rgb(233,201,37)" fg:x="69" fg:w="592"/><text x="5.0152%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (83 samples, 5.73%)</title><rect x="39.9171%" y="405" width="5.7320%" height="15" fill="rgb(221,78,26)" fg:x="578" fg:w="83"/><text x="40.1671%" y="415.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (73 samples, 5.04%)</title><rect x="40.6077%" y="389" width="5.0414%" height="15" fill="rgb(250,127,30)" fg:x="588" fg:w="73"/><text x="40.8577%" y="399.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="46.2017%" y="389" width="0.0691%" height="15" fill="rgb(230,49,44)" fg:x="669" fg:w="1"/><text x="46.4517%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="46.3398%" y="373" width="0.0691%" height="15" fill="rgb(229,67,23)" fg:x="671" fg:w="1"/><text x="46.5898%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.35%)</title><rect x="46.1326%" y="405" width="0.3453%" height="15" fill="rgb(249,83,47)" fg:x="668" fg:w="5"/><text x="46.3826%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="46.2707%" y="389" width="0.2072%" height="15" fill="rgb(215,43,3)" fg:x="670" fg:w="3"/><text x="46.5207%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="46.4088%" y="373" width="0.0691%" height="15" fill="rgb(238,154,13)" fg:x="672" fg:w="1"/><text x="46.6588%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="46.4779%" y="405" width="0.0691%" height="15" fill="rgb(219,56,2)" fg:x="673" fg:w="1"/><text x="46.7279%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.28%)</title><rect x="46.5470%" y="405" width="0.2762%" height="15" fill="rgb(233,0,4)" fg:x="674" fg:w="4"/><text x="46.7970%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="46.6851%" y="389" width="0.1381%" height="15" fill="rgb(235,30,7)" fg:x="676" fg:w="2"/><text x="46.9351%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (714 samples, 49.31%)</title><rect x="4.3508%" y="437" width="49.3094%" height="15" fill="rgb(250,79,13)" fg:x="63" fg:w="714"/><text x="4.6008%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (116 samples, 8.01%)</title><rect x="45.6492%" y="421" width="8.0110%" height="15" fill="rgb(211,146,34)" fg:x="661" fg:w="116"/><text x="45.8992%" y="431.50">sudoku-solv..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (99 samples, 6.84%)</title><rect x="46.8232%" y="405" width="6.8370%" height="15" fill="rgb(228,22,38)" fg:x="678" fg:w="99"/><text x="47.0732%" y="415.50">sudoku-so..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="54.0746%" y="421" width="0.1381%" height="15" fill="rgb(235,168,5)" fg:x="783" fg:w="2"/><text x="54.3246%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="54.0746%" y="405" width="0.1381%" height="15" fill="rgb(221,155,16)" fg:x="783" fg:w="2"/><text x="54.3246%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="54.0746%" y="389" width="0.1381%" height="15" fill="rgb(215,215,53)" fg:x="783" fg:w="2"/><text x="54.3246%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="54.1436%" y="373" width="0.0691%" height="15" fill="rgb(223,4,10)" fg:x="784" fg:w="1"/><text x="54.3936%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="54.2127%" y="421" width="0.0691%" height="15" fill="rgb(234,103,6)" fg:x="785" fg:w="1"/><text x="54.4627%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.07%)</title><rect x="54.2818%" y="421" width="0.0691%" height="15" fill="rgb(227,97,0)" fg:x="786" fg:w="1"/><text x="54.5318%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (831 samples, 57.39%)</title><rect x="3.9365%" y="453" width="57.3895%" height="15" fill="rgb(234,150,53)" fg:x="57" fg:w="831"/><text x="4.1865%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (111 samples, 7.67%)</title><rect x="53.6602%" y="437" width="7.6657%" height="15" fill="rgb(228,201,54)" fg:x="777" fg:w="111"/><text x="53.9102%" y="447.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (101 samples, 6.98%)</title><rect x="54.3508%" y="421" width="6.9751%" height="15" fill="rgb(222,22,37)" fg:x="787" fg:w="101"/><text x="54.6008%" y="431.50">sudoku-so..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.28%)</title><rect x="61.6022%" y="437" width="0.2762%" height="15" fill="rgb(237,53,32)" fg:x="892" fg:w="4"/><text x="61.8522%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="61.7403%" y="421" width="0.1381%" height="15" fill="rgb(233,25,53)" fg:x="894" fg:w="2"/><text x="61.9903%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="61.7403%" y="405" width="0.1381%" height="15" fill="rgb(210,40,34)" fg:x="894" fg:w="2"/><text x="61.9903%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.14%)</title><rect x="61.7403%" y="389" width="0.1381%" height="15" fill="rgb(241,220,44)" fg:x="894" fg:w="2"/><text x="61.9903%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="61.8785%" y="437" width="0.0691%" height="15" fill="rgb(235,28,35)" fg:x="896" fg:w="1"/><text x="62.1285%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="61.8785%" y="421" width="0.0691%" height="15" fill="rgb(210,56,17)" fg:x="896" fg:w="1"/><text x="62.1285%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.14%)</title><rect x="61.9475%" y="437" width="0.1381%" height="15" fill="rgb(224,130,29)" fg:x="897" fg:w="2"/><text x="62.1975%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="62.0856%" y="437" width="0.0691%" height="15" fill="rgb(235,212,8)" fg:x="899" fg:w="1"/><text x="62.3356%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (933 samples, 64.43%)</title><rect x="3.3840%" y="469" width="64.4337%" height="15" fill="rgb(223,33,50)" fg:x="49" fg:w="933"/><text x="3.6340%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (94 samples, 6.49%)</title><rect x="61.3260%" y="453" width="6.4917%" height="15" fill="rgb(219,149,13)" fg:x="888" fg:w="94"/><text x="61.5760%" y="463.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (82 samples, 5.66%)</title><rect x="62.1547%" y="437" width="5.6630%" height="15" fill="rgb(250,156,29)" fg:x="900" fg:w="82"/><text x="62.4047%" y="447.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.35%)</title><rect x="68.1630%" y="453" width="0.3453%" height="15" fill="rgb(216,193,19)" fg:x="987" fg:w="5"/><text x="68.4130%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="68.3011%" y="437" width="0.2072%" height="15" fill="rgb(216,135,14)" fg:x="989" fg:w="3"/><text x="68.5511%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="68.4392%" y="421" width="0.0691%" height="15" fill="rgb(241,47,5)" fg:x="991" fg:w="1"/><text x="68.6892%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="68.5083%" y="453" width="0.1381%" height="15" fill="rgb(233,42,35)" fg:x="992" fg:w="2"/><text x="68.7583%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="68.5773%" y="437" width="0.0691%" height="15" fill="rgb(231,13,6)" fg:x="993" fg:w="1"/><text x="68.8273%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,018 samples, 70.30%)</title><rect x="3.1077%" y="485" width="70.3039%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="1018"/><text x="3.3577%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (81 samples, 5.59%)</title><rect x="67.8177%" y="469" width="5.5939%" height="15" fill="rgb(254,173,49)" fg:x="982" fg:w="81"/><text x="68.0677%" y="479.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (69 samples, 4.77%)</title><rect x="68.6464%" y="453" width="4.7652%" height="15" fill="rgb(221,1,38)" fg:x="994" fg:w="69"/><text x="68.8964%" y="463.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="73.6188%" y="469" width="0.2072%" height="15" fill="rgb(206,124,46)" fg:x="1066" fg:w="3"/><text x="73.8688%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="73.6188%" y="453" width="0.2072%" height="15" fill="rgb(249,21,11)" fg:x="1066" fg:w="3"/><text x="73.8688%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.21%)</title><rect x="73.6188%" y="437" width="0.2072%" height="15" fill="rgb(222,201,40)" fg:x="1066" fg:w="3"/><text x="73.8688%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="73.8260%" y="469" width="0.1381%" height="15" fill="rgb(235,61,29)" fg:x="1069" fg:w="2"/><text x="74.0760%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="73.8950%" y="453" width="0.0691%" height="15" fill="rgb(219,207,3)" fg:x="1070" fg:w="1"/><text x="74.1450%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,081 samples, 74.65%)</title><rect x="2.9006%" y="501" width="74.6547%" height="15" fill="rgb(222,56,46)" fg:x="42" fg:w="1081"/><text x="3.1506%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (60 samples, 4.14%)</title><rect x="73.4116%" y="485" width="4.1436%" height="15" fill="rgb(239,76,54)" fg:x="1063" fg:w="60"/><text x="73.6616%" y="495.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (52 samples, 3.59%)</title><rect x="73.9641%" y="469" width="3.5912%" height="15" fill="rgb(231,124,27)" fg:x="1071" fg:w="52"/><text x="74.2141%" y="479.50">sudo..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="77.6934%" y="453" width="0.0691%" height="15" fill="rgb(249,195,6)" fg:x="1125" fg:w="1"/><text x="77.9434%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="77.6934%" y="437" width="0.0691%" height="15" fill="rgb(237,174,47)" fg:x="1125" fg:w="1"/><text x="77.9434%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="77.6934%" y="485" width="0.1381%" height="15" fill="rgb(206,201,31)" fg:x="1125" fg:w="2"/><text x="77.9434%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="77.6934%" y="469" width="0.1381%" height="15" fill="rgb(231,57,52)" fg:x="1125" fg:w="2"/><text x="77.9434%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="77.7624%" y="453" width="0.0691%" height="15" fill="rgb(248,177,22)" fg:x="1126" fg:w="1"/><text x="78.0124%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.14%)</title><rect x="77.8315%" y="485" width="0.1381%" height="15" fill="rgb(215,211,37)" fg:x="1127" fg:w="2"/><text x="78.0815%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,118 samples, 77.21%)</title><rect x="2.7624%" y="517" width="77.2099%" height="15" fill="rgb(241,128,51)" fg:x="40" fg:w="1118"/><text x="3.0124%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (35 samples, 2.42%)</title><rect x="77.5552%" y="501" width="2.4171%" height="15" fill="rgb(227,165,31)" fg:x="1123" fg:w="35"/><text x="77.8052%" y="511.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (29 samples, 2.00%)</title><rect x="77.9696%" y="485" width="2.0028%" height="15" fill="rgb(228,167,24)" fg:x="1129" fg:w="29"/><text x="78.2196%" y="495.50">s..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="80.0414%" y="501" width="0.0691%" height="15" fill="rgb(228,143,12)" fg:x="1159" fg:w="1"/><text x="80.2914%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="80.0414%" y="485" width="0.0691%" height="15" fill="rgb(249,149,8)" fg:x="1159" fg:w="1"/><text x="80.2914%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="80.0414%" y="469" width="0.0691%" height="15" fill="rgb(243,35,44)" fg:x="1159" fg:w="1"/><text x="80.2914%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="80.0414%" y="453" width="0.0691%" height="15" fill="rgb(246,89,9)" fg:x="1159" fg:w="1"/><text x="80.2914%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,136 samples, 78.45%)</title><rect x="2.7624%" y="533" width="78.4530%" height="15" fill="rgb(233,213,13)" fg:x="40" fg:w="1136"/><text x="3.0124%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 1.24%)</title><rect x="79.9724%" y="517" width="1.2431%" height="15" fill="rgb(233,141,41)" fg:x="1158" fg:w="18"/><text x="80.2224%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (16 samples, 1.10%)</title><rect x="80.1105%" y="501" width="1.1050%" height="15" fill="rgb(239,167,4)" fg:x="1160" fg:w="16"/><text x="80.3605%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="81.2845%" y="517" width="0.0691%" height="15" fill="rgb(209,217,16)" fg:x="1177" fg:w="1"/><text x="81.5345%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="81.2845%" y="501" width="0.0691%" height="15" fill="rgb(219,88,35)" fg:x="1177" fg:w="1"/><text x="81.5345%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="81.2845%" y="485" width="0.0691%" height="15" fill="rgb(220,193,23)" fg:x="1177" fg:w="1"/><text x="81.5345%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="81.3536%" y="517" width="0.0691%" height="15" fill="rgb(230,90,52)" fg:x="1178" fg:w="1"/><text x="81.6036%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="81.4227%" y="517" width="0.0691%" height="15" fill="rgb(252,106,19)" fg:x="1179" fg:w="1"/><text x="81.6727%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,150 samples, 79.42%)</title><rect x="2.6934%" y="549" width="79.4199%" height="15" fill="rgb(206,74,20)" fg:x="39" fg:w="1150"/><text x="2.9434%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (13 samples, 0.90%)</title><rect x="81.2155%" y="533" width="0.8978%" height="15" fill="rgb(230,138,44)" fg:x="1176" fg:w="13"/><text x="81.4655%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="81.4917%" y="517" width="0.6215%" height="15" fill="rgb(235,182,43)" fg:x="1180" fg:w="9"/><text x="81.7417%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="82.1133%" y="533" width="0.0691%" height="15" fill="rgb(242,16,51)" fg:x="1189" fg:w="1"/><text x="82.3633%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="82.1133%" y="517" width="0.0691%" height="15" fill="rgb(248,9,4)" fg:x="1189" fg:w="1"/><text x="82.3633%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="82.1823%" y="533" width="0.0691%" height="15" fill="rgb(210,31,22)" fg:x="1190" fg:w="1"/><text x="82.4323%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="82.2514%" y="533" width="0.0691%" height="15" fill="rgb(239,54,39)" fg:x="1191" fg:w="1"/><text x="82.5014%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,173 samples, 81.01%)</title><rect x="2.5552%" y="565" width="81.0083%" height="15" fill="rgb(230,99,41)" fg:x="37" fg:w="1173"/><text x="2.8052%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (21 samples, 1.45%)</title><rect x="82.1133%" y="549" width="1.4503%" height="15" fill="rgb(253,106,12)" fg:x="1189" fg:w="21"/><text x="82.3633%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (18 samples, 1.24%)</title><rect x="82.3204%" y="533" width="1.2431%" height="15" fill="rgb(213,46,41)" fg:x="1192" fg:w="18"/><text x="82.5704%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="83.7017%" y="549" width="0.0691%" height="15" fill="rgb(215,133,35)" fg:x="1212" fg:w="1"/><text x="83.9517%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,182 samples, 81.63%)</title><rect x="2.4862%" y="581" width="81.6298%" height="15" fill="rgb(213,28,5)" fg:x="36" fg:w="1182"/><text x="2.7362%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (8 samples, 0.55%)</title><rect x="83.5635%" y="565" width="0.5525%" height="15" fill="rgb(215,77,49)" fg:x="1210" fg:w="8"/><text x="83.8135%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (5 samples, 0.35%)</title><rect x="83.7707%" y="549" width="0.3453%" height="15" fill="rgb(248,100,22)" fg:x="1213" fg:w="5"/><text x="84.0207%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,194 samples, 82.46%)</title><rect x="2.3481%" y="597" width="82.4586%" height="15" fill="rgb(208,67,9)" fg:x="34" fg:w="1194"/><text x="2.5981%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.69%)</title><rect x="84.1160%" y="581" width="0.6906%" height="15" fill="rgb(219,133,21)" fg:x="1218" fg:w="10"/><text x="84.3660%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (10 samples, 0.69%)</title><rect x="84.1160%" y="565" width="0.6906%" height="15" fill="rgb(246,46,29)" fg:x="1218" fg:w="10"/><text x="84.3660%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.14%)</title><rect x="84.8066%" y="581" width="0.1381%" height="15" fill="rgb(246,185,52)" fg:x="1228" fg:w="2"/><text x="85.0566%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="84.8066%" y="565" width="0.1381%" height="15" fill="rgb(252,136,11)" fg:x="1228" fg:w="2"/><text x="85.0566%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,208 samples, 83.43%)</title><rect x="2.3481%" y="613" width="83.4254%" height="15" fill="rgb(219,138,53)" fg:x="34" fg:w="1208"/><text x="2.5981%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.97%)</title><rect x="84.8066%" y="597" width="0.9669%" height="15" fill="rgb(211,51,23)" fg:x="1228" fg:w="14"/><text x="85.0566%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (12 samples, 0.83%)</title><rect x="84.9448%" y="581" width="0.8287%" height="15" fill="rgb(247,221,28)" fg:x="1230" fg:w="12"/><text x="85.1948%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="85.8425%" y="597" width="0.0691%" height="15" fill="rgb(251,222,45)" fg:x="1243" fg:w="1"/><text x="86.0925%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="85.9116%" y="597" width="0.0691%" height="15" fill="rgb(217,162,53)" fg:x="1244" fg:w="1"/><text x="86.1616%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="85.9116%" y="581" width="0.0691%" height="15" fill="rgb(229,93,14)" fg:x="1244" fg:w="1"/><text x="86.1616%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,232 samples, 85.08%)</title><rect x="2.2099%" y="629" width="85.0829%" height="15" fill="rgb(209,67,49)" fg:x="32" fg:w="1232"/><text x="2.4599%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 1.52%)</title><rect x="85.7735%" y="613" width="1.5193%" height="15" fill="rgb(213,87,29)" fg:x="1242" fg:w="22"/><text x="86.0235%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (19 samples, 1.31%)</title><rect x="85.9807%" y="597" width="1.3122%" height="15" fill="rgb(205,151,52)" fg:x="1245" fg:w="19"/><text x="86.2307%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="87.4309%" y="613" width="0.1381%" height="15" fill="rgb(253,215,39)" fg:x="1266" fg:w="2"/><text x="87.6809%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="87.4309%" y="597" width="0.1381%" height="15" fill="rgb(221,220,41)" fg:x="1266" fg:w="2"/><text x="87.6809%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="87.4309%" y="581" width="0.1381%" height="15" fill="rgb(218,133,21)" fg:x="1266" fg:w="2"/><text x="87.6809%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="87.5000%" y="565" width="0.0691%" height="15" fill="rgb(221,193,43)" fg:x="1267" fg:w="1"/><text x="87.7500%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,266 samples, 87.43%)</title><rect x="2.0028%" y="645" width="87.4309%" height="15" fill="rgb(240,128,52)" fg:x="29" fg:w="1266"/><text x="2.2528%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (31 samples, 2.14%)</title><rect x="87.2928%" y="629" width="2.1409%" height="15" fill="rgb(253,114,12)" fg:x="1264" fg:w="31"/><text x="87.5428%" y="639.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (27 samples, 1.86%)</title><rect x="87.5691%" y="613" width="1.8646%" height="15" fill="rgb(215,223,47)" fg:x="1268" fg:w="27"/><text x="87.8191%" y="623.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="89.5028%" y="613" width="0.1381%" height="15" fill="rgb(248,225,23)" fg:x="1296" fg:w="2"/><text x="89.7528%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="89.5028%" y="629" width="0.2072%" height="15" fill="rgb(250,108,0)" fg:x="1296" fg:w="3"/><text x="89.7528%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="89.6409%" y="613" width="0.0691%" height="15" fill="rgb(228,208,7)" fg:x="1298" fg:w="1"/><text x="89.8909%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="89.6409%" y="597" width="0.0691%" height="15" fill="rgb(244,45,10)" fg:x="1298" fg:w="1"/><text x="89.8909%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="89.7099%" y="629" width="0.0691%" height="15" fill="rgb(207,125,25)" fg:x="1299" fg:w="1"/><text x="89.9599%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="89.7790%" y="629" width="0.2072%" height="15" fill="rgb(210,195,18)" fg:x="1300" fg:w="3"/><text x="90.0290%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,290 samples, 89.09%)</title><rect x="1.9337%" y="661" width="89.0884%" height="15" fill="rgb(249,80,12)" fg:x="28" fg:w="1290"/><text x="2.1837%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (23 samples, 1.59%)</title><rect x="89.4337%" y="645" width="1.5884%" height="15" fill="rgb(221,65,9)" fg:x="1295" fg:w="23"/><text x="89.6837%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (15 samples, 1.04%)</title><rect x="89.9862%" y="629" width="1.0359%" height="15" fill="rgb(235,49,36)" fg:x="1303" fg:w="15"/><text x="90.2362%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,307 samples, 90.26%)</title><rect x="1.8646%" y="677" width="90.2624%" height="15" fill="rgb(225,32,20)" fg:x="27" fg:w="1307"/><text x="2.1146%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (16 samples, 1.10%)</title><rect x="91.0221%" y="661" width="1.1050%" height="15" fill="rgb(215,141,46)" fg:x="1318" fg:w="16"/><text x="91.2721%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (16 samples, 1.10%)</title><rect x="91.0221%" y="645" width="1.1050%" height="15" fill="rgb(250,160,47)" fg:x="1318" fg:w="16"/><text x="91.2721%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="92.1271%" y="661" width="0.0691%" height="15" fill="rgb(216,222,40)" fg:x="1334" fg:w="1"/><text x="92.3771%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="92.1271%" y="645" width="0.0691%" height="15" fill="rgb(234,217,39)" fg:x="1334" fg:w="1"/><text x="92.3771%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="92.1961%" y="661" width="0.0691%" height="15" fill="rgb(207,178,40)" fg:x="1335" fg:w="1"/><text x="92.4461%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,328 samples, 91.71%)</title><rect x="1.7265%" y="693" width="91.7127%" height="15" fill="rgb(221,136,13)" fg:x="25" fg:w="1328"/><text x="1.9765%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (19 samples, 1.31%)</title><rect x="92.1271%" y="677" width="1.3122%" height="15" fill="rgb(249,199,10)" fg:x="1334" fg:w="19"/><text x="92.3771%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (17 samples, 1.17%)</title><rect x="92.2652%" y="661" width="1.1740%" height="15" fill="rgb(249,222,13)" fg:x="1336" fg:w="17"/><text x="92.5152%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,337 samples, 92.33%)</title><rect x="1.7265%" y="709" width="92.3343%" height="15" fill="rgb(244,185,38)" fg:x="25" fg:w="1337"/><text x="1.9765%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 0.62%)</title><rect x="93.4392%" y="693" width="0.6215%" height="15" fill="rgb(236,202,9)" fg:x="1353" fg:w="9"/><text x="93.6892%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.62%)</title><rect x="93.4392%" y="677" width="0.6215%" height="15" fill="rgb(250,229,37)" fg:x="1353" fg:w="9"/><text x="93.6892%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,340 samples, 92.54%)</title><rect x="1.7265%" y="725" width="92.5414%" height="15" fill="rgb(206,174,23)" fg:x="25" fg:w="1340"/><text x="1.9765%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.21%)</title><rect x="94.0608%" y="709" width="0.2072%" height="15" fill="rgb(211,33,43)" fg:x="1362" fg:w="3"/><text x="94.3108%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.21%)</title><rect x="94.0608%" y="693" width="0.2072%" height="15" fill="rgb(245,58,50)" fg:x="1362" fg:w="3"/><text x="94.3108%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,344 samples, 92.82%)</title><rect x="1.7265%" y="741" width="92.8177%" height="15" fill="rgb(244,68,36)" fg:x="25" fg:w="1344"/><text x="1.9765%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.28%)</title><rect x="94.2680%" y="725" width="0.2762%" height="15" fill="rgb(232,229,15)" fg:x="1365" fg:w="4"/><text x="94.5180%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (4 samples, 0.28%)</title><rect x="94.2680%" y="709" width="0.2762%" height="15" fill="rgb(254,30,23)" fg:x="1365" fg:w="4"/><text x="94.5180%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,347 samples, 93.02%)</title><rect x="1.7265%" y="757" width="93.0249%" height="15" fill="rgb(235,160,14)" fg:x="25" fg:w="1347"/><text x="1.9765%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.21%)</title><rect x="94.5442%" y="741" width="0.2072%" height="15" fill="rgb(212,155,44)" fg:x="1369" fg:w="3"/><text x="94.7942%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (3 samples, 0.21%)</title><rect x="94.5442%" y="725" width="0.2072%" height="15" fill="rgb(226,2,50)" fg:x="1369" fg:w="3"/><text x="94.7942%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,349 samples, 93.16%)</title><rect x="1.7265%" y="773" width="93.1630%" height="15" fill="rgb(234,177,6)" fg:x="25" fg:w="1349"/><text x="1.9765%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="94.7514%" y="757" width="0.1381%" height="15" fill="rgb(217,24,9)" fg:x="1372" fg:w="2"/><text x="95.0014%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="94.7514%" y="741" width="0.1381%" height="15" fill="rgb(220,13,46)" fg:x="1372" fg:w="2"/><text x="95.0014%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,350 samples, 93.23%)</title><rect x="1.7265%" y="789" width="93.2320%" height="15" fill="rgb(239,221,27)" fg:x="25" fg:w="1350"/><text x="1.9765%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="94.8895%" y="773" width="0.0691%" height="15" fill="rgb(222,198,25)" fg:x="1374" fg:w="1"/><text x="95.1395%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="94.8895%" y="757" width="0.0691%" height="15" fill="rgb(211,99,13)" fg:x="1374" fg:w="1"/><text x="95.1395%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="94.8895%" y="741" width="0.0691%" height="15" fill="rgb(232,111,31)" fg:x="1374" fg:w="1"/><text x="95.1395%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="94.8895%" y="725" width="0.0691%" height="15" fill="rgb(245,82,37)" fg:x="1374" fg:w="1"/><text x="95.1395%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,352 samples, 93.37%)</title><rect x="1.7265%" y="805" width="93.3702%" height="15" fill="rgb(227,149,46)" fg:x="25" fg:w="1352"/><text x="1.9765%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.14%)</title><rect x="94.9586%" y="789" width="0.1381%" height="15" fill="rgb(218,36,50)" fg:x="1375" fg:w="2"/><text x="95.2086%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.14%)</title><rect x="94.9586%" y="773" width="0.1381%" height="15" fill="rgb(226,80,48)" fg:x="1375" fg:w="2"/><text x="95.2086%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,353 samples, 93.44%)</title><rect x="1.7265%" y="837" width="93.4392%" height="15" fill="rgb(238,224,15)" fg:x="25" fg:w="1353"/><text x="1.9765%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,353 samples, 93.44%)</title><rect x="1.7265%" y="821" width="93.4392%" height="15" fill="rgb(241,136,10)" fg:x="25" fg:w="1353"/><text x="1.9765%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.07%)</title><rect x="95.0967%" y="805" width="0.0691%" height="15" fill="rgb(208,32,45)" fg:x="1377" fg:w="1"/><text x="95.3467%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1 samples, 0.07%)</title><rect x="95.0967%" y="789" width="0.0691%" height="15" fill="rgb(207,135,9)" fg:x="1377" fg:w="1"/><text x="95.3467%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.14%)</title><rect x="97.8591%" y="789" width="0.1381%" height="15" fill="rgb(206,86,44)" fg:x="1417" fg:w="2"/><text x="98.1091%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="97.8591%" y="821" width="0.2072%" height="15" fill="rgb(245,177,15)" fg:x="1417" fg:w="3"/><text x="98.1091%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.21%)</title><rect x="97.8591%" y="805" width="0.2072%" height="15" fill="rgb(206,64,50)" fg:x="1417" fg:w="3"/><text x="98.1091%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="97.9972%" y="789" width="0.0691%" height="15" fill="rgb(234,36,40)" fg:x="1419" fg:w="1"/><text x="98.2472%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.21%)</title><rect x="98.0663%" y="821" width="0.2072%" height="15" fill="rgb(213,64,8)" fg:x="1420" fg:w="3"/><text x="98.3163%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.21%)</title><rect x="98.2735%" y="821" width="0.2072%" height="15" fill="rgb(210,75,36)" fg:x="1423" fg:w="3"/><text x="98.5235%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="98.4116%" y="805" width="0.0691%" height="15" fill="rgb(229,88,21)" fg:x="1425" fg:w="1"/><text x="98.6616%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="98.7569%" y="789" width="0.0691%" height="15" fill="rgb(252,204,47)" fg:x="1430" fg:w="1"/><text x="99.0069%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.14%)</title><rect x="98.8260%" y="789" width="0.1381%" height="15" fill="rgb(208,77,27)" fg:x="1431" fg:w="2"/><text x="99.0760%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="98.8950%" y="773" width="0.0691%" height="15" fill="rgb(221,76,26)" fg:x="1432" fg:w="1"/><text x="99.1450%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (56 samples, 3.87%)</title><rect x="95.1657%" y="837" width="3.8674%" height="15" fill="rgb(225,139,18)" fg:x="1378" fg:w="56"/><text x="95.4157%" y="847.50">sudo..</text></g><g><title>sudoku-solver`alloc::vec::from_elem (8 samples, 0.55%)</title><rect x="98.4807%" y="821" width="0.5525%" height="15" fill="rgb(230,137,11)" fg:x="1426" fg:w="8"/><text x="98.7307%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.48%)</title><rect x="98.5497%" y="805" width="0.4834%" height="15" fill="rgb(212,28,1)" fg:x="1427" fg:w="7"/><text x="98.7997%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.07%)</title><rect x="98.9641%" y="789" width="0.0691%" height="15" fill="rgb(248,164,17)" fg:x="1433" fg:w="1"/><text x="99.2141%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.07%)</title><rect x="98.9641%" y="773" width="0.0691%" height="15" fill="rgb(222,171,42)" fg:x="1433" fg:w="1"/><text x="99.2141%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="99.1713%" y="789" width="0.0691%" height="15" fill="rgb(243,84,45)" fg:x="1436" fg:w="1"/><text x="99.4213%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.55%)</title><rect x="99.2403%" y="741" width="0.5525%" height="15" fill="rgb(252,49,23)" fg:x="1437" fg:w="8"/><text x="99.4903%" y="751.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.62%)</title><rect x="99.2403%" y="773" width="0.6215%" height="15" fill="rgb(215,19,7)" fg:x="1437" fg:w="9"/><text x="99.4903%" y="783.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 0.62%)</title><rect x="99.2403%" y="757" width="0.6215%" height="15" fill="rgb(238,81,41)" fg:x="1437" fg:w="9"/><text x="99.4903%" y="767.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (1 samples, 0.07%)</title><rect x="99.7928%" y="741" width="0.0691%" height="15" fill="rgb(210,199,37)" fg:x="1445" fg:w="1"/><text x="100.0428%" y="751.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="99.8619%" y="773" width="0.0691%" height="15" fill="rgb(244,192,49)" fg:x="1446" fg:w="1"/><text x="100.1119%" y="783.50"></text></g><g><title>all (1,448 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="1448"/><text x="0.2500%" y="959.50"></text></g><g><title>dyld`start (1,448 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="1448"/><text x="0.2500%" y="943.50">dyld`start</text></g><g><title>sudoku-solver`main (1,447 samples, 99.93%)</title><rect x="0.0691%" y="917" width="99.9309%" height="15" fill="rgb(220,229,9)" fg:x="1" fg:w="1447"/><text x="0.3191%" y="927.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (1,447 samples, 99.93%)</title><rect x="0.0691%" y="901" width="99.9309%" height="15" fill="rgb(250,87,22)" fg:x="1" fg:w="1447"/><text x="0.3191%" y="911.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (1,447 samples, 99.93%)</title><rect x="0.0691%" y="885" width="99.9309%" height="15" fill="rgb(239,43,17)" fg:x="1" fg:w="1447"/><text x="0.3191%" y="895.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (1,447 samples, 99.93%)</title><rect x="0.0691%" y="869" width="99.9309%" height="15" fill="rgb(231,177,25)" fg:x="1" fg:w="1447"/><text x="0.3191%" y="879.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (1,445 samples, 99.79%)</title><rect x="0.2072%" y="853" width="99.7928%" height="15" fill="rgb(219,179,1)" fg:x="3" fg:w="1445"/><text x="0.4572%" y="863.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (14 samples, 0.97%)</title><rect x="99.0331%" y="837" width="0.9669%" height="15" fill="rgb(238,219,53)" fg:x="1434" fg:w="14"/><text x="99.2831%" y="847.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (13 samples, 0.90%)</title><rect x="99.1022%" y="821" width="0.8978%" height="15" fill="rgb(232,167,36)" fg:x="1435" fg:w="13"/><text x="99.3522%" y="831.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13 samples, 0.90%)</title><rect x="99.1022%" y="805" width="0.8978%" height="15" fill="rgb(244,19,51)" fg:x="1435" fg:w="13"/><text x="99.3522%" y="815.50"></text></g><g><title>sudoku-solver`core::fmt::write (11 samples, 0.76%)</title><rect x="99.2403%" y="789" width="0.7597%" height="15" fill="rgb(224,6,22)" fg:x="1437" fg:w="11"/><text x="99.4903%" y="799.50"></text></g><g><title>sudoku-solver`core::fmt::Write::write_char (1 samples, 0.07%)</title><rect x="99.9309%" y="773" width="0.0691%" height="15" fill="rgb(224,145,5)" fg:x="1447" fg:w="1"/><text x="100.1809%" y="783.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="99.9309%" y="757" width="0.0691%" height="15" fill="rgb(234,130,49)" fg:x="1447" fg:w="1"/><text x="100.1809%" y="767.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="99.9309%" y="741" width="0.0691%" height="15" fill="rgb(254,6,2)" fg:x="1447" fg:w="1"/><text x="100.1809%" y="751.50"></text></g></svg></svg>