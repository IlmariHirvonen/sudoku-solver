<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="3214"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (2 samples, 0.06%)</title><rect x="0.0000%" y="901" width="0.0622%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.06%)</title><rect x="0.0000%" y="885" width="0.0622%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="0.0622%" y="837" width="0.1245%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.3122%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="0.1867%" y="837" width="0.0311%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.4367%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="0.2178%" y="837" width="0.0311%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.4678%" y="847.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (3 samples, 0.09%)</title><rect x="0.2489%" y="837" width="0.0933%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="3"/><text x="0.4989%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="0.5600%" y="821" width="0.0311%" height="15" fill="rgb(207,160,47)" fg:x="18" fg:w="1"/><text x="0.8100%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.47%)</title><rect x="0.5912%" y="821" width="0.4667%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="15"/><text x="0.8412%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.25%)</title><rect x="0.8090%" y="805" width="0.2489%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="8"/><text x="1.0590%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="1.0579%" y="821" width="0.0311%" height="15" fill="rgb(220,122,19)" fg:x="34" fg:w="1"/><text x="1.3079%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1.0890%" y="805" width="0.0311%" height="15" fill="rgb(250,228,42)" fg:x="35" fg:w="1"/><text x="1.3390%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.16%)</title><rect x="1.0890%" y="821" width="0.1556%" height="15" fill="rgb(240,193,28)" fg:x="35" fg:w="5"/><text x="1.3390%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.12%)</title><rect x="1.1201%" y="805" width="0.1245%" height="15" fill="rgb(216,20,37)" fg:x="36" fg:w="4"/><text x="1.3701%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.09%)</title><rect x="1.1512%" y="789" width="0.0933%" height="15" fill="rgb(206,188,39)" fg:x="37" fg:w="3"/><text x="1.4012%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="1.2446%" y="821" width="0.0311%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="1"/><text x="1.4946%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.22%)</title><rect x="1.2757%" y="821" width="0.2178%" height="15" fill="rgb(231,73,38)" fg:x="41" fg:w="7"/><text x="1.5257%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="1.4935%" y="821" width="0.0311%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="1"/><text x="1.7435%" y="831.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.28%)</title><rect x="1.6801%" y="805" width="0.2800%" height="15" fill="rgb(210,31,41)" fg:x="54" fg:w="9"/><text x="1.9301%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="1.9602%" y="789" width="0.0311%" height="15" fill="rgb(221,200,47)" fg:x="63" fg:w="1"/><text x="2.2102%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="2.0535%" y="725" width="0.0311%" height="15" fill="rgb(226,26,5)" fg:x="66" fg:w="1"/><text x="2.3035%" y="735.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.59%)</title><rect x="1.5246%" y="821" width="0.5912%" height="15" fill="rgb(249,33,26)" fg:x="49" fg:w="19"/><text x="1.7746%" y="831.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.16%)</title><rect x="1.9602%" y="805" width="0.1556%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="5"/><text x="2.2102%" y="815.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="1.9913%" y="789" width="0.1245%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="4"/><text x="2.2413%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.12%)</title><rect x="1.9913%" y="773" width="0.1245%" height="15" fill="rgb(247,18,42)" fg:x="64" fg:w="4"/><text x="2.2413%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.12%)</title><rect x="1.9913%" y="757" width="0.1245%" height="15" fill="rgb(241,131,45)" fg:x="64" fg:w="4"/><text x="2.2413%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.12%)</title><rect x="1.9913%" y="741" width="0.1245%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="4"/><text x="2.2413%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.0846%" y="725" width="0.0311%" height="15" fill="rgb(225,111,53)" fg:x="67" fg:w="1"/><text x="2.3346%" y="735.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.09%)</title><rect x="2.1157%" y="821" width="0.0933%" height="15" fill="rgb(238,160,17)" fg:x="68" fg:w="3"/><text x="2.3657%" y="831.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (33 samples, 1.03%)</title><rect x="2.2091%" y="821" width="1.0268%" height="15" fill="rgb(214,148,48)" fg:x="71" fg:w="33"/><text x="2.4591%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.03%)</title><rect x="3.2358%" y="805" width="0.0311%" height="15" fill="rgb(232,36,49)" fg:x="104" fg:w="1"/><text x="3.4858%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.03%)</title><rect x="3.2358%" y="789" width="0.0311%" height="15" fill="rgb(209,103,24)" fg:x="104" fg:w="1"/><text x="3.4858%" y="799.50"></text></g><g><title>sudoku-solver`std::fs::read_to_string::inner (2 samples, 0.06%)</title><rect x="3.2358%" y="821" width="0.0622%" height="15" fill="rgb(229,88,8)" fg:x="104" fg:w="2"/><text x="3.4858%" y="831.50"></text></g><g><title>sudoku-solver`core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="3.2670%" y="805" width="0.0311%" height="15" fill="rgb(213,181,19)" fg:x="105" fg:w="1"/><text x="3.5170%" y="815.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (4 samples, 0.12%)</title><rect x="3.2981%" y="821" width="0.1245%" height="15" fill="rgb(254,191,54)" fg:x="106" fg:w="4"/><text x="3.5481%" y="831.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.09%)</title><rect x="3.3292%" y="805" width="0.0933%" height="15" fill="rgb(241,83,37)" fg:x="107" fg:w="3"/><text x="3.5792%" y="815.50"></text></g><g><title>sudoku-solver`core::fmt::write (3 samples, 0.09%)</title><rect x="3.3292%" y="789" width="0.0933%" height="15" fill="rgb(233,36,39)" fg:x="107" fg:w="3"/><text x="3.5792%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.09%)</title><rect x="3.3292%" y="773" width="0.0933%" height="15" fill="rgb(226,3,54)" fg:x="107" fg:w="3"/><text x="3.5792%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.09%)</title><rect x="3.3292%" y="757" width="0.0933%" height="15" fill="rgb(245,192,40)" fg:x="107" fg:w="3"/><text x="3.5792%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="3.4536%" y="773" width="0.0311%" height="15" fill="rgb(238,167,29)" fg:x="111" fg:w="1"/><text x="3.7036%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="3.5159%" y="757" width="0.0311%" height="15" fill="rgb(232,182,51)" fg:x="113" fg:w="1"/><text x="3.7659%" y="767.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="3.5781%" y="725" width="0.0311%" height="15" fill="rgb(231,60,39)" fg:x="115" fg:w="1"/><text x="3.8281%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="3.6714%" y="709" width="0.0311%" height="15" fill="rgb(208,69,12)" fg:x="118" fg:w="1"/><text x="3.9214%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="3.8892%" y="677" width="0.0311%" height="15" fill="rgb(235,93,37)" fg:x="125" fg:w="1"/><text x="4.1392%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="4.1070%" y="645" width="0.0311%" height="15" fill="rgb(213,116,39)" fg:x="132" fg:w="1"/><text x="4.3570%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="4.2937%" y="629" width="0.0311%" height="15" fill="rgb(222,207,29)" fg:x="138" fg:w="1"/><text x="4.5437%" y="639.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="4.3248%" y="629" width="0.0311%" height="15" fill="rgb(206,96,30)" fg:x="139" fg:w="1"/><text x="4.5748%" y="639.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="4.5115%" y="613" width="0.0311%" height="15" fill="rgb(218,138,4)" fg:x="145" fg:w="1"/><text x="4.7615%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="4.7604%" y="597" width="0.0311%" height="15" fill="rgb(250,191,14)" fg:x="153" fg:w="1"/><text x="5.0104%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="4.7915%" y="597" width="0.0311%" height="15" fill="rgb(239,60,40)" fg:x="154" fg:w="1"/><text x="5.0415%" y="607.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.03%)</title><rect x="4.8227%" y="597" width="0.0311%" height="15" fill="rgb(206,27,48)" fg:x="155" fg:w="1"/><text x="5.0727%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="4.9782%" y="581" width="0.0622%" height="15" fill="rgb(225,35,8)" fg:x="160" fg:w="2"/><text x="5.2282%" y="591.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="5.0404%" y="581" width="0.0311%" height="15" fill="rgb(250,213,24)" fg:x="162" fg:w="1"/><text x="5.2904%" y="591.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="5.0716%" y="581" width="0.0311%" height="15" fill="rgb(247,123,22)" fg:x="163" fg:w="1"/><text x="5.3216%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.09%)</title><rect x="5.3205%" y="549" width="0.0933%" height="15" fill="rgb(231,138,38)" fg:x="171" fg:w="3"/><text x="5.5705%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="5.4138%" y="549" width="0.0311%" height="15" fill="rgb(231,145,46)" fg:x="174" fg:w="1"/><text x="5.6638%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="5.5072%" y="533" width="0.0311%" height="15" fill="rgb(251,118,11)" fg:x="177" fg:w="1"/><text x="5.7572%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="5.6316%" y="517" width="0.0311%" height="15" fill="rgb(217,147,25)" fg:x="181" fg:w="1"/><text x="5.8816%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="5.7872%" y="501" width="0.0311%" height="15" fill="rgb(247,81,37)" fg:x="186" fg:w="1"/><text x="6.0372%" y="511.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.03%)</title><rect x="5.8183%" y="501" width="0.0311%" height="15" fill="rgb(209,12,38)" fg:x="187" fg:w="1"/><text x="6.0683%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="6.1294%" y="485" width="0.0622%" height="15" fill="rgb(227,1,9)" fg:x="197" fg:w="2"/><text x="6.3794%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="6.1917%" y="485" width="0.0311%" height="15" fill="rgb(248,47,43)" fg:x="199" fg:w="1"/><text x="6.4417%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="6.6584%" y="469" width="0.0311%" height="15" fill="rgb(221,10,30)" fg:x="214" fg:w="1"/><text x="6.9084%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="6.6895%" y="469" width="0.0311%" height="15" fill="rgb(210,229,1)" fg:x="215" fg:w="1"/><text x="6.9395%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="6.7206%" y="469" width="0.0311%" height="15" fill="rgb(222,148,37)" fg:x="216" fg:w="1"/><text x="6.9706%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="7.1562%" y="453" width="0.0622%" height="15" fill="rgb(234,67,33)" fg:x="230" fg:w="2"/><text x="7.4062%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.09%)</title><rect x="7.2184%" y="453" width="0.0933%" height="15" fill="rgb(247,98,35)" fg:x="232" fg:w="3"/><text x="7.4684%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="7.3118%" y="453" width="0.1556%" height="15" fill="rgb(247,138,52)" fg:x="235" fg:w="5"/><text x="7.5618%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="7.4673%" y="453" width="0.0622%" height="15" fill="rgb(213,79,30)" fg:x="240" fg:w="2"/><text x="7.7173%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="7.5296%" y="453" width="0.0311%" height="15" fill="rgb(246,177,23)" fg:x="242" fg:w="1"/><text x="7.7796%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="8.1829%" y="437" width="0.0311%" height="15" fill="rgb(230,62,27)" fg:x="263" fg:w="1"/><text x="8.4329%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="8.2141%" y="437" width="0.0622%" height="15" fill="rgb(216,154,8)" fg:x="264" fg:w="2"/><text x="8.4641%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="9.0853%" y="421" width="0.0622%" height="15" fill="rgb(244,35,45)" fg:x="292" fg:w="2"/><text x="9.3353%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="9.1475%" y="421" width="0.0622%" height="15" fill="rgb(251,115,12)" fg:x="294" fg:w="2"/><text x="9.3975%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="9.2097%" y="421" width="0.0311%" height="15" fill="rgb(240,54,50)" fg:x="296" fg:w="1"/><text x="9.4597%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="9.2408%" y="421" width="0.0311%" height="15" fill="rgb(233,84,52)" fg:x="297" fg:w="1"/><text x="9.4908%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="9.8631%" y="405" width="0.0622%" height="15" fill="rgb(207,117,47)" fg:x="317" fg:w="2"/><text x="10.1131%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="9.9253%" y="405" width="0.0311%" height="15" fill="rgb(249,43,39)" fg:x="319" fg:w="1"/><text x="10.1753%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="9.9564%" y="405" width="0.0311%" height="15" fill="rgb(209,38,44)" fg:x="320" fg:w="1"/><text x="10.2064%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="9.9876%" y="405" width="0.0311%" height="15" fill="rgb(236,212,23)" fg:x="321" fg:w="1"/><text x="10.2376%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="10.7343%" y="389" width="0.0622%" height="15" fill="rgb(242,79,21)" fg:x="345" fg:w="2"/><text x="10.9843%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="10.7965%" y="389" width="0.0933%" height="15" fill="rgb(211,96,35)" fg:x="347" fg:w="3"/><text x="11.0465%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="10.8899%" y="389" width="0.0311%" height="15" fill="rgb(253,215,40)" fg:x="350" fg:w="1"/><text x="11.1399%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="10.9210%" y="389" width="0.0311%" height="15" fill="rgb(211,81,21)" fg:x="351" fg:w="1"/><text x="11.1710%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="10.9521%" y="389" width="0.0311%" height="15" fill="rgb(208,190,38)" fg:x="352" fg:w="1"/><text x="11.2021%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="11.6055%" y="373" width="0.0622%" height="15" fill="rgb(235,213,38)" fg:x="373" fg:w="2"/><text x="11.8555%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="11.6677%" y="373" width="0.0622%" height="15" fill="rgb(237,122,38)" fg:x="375" fg:w="2"/><text x="11.9177%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="11.7299%" y="373" width="0.0311%" height="15" fill="rgb(244,218,35)" fg:x="377" fg:w="1"/><text x="11.9799%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (2 samples, 0.06%)</title><rect x="11.7610%" y="373" width="0.0622%" height="15" fill="rgb(240,68,47)" fg:x="378" fg:w="2"/><text x="12.0110%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.09%)</title><rect x="12.7256%" y="357" width="0.0933%" height="15" fill="rgb(210,16,53)" fg:x="409" fg:w="3"/><text x="12.9756%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="12.8189%" y="357" width="0.0311%" height="15" fill="rgb(235,124,12)" fg:x="412" fg:w="1"/><text x="13.0689%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="12.8500%" y="357" width="0.0311%" height="15" fill="rgb(224,169,11)" fg:x="413" fg:w="1"/><text x="13.1000%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="12.8811%" y="357" width="0.0311%" height="15" fill="rgb(250,166,2)" fg:x="414" fg:w="1"/><text x="13.1311%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="12.9123%" y="357" width="0.0311%" height="15" fill="rgb(242,216,29)" fg:x="415" fg:w="1"/><text x="13.1623%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.09%)</title><rect x="13.6279%" y="341" width="0.0933%" height="15" fill="rgb(230,116,27)" fg:x="438" fg:w="3"/><text x="13.8779%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="13.7212%" y="341" width="0.0622%" height="15" fill="rgb(228,99,48)" fg:x="441" fg:w="2"/><text x="13.9712%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="13.7834%" y="341" width="0.0311%" height="15" fill="rgb(253,11,6)" fg:x="443" fg:w="1"/><text x="14.0334%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="13.8146%" y="341" width="0.0311%" height="15" fill="rgb(247,143,39)" fg:x="444" fg:w="1"/><text x="14.0646%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="13.8457%" y="341" width="0.0311%" height="15" fill="rgb(236,97,10)" fg:x="445" fg:w="1"/><text x="14.0957%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="14.3435%" y="325" width="0.0311%" height="15" fill="rgb(233,208,19)" fg:x="461" fg:w="1"/><text x="14.5935%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="14.3746%" y="325" width="0.0311%" height="15" fill="rgb(216,164,2)" fg:x="462" fg:w="1"/><text x="14.6246%" y="335.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="14.4057%" y="325" width="0.0622%" height="15" fill="rgb(220,129,5)" fg:x="463" fg:w="2"/><text x="14.6557%" y="335.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="14.4680%" y="325" width="0.0311%" height="15" fill="rgb(242,17,10)" fg:x="465" fg:w="1"/><text x="14.7180%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="15.0280%" y="309" width="0.0622%" height="15" fill="rgb(242,107,0)" fg:x="483" fg:w="2"/><text x="15.2780%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="15.0902%" y="309" width="0.0933%" height="15" fill="rgb(251,28,31)" fg:x="485" fg:w="3"/><text x="15.3402%" y="319.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="15.1836%" y="309" width="0.0311%" height="15" fill="rgb(233,223,10)" fg:x="488" fg:w="1"/><text x="15.4336%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="15.5258%" y="293" width="0.0311%" height="15" fill="rgb(215,21,27)" fg:x="499" fg:w="1"/><text x="15.7758%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="15.7436%" y="277" width="0.0311%" height="15" fill="rgb(232,23,21)" fg:x="506" fg:w="1"/><text x="15.9936%" y="287.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="15.9303%" y="229" width="0.0311%" height="15" fill="rgb(244,5,23)" fg:x="512" fg:w="1"/><text x="16.1803%" y="239.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.03%)</title><rect x="16.0236%" y="197" width="0.0311%" height="15" fill="rgb(226,81,46)" fg:x="515" fg:w="1"/><text x="16.2736%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="16.0548%" y="165" width="0.0311%" height="15" fill="rgb(247,70,30)" fg:x="516" fg:w="1"/><text x="16.3048%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.03%)</title><rect x="16.1481%" y="85" width="0.0311%" height="15" fill="rgb(212,68,19)" fg:x="519" fg:w="1"/><text x="16.3981%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.03%)</title><rect x="16.1481%" y="69" width="0.0311%" height="15" fill="rgb(240,187,13)" fg:x="519" fg:w="1"/><text x="16.3981%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.03%)</title><rect x="16.1481%" y="53" width="0.0311%" height="15" fill="rgb(223,113,26)" fg:x="519" fg:w="1"/><text x="16.3981%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.03%)</title><rect x="16.1481%" y="37" width="0.0311%" height="15" fill="rgb(206,192,2)" fg:x="519" fg:w="1"/><text x="16.3981%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.09%)</title><rect x="16.1481%" y="101" width="0.0933%" height="15" fill="rgb(241,108,4)" fg:x="519" fg:w="3"/><text x="16.3981%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.06%)</title><rect x="16.1792%" y="85" width="0.0622%" height="15" fill="rgb(247,173,49)" fg:x="520" fg:w="2"/><text x="16.4292%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (6 samples, 0.19%)</title><rect x="16.1481%" y="117" width="0.1867%" height="15" fill="rgb(224,114,35)" fg:x="519" fg:w="6"/><text x="16.3981%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.09%)</title><rect x="16.2414%" y="101" width="0.0933%" height="15" fill="rgb(245,159,27)" fg:x="522" fg:w="3"/><text x="16.4914%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12 samples, 0.37%)</title><rect x="16.1481%" y="133" width="0.3734%" height="15" fill="rgb(245,172,44)" fg:x="519" fg:w="12"/><text x="16.3981%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.19%)</title><rect x="16.3348%" y="117" width="0.1867%" height="15" fill="rgb(236,23,11)" fg:x="525" fg:w="6"/><text x="16.5848%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="16.4904%" y="101" width="0.0311%" height="15" fill="rgb(205,117,38)" fg:x="530" fg:w="1"/><text x="16.7404%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (20 samples, 0.62%)</title><rect x="16.1170%" y="149" width="0.6223%" height="15" fill="rgb(237,72,25)" fg:x="518" fg:w="20"/><text x="16.3670%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (7 samples, 0.22%)</title><rect x="16.5215%" y="133" width="0.2178%" height="15" fill="rgb(244,70,9)" fg:x="531" fg:w="7"/><text x="16.7715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="16.9571%" y="133" width="0.0311%" height="15" fill="rgb(217,125,39)" fg:x="545" fg:w="1"/><text x="17.2071%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="16.9571%" y="117" width="0.0311%" height="15" fill="rgb(235,36,10)" fg:x="545" fg:w="1"/><text x="17.2071%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (31 samples, 0.96%)</title><rect x="16.0859%" y="165" width="0.9645%" height="15" fill="rgb(251,123,47)" fg:x="517" fg:w="31"/><text x="16.3359%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.31%)</title><rect x="16.7393%" y="149" width="0.3111%" height="15" fill="rgb(221,13,13)" fg:x="538" fg:w="10"/><text x="16.9893%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="16.9882%" y="133" width="0.0622%" height="15" fill="rgb(238,131,9)" fg:x="546" fg:w="2"/><text x="17.2382%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="17.0193%" y="117" width="0.0311%" height="15" fill="rgb(211,50,8)" fg:x="547" fg:w="1"/><text x="17.2693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="17.2371%" y="149" width="0.0622%" height="15" fill="rgb(245,182,24)" fg:x="554" fg:w="2"/><text x="17.4871%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="17.2682%" y="133" width="0.0311%" height="15" fill="rgb(242,14,37)" fg:x="555" fg:w="1"/><text x="17.5182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="17.2682%" y="117" width="0.0311%" height="15" fill="rgb(246,228,12)" fg:x="555" fg:w="1"/><text x="17.5182%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="17.2682%" y="101" width="0.0311%" height="15" fill="rgb(213,55,15)" fg:x="555" fg:w="1"/><text x="17.5182%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (41 samples, 1.28%)</title><rect x="16.0548%" y="181" width="1.2757%" height="15" fill="rgb(209,9,3)" fg:x="516" fg:w="41"/><text x="16.3048%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 0.28%)</title><rect x="17.0504%" y="165" width="0.2800%" height="15" fill="rgb(230,59,30)" fg:x="548" fg:w="9"/><text x="17.3004%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="17.2993%" y="149" width="0.0311%" height="15" fill="rgb(209,121,21)" fg:x="556" fg:w="1"/><text x="17.5493%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="17.2993%" y="133" width="0.0311%" height="15" fill="rgb(220,109,13)" fg:x="556" fg:w="1"/><text x="17.5493%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (57 samples, 1.77%)</title><rect x="16.0548%" y="197" width="1.7735%" height="15" fill="rgb(232,18,1)" fg:x="516" fg:w="57"/><text x="16.3048%" y="207.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (16 samples, 0.50%)</title><rect x="17.3304%" y="181" width="0.4978%" height="15" fill="rgb(215,41,42)" fg:x="557" fg:w="16"/><text x="17.5804%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="18.2950%" y="181" width="0.0622%" height="15" fill="rgb(224,123,36)" fg:x="588" fg:w="2"/><text x="18.5450%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="18.3261%" y="165" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="589" fg:w="1"/><text x="18.5761%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="18.3261%" y="149" width="0.0311%" height="15" fill="rgb(205,98,50)" fg:x="589" fg:w="1"/><text x="18.5761%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (77 samples, 2.40%)</title><rect x="15.9925%" y="213" width="2.3958%" height="15" fill="rgb(205,185,37)" fg:x="514" fg:w="77"/><text x="16.2425%" y="223.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 0.56%)</title><rect x="17.8283%" y="197" width="0.5600%" height="15" fill="rgb(238,207,15)" fg:x="573" fg:w="18"/><text x="18.0783%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="18.3572%" y="181" width="0.0311%" height="15" fill="rgb(213,199,42)" fg:x="590" fg:w="1"/><text x="18.6072%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="18.6994%" y="197" width="0.0622%" height="15" fill="rgb(235,201,11)" fg:x="601" fg:w="2"/><text x="18.9494%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="18.7306%" y="181" width="0.0311%" height="15" fill="rgb(207,46,11)" fg:x="602" fg:w="1"/><text x="18.9806%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="18.7306%" y="165" width="0.0311%" height="15" fill="rgb(241,35,35)" fg:x="602" fg:w="1"/><text x="18.9806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="18.7306%" y="149" width="0.0311%" height="15" fill="rgb(243,32,47)" fg:x="602" fg:w="1"/><text x="18.9806%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="18.7617%" y="197" width="0.0311%" height="15" fill="rgb(247,202,23)" fg:x="603" fg:w="1"/><text x="19.0117%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (92 samples, 2.86%)</title><rect x="15.9614%" y="229" width="2.8625%" height="15" fill="rgb(219,102,11)" fg:x="513" fg:w="92"/><text x="16.2114%" y="239.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (14 samples, 0.44%)</title><rect x="18.3883%" y="213" width="0.4356%" height="15" fill="rgb(243,110,44)" fg:x="591" fg:w="14"/><text x="18.6383%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="18.7928%" y="197" width="0.0311%" height="15" fill="rgb(222,74,54)" fg:x="604" fg:w="1"/><text x="19.0428%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (105 samples, 3.27%)</title><rect x="15.8992%" y="245" width="3.2670%" height="15" fill="rgb(216,99,12)" fg:x="511" fg:w="105"/><text x="16.1492%" y="255.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.34%)</title><rect x="18.8239%" y="229" width="0.3423%" height="15" fill="rgb(226,22,26)" fg:x="605" fg:w="11"/><text x="19.0739%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="19.1039%" y="213" width="0.0622%" height="15" fill="rgb(217,163,10)" fg:x="614" fg:w="2"/><text x="19.3539%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="19.5084%" y="197" width="0.0311%" height="15" fill="rgb(213,25,53)" fg:x="627" fg:w="1"/><text x="19.7584%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="19.5084%" y="229" width="0.0622%" height="15" fill="rgb(252,105,26)" fg:x="627" fg:w="2"/><text x="19.7584%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="19.5084%" y="213" width="0.0622%" height="15" fill="rgb(220,39,43)" fg:x="627" fg:w="2"/><text x="19.7584%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="19.5395%" y="197" width="0.0311%" height="15" fill="rgb(229,68,48)" fg:x="628" fg:w="1"/><text x="19.7895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="19.5706%" y="229" width="0.0311%" height="15" fill="rgb(252,8,32)" fg:x="629" fg:w="1"/><text x="19.8206%" y="239.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (122 samples, 3.80%)</title><rect x="15.8681%" y="261" width="3.7959%" height="15" fill="rgb(223,20,43)" fg:x="510" fg:w="122"/><text x="16.1181%" y="271.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (16 samples, 0.50%)</title><rect x="19.1661%" y="245" width="0.4978%" height="15" fill="rgb(229,81,49)" fg:x="616" fg:w="16"/><text x="19.4161%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="19.6017%" y="229" width="0.0622%" height="15" fill="rgb(236,28,36)" fg:x="630" fg:w="2"/><text x="19.8517%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="19.6329%" y="213" width="0.0311%" height="15" fill="rgb(249,185,26)" fg:x="631" fg:w="1"/><text x="19.8829%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="20.3174%" y="245" width="0.0622%" height="15" fill="rgb(249,174,33)" fg:x="653" fg:w="2"/><text x="20.5674%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="20.3174%" y="229" width="0.0622%" height="15" fill="rgb(233,201,37)" fg:x="653" fg:w="2"/><text x="20.5674%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="20.3174%" y="213" width="0.0622%" height="15" fill="rgb(221,78,26)" fg:x="653" fg:w="2"/><text x="20.5674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="20.3796%" y="245" width="0.0311%" height="15" fill="rgb(250,127,30)" fg:x="655" fg:w="1"/><text x="20.6296%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (154 samples, 4.79%)</title><rect x="15.7747%" y="277" width="4.7915%" height="15" fill="rgb(230,49,44)" fg:x="507" fg:w="154"/><text x="16.0247%" y="287.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (29 samples, 0.90%)</title><rect x="19.6640%" y="261" width="0.9023%" height="15" fill="rgb(229,67,23)" fg:x="632" fg:w="29"/><text x="19.9140%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="20.4107%" y="245" width="0.1556%" height="15" fill="rgb(249,83,47)" fg:x="656" fg:w="5"/><text x="20.6607%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="20.4729%" y="229" width="0.0933%" height="15" fill="rgb(215,43,3)" fg:x="658" fg:w="3"/><text x="20.7229%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="21.2508%" y="261" width="0.0933%" height="15" fill="rgb(238,154,13)" fg:x="683" fg:w="3"/><text x="21.5008%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="21.2819%" y="245" width="0.0622%" height="15" fill="rgb(219,56,2)" fg:x="684" fg:w="2"/><text x="21.5319%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="21.2819%" y="229" width="0.0622%" height="15" fill="rgb(233,0,4)" fg:x="684" fg:w="2"/><text x="21.5319%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="21.3130%" y="213" width="0.0311%" height="15" fill="rgb(235,30,7)" fg:x="685" fg:w="1"/><text x="21.5630%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="21.3441%" y="261" width="0.1556%" height="15" fill="rgb(250,79,13)" fg:x="686" fg:w="5"/><text x="21.5941%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="21.4686%" y="245" width="0.0311%" height="15" fill="rgb(211,146,34)" fg:x="690" fg:w="1"/><text x="21.7186%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="21.4997%" y="261" width="0.0311%" height="15" fill="rgb(228,22,38)" fg:x="691" fg:w="1"/><text x="21.7497%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (194 samples, 6.04%)</title><rect x="15.5569%" y="293" width="6.0361%" height="15" fill="rgb(235,168,5)" fg:x="500" fg:w="194"/><text x="15.8069%" y="303.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (33 samples, 1.03%)</title><rect x="20.5663%" y="277" width="1.0268%" height="15" fill="rgb(221,155,16)" fg:x="661" fg:w="33"/><text x="20.8163%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="21.5308%" y="261" width="0.0622%" height="15" fill="rgb(215,215,53)" fg:x="692" fg:w="2"/><text x="21.7808%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="22.6509%" y="277" width="0.0933%" height="15" fill="rgb(223,4,10)" fg:x="728" fg:w="3"/><text x="22.9009%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="22.6820%" y="261" width="0.0622%" height="15" fill="rgb(234,103,6)" fg:x="729" fg:w="2"/><text x="22.9320%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="22.6820%" y="245" width="0.0622%" height="15" fill="rgb(227,97,0)" fg:x="729" fg:w="2"/><text x="22.9320%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="22.7442%" y="277" width="0.0311%" height="15" fill="rgb(234,150,53)" fg:x="731" fg:w="1"/><text x="22.9942%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="22.7754%" y="277" width="0.1245%" height="15" fill="rgb(228,201,54)" fg:x="732" fg:w="4"/><text x="23.0254%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="22.8065%" y="261" width="0.0933%" height="15" fill="rgb(222,22,37)" fg:x="733" fg:w="3"/><text x="23.0565%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="22.8998%" y="277" width="0.0311%" height="15" fill="rgb(237,53,32)" fg:x="736" fg:w="1"/><text x="23.1498%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="22.9309%" y="277" width="0.0311%" height="15" fill="rgb(233,25,53)" fg:x="737" fg:w="1"/><text x="23.1809%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (250 samples, 7.78%)</title><rect x="15.2147%" y="309" width="7.7785%" height="15" fill="rgb(210,40,34)" fg:x="489" fg:w="250"/><text x="15.4647%" y="319.50">sudoku-solv..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (45 samples, 1.40%)</title><rect x="21.5930%" y="293" width="1.4001%" height="15" fill="rgb(241,220,44)" fg:x="694" fg:w="45"/><text x="21.8430%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="22.9620%" y="277" width="0.0311%" height="15" fill="rgb(235,28,35)" fg:x="738" fg:w="1"/><text x="23.2120%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="24.5800%" y="293" width="0.0933%" height="15" fill="rgb(210,56,17)" fg:x="790" fg:w="3"/><text x="24.8300%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="24.6111%" y="277" width="0.0622%" height="15" fill="rgb(224,130,29)" fg:x="791" fg:w="2"/><text x="24.8611%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="24.6111%" y="261" width="0.0622%" height="15" fill="rgb(235,212,8)" fg:x="791" fg:w="2"/><text x="24.8611%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="24.6111%" y="245" width="0.0622%" height="15" fill="rgb(223,33,50)" fg:x="791" fg:w="2"/><text x="24.8611%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="24.6733%" y="293" width="0.0311%" height="15" fill="rgb(219,149,13)" fg:x="793" fg:w="1"/><text x="24.9233%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.31%)</title><rect x="24.7044%" y="293" width="0.3111%" height="15" fill="rgb(250,156,29)" fg:x="794" fg:w="10"/><text x="24.9544%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="24.9533%" y="277" width="0.0622%" height="15" fill="rgb(216,193,19)" fg:x="802" fg:w="2"/><text x="25.2033%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.09%)</title><rect x="25.0156%" y="293" width="0.0933%" height="15" fill="rgb(216,135,14)" fg:x="804" fg:w="3"/><text x="25.2656%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (342 samples, 10.64%)</title><rect x="14.4991%" y="325" width="10.6409%" height="15" fill="rgb(241,47,5)" fg:x="466" fg:w="342"/><text x="14.7491%" y="335.50">sudoku-solver`su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (69 samples, 2.15%)</title><rect x="22.9932%" y="309" width="2.1469%" height="15" fill="rgb(233,42,35)" fg:x="739" fg:w="69"/><text x="23.2432%" y="319.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="25.1089%" y="293" width="0.0311%" height="15" fill="rgb(231,13,6)" fg:x="807" fg:w="1"/><text x="25.3589%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.34%)</title><rect x="28.1892%" y="277" width="0.3423%" height="15" fill="rgb(207,181,40)" fg:x="906" fg:w="11"/><text x="28.4392%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="28.5003%" y="261" width="0.0311%" height="15" fill="rgb(254,173,49)" fg:x="916" fg:w="1"/><text x="28.7503%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.53%)</title><rect x="28.0336%" y="309" width="0.5289%" height="15" fill="rgb(221,1,38)" fg:x="901" fg:w="17"/><text x="28.2836%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.47%)</title><rect x="28.0958%" y="293" width="0.4667%" height="15" fill="rgb(206,124,46)" fg:x="903" fg:w="15"/><text x="28.3458%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="28.5314%" y="277" width="0.0311%" height="15" fill="rgb(249,21,11)" fg:x="917" fg:w="1"/><text x="28.7814%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.25%)</title><rect x="28.7181%" y="293" width="0.2489%" height="15" fill="rgb(222,201,40)" fg:x="923" fg:w="8"/><text x="28.9681%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.44%)</title><rect x="28.5625%" y="309" width="0.4356%" height="15" fill="rgb(235,61,29)" fg:x="918" fg:w="14"/><text x="28.8125%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="28.9670%" y="293" width="0.0311%" height="15" fill="rgb(219,207,3)" fg:x="931" fg:w="1"/><text x="29.2170%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.12%)</title><rect x="28.9981%" y="309" width="0.1245%" height="15" fill="rgb(222,56,46)" fg:x="932" fg:w="4"/><text x="29.2481%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (491 samples, 15.28%)</title><rect x="13.8768%" y="341" width="15.2769%" height="15" fill="rgb(239,76,54)" fg:x="446" fg:w="491"/><text x="14.1268%" y="351.50">sudoku-solver`sudoku_so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (129 samples, 4.01%)</title><rect x="25.1400%" y="325" width="4.0137%" height="15" fill="rgb(231,124,27)" fg:x="808" fg:w="129"/><text x="25.3900%" y="335.50">sudo..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="29.1226%" y="309" width="0.0311%" height="15" fill="rgb(249,195,6)" fg:x="936" fg:w="1"/><text x="29.3726%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="32.5762%" y="309" width="0.0311%" height="15" fill="rgb(237,174,47)" fg:x="1047" fg:w="1"/><text x="32.8262%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.16%)</title><rect x="32.6073%" y="293" width="0.1556%" height="15" fill="rgb(206,201,31)" fg:x="1048" fg:w="5"/><text x="32.8573%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.28%)</title><rect x="32.5140%" y="325" width="0.2800%" height="15" fill="rgb(231,57,52)" fg:x="1045" fg:w="9"/><text x="32.7640%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.19%)</title><rect x="32.6073%" y="309" width="0.1867%" height="15" fill="rgb(248,177,22)" fg:x="1048" fg:w="6"/><text x="32.8573%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="32.7629%" y="293" width="0.0311%" height="15" fill="rgb(215,211,37)" fg:x="1053" fg:w="1"/><text x="33.0129%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="32.7940%" y="325" width="0.0622%" height="15" fill="rgb(241,128,51)" fg:x="1054" fg:w="2"/><text x="33.0440%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="33.2607%" y="309" width="0.0933%" height="15" fill="rgb(227,165,31)" fg:x="1069" fg:w="3"/><text x="33.5107%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.53%)</title><rect x="32.8563%" y="325" width="0.5289%" height="15" fill="rgb(228,167,24)" fg:x="1056" fg:w="17"/><text x="33.1063%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="33.3541%" y="309" width="0.0311%" height="15" fill="rgb(228,143,12)" fg:x="1072" fg:w="1"/><text x="33.6041%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="33.3852%" y="325" width="0.0622%" height="15" fill="rgb(249,149,8)" fg:x="1073" fg:w="2"/><text x="33.6352%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.25%)</title><rect x="33.4474%" y="325" width="0.2489%" height="15" fill="rgb(243,35,44)" fg:x="1075" fg:w="8"/><text x="33.6974%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (670 samples, 20.85%)</title><rect x="12.9434%" y="357" width="20.8463%" height="15" fill="rgb(246,89,9)" fg:x="416" fg:w="670"/><text x="13.1934%" y="367.50">sudoku-solver`sudoku_solver::back..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (149 samples, 4.64%)</title><rect x="29.1537%" y="341" width="4.6360%" height="15" fill="rgb(233,213,13)" fg:x="937" fg:w="149"/><text x="29.4037%" y="351.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="33.6963%" y="325" width="0.0933%" height="15" fill="rgb(233,141,41)" fg:x="1083" fg:w="3"/><text x="33.9463%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="37.2122%" y="325" width="0.0311%" height="15" fill="rgb(239,167,4)" fg:x="1196" fg:w="1"/><text x="37.4622%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.22%)</title><rect x="37.3055%" y="309" width="0.2178%" height="15" fill="rgb(209,217,16)" fg:x="1199" fg:w="7"/><text x="37.5555%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.12%)</title><rect x="37.3989%" y="293" width="0.1245%" height="15" fill="rgb(219,88,35)" fg:x="1202" fg:w="4"/><text x="37.6489%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.44%)</title><rect x="37.1500%" y="341" width="0.4356%" height="15" fill="rgb(220,193,23)" fg:x="1194" fg:w="14"/><text x="37.4000%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.34%)</title><rect x="37.2433%" y="325" width="0.3423%" height="15" fill="rgb(230,90,52)" fg:x="1197" fg:w="11"/><text x="37.4933%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="37.5233%" y="309" width="0.0622%" height="15" fill="rgb(252,106,19)" fg:x="1206" fg:w="2"/><text x="37.7733%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="37.5856%" y="341" width="0.0311%" height="15" fill="rgb(206,74,20)" fg:x="1208" fg:w="1"/><text x="37.8356%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.12%)</title><rect x="37.6478%" y="325" width="0.1245%" height="15" fill="rgb(230,138,44)" fg:x="1210" fg:w="4"/><text x="37.8978%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.19%)</title><rect x="37.6167%" y="341" width="0.1867%" height="15" fill="rgb(235,182,43)" fg:x="1209" fg:w="6"/><text x="37.8667%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="37.7722%" y="325" width="0.0311%" height="15" fill="rgb(242,16,51)" fg:x="1214" fg:w="1"/><text x="38.0222%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.16%)</title><rect x="37.8034%" y="341" width="0.1556%" height="15" fill="rgb(248,9,4)" fg:x="1215" fg:w="5"/><text x="38.0534%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="37.9589%" y="341" width="0.0622%" height="15" fill="rgb(210,31,22)" fg:x="1220" fg:w="2"/><text x="38.2089%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (843 samples, 26.23%)</title><rect x="11.8233%" y="373" width="26.2290%" height="15" fill="rgb(239,54,39)" fg:x="380" fg:w="843"/><text x="12.0733%" y="383.50">sudoku-solver`sudoku_solver::backtraking::..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (137 samples, 4.26%)</title><rect x="33.7897%" y="357" width="4.2626%" height="15" fill="rgb(230,99,41)" fg:x="1086" fg:w="137"/><text x="34.0397%" y="367.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="38.0212%" y="341" width="0.0311%" height="15" fill="rgb(253,106,12)" fg:x="1222" fg:w="1"/><text x="38.2712%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.28%)</title><rect x="42.2215%" y="325" width="0.2800%" height="15" fill="rgb(213,46,41)" fg:x="1357" fg:w="9"/><text x="42.4715%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="42.4393%" y="309" width="0.0622%" height="15" fill="rgb(215,133,35)" fg:x="1364" fg:w="2"/><text x="42.6893%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.68%)</title><rect x="41.8482%" y="357" width="0.6845%" height="15" fill="rgb(213,28,5)" fg:x="1345" fg:w="22"/><text x="42.0982%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.47%)</title><rect x="42.0660%" y="341" width="0.4667%" height="15" fill="rgb(215,77,49)" fg:x="1352" fg:w="15"/><text x="42.3160%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="42.5016%" y="325" width="0.0311%" height="15" fill="rgb(248,100,22)" fg:x="1366" fg:w="1"/><text x="42.7516%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="42.5327%" y="357" width="0.0311%" height="15" fill="rgb(208,67,9)" fg:x="1367" fg:w="1"/><text x="42.7827%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.44%)</title><rect x="42.5638%" y="357" width="0.4356%" height="15" fill="rgb(219,133,21)" fg:x="1368" fg:w="14"/><text x="42.8138%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.12%)</title><rect x="42.8749%" y="341" width="0.1245%" height="15" fill="rgb(246,46,29)" fg:x="1378" fg:w="4"/><text x="43.1249%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="42.9994%" y="357" width="0.0311%" height="15" fill="rgb(246,185,52)" fg:x="1382" fg:w="1"/><text x="43.2494%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.22%)</title><rect x="43.0305%" y="357" width="0.2178%" height="15" fill="rgb(252,136,11)" fg:x="1383" fg:w="7"/><text x="43.2805%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="43.2483%" y="357" width="0.0311%" height="15" fill="rgb(219,138,53)" fg:x="1390" fg:w="1"/><text x="43.4983%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,040 samples, 32.36%)</title><rect x="10.9832%" y="389" width="32.3584%" height="15" fill="rgb(211,51,23)" fg:x="353" fg:w="1040"/><text x="11.2332%" y="399.50">sudoku-solver`sudoku_solver::backtraking::backtrakin..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (170 samples, 5.29%)</title><rect x="38.0523%" y="373" width="5.2894%" height="15" fill="rgb(247,221,28)" fg:x="1223" fg:w="170"/><text x="38.3023%" y="383.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="43.2794%" y="357" width="0.0622%" height="15" fill="rgb(251,222,45)" fg:x="1391" fg:w="2"/><text x="43.5294%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="47.4487%" y="357" width="0.0311%" height="15" fill="rgb(217,162,53)" fg:x="1525" fg:w="1"/><text x="47.6987%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.16%)</title><rect x="47.5109%" y="341" width="0.1556%" height="15" fill="rgb(229,93,14)" fg:x="1527" fg:w="5"/><text x="47.7609%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="47.6353%" y="325" width="0.0311%" height="15" fill="rgb(209,67,49)" fg:x="1531" fg:w="1"/><text x="47.8853%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.59%)</title><rect x="47.2309%" y="373" width="0.5912%" height="15" fill="rgb(213,87,29)" fg:x="1518" fg:w="19"/><text x="47.4809%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.34%)</title><rect x="47.4798%" y="357" width="0.3423%" height="15" fill="rgb(205,151,52)" fg:x="1526" fg:w="11"/><text x="47.7298%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.16%)</title><rect x="47.6665%" y="341" width="0.1556%" height="15" fill="rgb(253,215,39)" fg:x="1532" fg:w="5"/><text x="47.9165%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.28%)</title><rect x="47.8220%" y="373" width="0.2800%" height="15" fill="rgb(221,220,41)" fg:x="1537" fg:w="9"/><text x="48.0720%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.12%)</title><rect x="47.9776%" y="357" width="0.1245%" height="15" fill="rgb(218,133,21)" fg:x="1542" fg:w="4"/><text x="48.2276%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,230 samples, 38.27%)</title><rect x="10.0187%" y="405" width="38.2701%" height="15" fill="rgb(221,193,43)" fg:x="322" fg:w="1230"/><text x="10.2687%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (159 samples, 4.95%)</title><rect x="43.3416%" y="389" width="4.9471%" height="15" fill="rgb(240,128,52)" fg:x="1393" fg:w="159"/><text x="43.5916%" y="399.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.19%)</title><rect x="48.1021%" y="373" width="0.1867%" height="15" fill="rgb(253,114,12)" fg:x="1546" fg:w="6"/><text x="48.3521%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="52.8936%" y="373" width="0.0311%" height="15" fill="rgb(215,223,47)" fg:x="1700" fg:w="1"/><text x="53.1436%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.72%)</title><rect x="52.6758%" y="389" width="0.7156%" height="15" fill="rgb(248,225,23)" fg:x="1693" fg:w="23"/><text x="52.9258%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.47%)</title><rect x="52.9247%" y="373" width="0.4667%" height="15" fill="rgb(250,108,0)" fg:x="1701" fg:w="15"/><text x="53.1747%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.34%)</title><rect x="53.0492%" y="357" width="0.3423%" height="15" fill="rgb(228,208,7)" fg:x="1705" fg:w="11"/><text x="53.2992%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.12%)</title><rect x="53.2670%" y="341" width="0.1245%" height="15" fill="rgb(244,45,10)" fg:x="1712" fg:w="4"/><text x="53.5170%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="53.3914%" y="389" width="0.0933%" height="15" fill="rgb(207,125,25)" fg:x="1716" fg:w="3"/><text x="53.6414%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.19%)</title><rect x="53.7337%" y="373" width="0.1867%" height="15" fill="rgb(210,195,18)" fg:x="1727" fg:w="6"/><text x="53.9837%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.50%)</title><rect x="53.4848%" y="389" width="0.4978%" height="15" fill="rgb(249,80,12)" fg:x="1719" fg:w="16"/><text x="53.7348%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="53.9203%" y="373" width="0.0622%" height="15" fill="rgb(221,65,9)" fg:x="1733" fg:w="2"/><text x="54.1703%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="53.9826%" y="389" width="0.0622%" height="15" fill="rgb(235,49,36)" fg:x="1735" fg:w="2"/><text x="54.2326%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,442 samples, 44.87%)</title><rect x="9.2719%" y="421" width="44.8662%" height="15" fill="rgb(225,32,20)" fg:x="298" fg:w="1442"/><text x="9.5219%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (188 samples, 5.85%)</title><rect x="48.2887%" y="405" width="5.8494%" height="15" fill="rgb(215,141,46)" fg:x="1552" fg:w="188"/><text x="48.5387%" y="415.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="54.0448%" y="389" width="0.0933%" height="15" fill="rgb(250,160,47)" fg:x="1737" fg:w="3"/><text x="54.2948%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="60.0809%" y="389" width="0.0311%" height="15" fill="rgb(216,222,40)" fg:x="1931" fg:w="1"/><text x="60.3309%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.47%)</title><rect x="60.2054%" y="373" width="0.4667%" height="15" fill="rgb(234,217,39)" fg:x="1935" fg:w="15"/><text x="60.4554%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.12%)</title><rect x="60.5476%" y="357" width="0.1245%" height="15" fill="rgb(207,178,40)" fg:x="1946" fg:w="4"/><text x="60.7976%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.78%)</title><rect x="59.9253%" y="405" width="0.7778%" height="15" fill="rgb(221,136,13)" fg:x="1926" fg:w="25"/><text x="60.1753%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.59%)</title><rect x="60.1120%" y="389" width="0.5912%" height="15" fill="rgb(249,199,10)" fg:x="1932" fg:w="19"/><text x="60.3620%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="60.6721%" y="373" width="0.0311%" height="15" fill="rgb(249,222,13)" fg:x="1950" fg:w="1"/><text x="60.9221%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="60.7032%" y="405" width="0.0622%" height="15" fill="rgb(244,185,38)" fg:x="1951" fg:w="2"/><text x="60.9532%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.53%)</title><rect x="61.1699%" y="389" width="0.5289%" height="15" fill="rgb(236,202,9)" fg:x="1966" fg:w="17"/><text x="61.4199%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.96%)</title><rect x="60.7654%" y="405" width="0.9645%" height="15" fill="rgb(250,229,37)" fg:x="1953" fg:w="31"/><text x="61.0154%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="61.6988%" y="389" width="0.0311%" height="15" fill="rgb(206,174,23)" fg:x="1983" fg:w="1"/><text x="61.9488%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="61.7299%" y="405" width="0.0311%" height="15" fill="rgb(211,33,43)" fg:x="1984" fg:w="1"/><text x="61.9799%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,725 samples, 53.67%)</title><rect x="8.2763%" y="437" width="53.6714%" height="15" fill="rgb(245,58,50)" fg:x="266" fg:w="1725"/><text x="8.5263%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (251 samples, 7.81%)</title><rect x="54.1381%" y="421" width="7.8096%" height="15" fill="rgb(244,68,36)" fg:x="1740" fg:w="251"/><text x="54.3881%" y="431.50">sudoku-solv..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.19%)</title><rect x="61.7610%" y="405" width="0.1867%" height="15" fill="rgb(232,229,15)" fg:x="1985" fg:w="6"/><text x="62.0110%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.44%)</title><rect x="66.9259%" y="389" width="0.4356%" height="15" fill="rgb(254,30,23)" fg:x="2151" fg:w="14"/><text x="67.1759%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="67.2682%" y="373" width="0.0933%" height="15" fill="rgb(235,160,14)" fg:x="2162" fg:w="3"/><text x="67.5182%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.84%)</title><rect x="66.5837%" y="421" width="0.8401%" height="15" fill="rgb(212,155,44)" fg:x="2140" fg:w="27"/><text x="66.8337%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.56%)</title><rect x="66.8637%" y="405" width="0.5600%" height="15" fill="rgb(226,2,50)" fg:x="2149" fg:w="18"/><text x="67.1137%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="67.3615%" y="389" width="0.0622%" height="15" fill="rgb(234,177,6)" fg:x="2165" fg:w="2"/><text x="67.6115%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="67.4238%" y="421" width="0.0311%" height="15" fill="rgb(217,24,9)" fg:x="2167" fg:w="1"/><text x="67.6738%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.65%)</title><rect x="67.4549%" y="421" width="0.6534%" height="15" fill="rgb(220,13,46)" fg:x="2168" fg:w="21"/><text x="67.7049%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.19%)</title><rect x="67.9216%" y="405" width="0.1867%" height="15" fill="rgb(239,221,27)" fg:x="2183" fg:w="6"/><text x="68.1716%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.31%)</title><rect x="68.1083%" y="421" width="0.3111%" height="15" fill="rgb(222,198,25)" fg:x="2189" fg:w="10"/><text x="68.3583%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,957 samples, 60.89%)</title><rect x="7.5607%" y="453" width="60.8899%" height="15" fill="rgb(211,99,13)" fg:x="243" fg:w="1957"/><text x="7.8107%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (209 samples, 6.50%)</title><rect x="61.9477%" y="437" width="6.5028%" height="15" fill="rgb(232,111,31)" fg:x="1991" fg:w="209"/><text x="62.1977%" y="447.50">sudoku-so..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="68.4194%" y="421" width="0.0311%" height="15" fill="rgb(245,82,37)" fg:x="2199" fg:w="1"/><text x="68.6694%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="71.9353%" y="421" width="0.0311%" height="15" fill="rgb(227,149,46)" fg:x="2312" fg:w="1"/><text x="72.1853%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.53%)</title><rect x="71.8731%" y="437" width="0.5289%" height="15" fill="rgb(218,36,50)" fg:x="2310" fg:w="17"/><text x="72.1231%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.44%)</title><rect x="71.9664%" y="421" width="0.4356%" height="15" fill="rgb(226,80,48)" fg:x="2313" fg:w="14"/><text x="72.2164%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.22%)</title><rect x="72.1842%" y="405" width="0.2178%" height="15" fill="rgb(238,224,15)" fg:x="2320" fg:w="7"/><text x="72.4342%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="72.3398%" y="389" width="0.0622%" height="15" fill="rgb(241,136,10)" fg:x="2325" fg:w="2"/><text x="72.5898%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.19%)</title><rect x="72.4020%" y="437" width="0.1867%" height="15" fill="rgb(208,32,45)" fg:x="2327" fg:w="6"/><text x="72.6520%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="72.5264%" y="421" width="0.0622%" height="15" fill="rgb(207,135,9)" fg:x="2331" fg:w="2"/><text x="72.7764%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="72.5887%" y="437" width="0.0311%" height="15" fill="rgb(206,86,44)" fg:x="2333" fg:w="1"/><text x="72.8387%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.25%)</title><rect x="72.6198%" y="437" width="0.2489%" height="15" fill="rgb(245,177,15)" fg:x="2334" fg:w="8"/><text x="72.8698%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,127 samples, 66.18%)</title><rect x="6.7517%" y="469" width="66.1792%" height="15" fill="rgb(206,64,50)" fg:x="217" fg:w="2127"/><text x="7.0017%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (144 samples, 4.48%)</title><rect x="68.4505%" y="453" width="4.4804%" height="15" fill="rgb(234,36,40)" fg:x="2200" fg:w="144"/><text x="68.7005%" y="463.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="72.8687%" y="437" width="0.0622%" height="15" fill="rgb(213,64,8)" fg:x="2342" fg:w="2"/><text x="73.1187%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="75.1089%" y="437" width="0.0311%" height="15" fill="rgb(210,75,36)" fg:x="2414" fg:w="1"/><text x="75.3589%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.12%)</title><rect x="75.1711%" y="421" width="0.1245%" height="15" fill="rgb(229,88,21)" fg:x="2416" fg:w="4"/><text x="75.4211%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.34%)</title><rect x="75.0156%" y="453" width="0.3423%" height="15" fill="rgb(252,204,47)" fg:x="2411" fg:w="11"/><text x="75.2656%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.22%)</title><rect x="75.1400%" y="437" width="0.2178%" height="15" fill="rgb(208,77,27)" fg:x="2415" fg:w="7"/><text x="75.3900%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="75.2956%" y="421" width="0.0622%" height="15" fill="rgb(221,76,26)" fg:x="2420" fg:w="2"/><text x="75.5456%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="75.3578%" y="453" width="0.0311%" height="15" fill="rgb(225,139,18)" fg:x="2422" fg:w="1"/><text x="75.6078%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="75.3889%" y="453" width="0.1556%" height="15" fill="rgb(230,137,11)" fg:x="2423" fg:w="5"/><text x="75.6389%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="75.5134%" y="437" width="0.0311%" height="15" fill="rgb(212,28,1)" fg:x="2427" fg:w="1"/><text x="75.7634%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="75.5445%" y="453" width="0.0311%" height="15" fill="rgb(248,164,17)" fg:x="2428" fg:w="1"/><text x="75.7945%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.16%)</title><rect x="75.5756%" y="453" width="0.1556%" height="15" fill="rgb(222,171,42)" fg:x="2429" fg:w="5"/><text x="75.8256%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,235 samples, 69.54%)</title><rect x="6.2228%" y="485" width="69.5395%" height="15" fill="rgb(243,84,45)" fg:x="200" fg:w="2235"/><text x="6.4728%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (91 samples, 2.83%)</title><rect x="72.9309%" y="469" width="2.8314%" height="15" fill="rgb(252,49,23)" fg:x="2344" fg:w="91"/><text x="73.1809%" y="479.50">su..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="75.7312%" y="453" width="0.0311%" height="15" fill="rgb(215,19,7)" fg:x="2434" fg:w="1"/><text x="75.9812%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.16%)</title><rect x="77.0691%" y="469" width="0.1556%" height="15" fill="rgb(238,81,41)" fg:x="2477" fg:w="5"/><text x="77.3191%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="77.1624%" y="453" width="0.0622%" height="15" fill="rgb(210,199,37)" fg:x="2480" fg:w="2"/><text x="77.4124%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="77.1624%" y="437" width="0.0622%" height="15" fill="rgb(244,192,49)" fg:x="2480" fg:w="2"/><text x="77.4124%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="77.1935%" y="421" width="0.0311%" height="15" fill="rgb(226,211,11)" fg:x="2481" fg:w="1"/><text x="77.4435%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="77.2246%" y="469" width="0.0311%" height="15" fill="rgb(236,162,54)" fg:x="2482" fg:w="1"/><text x="77.4746%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.22%)</title><rect x="77.2558%" y="469" width="0.2178%" height="15" fill="rgb(220,229,9)" fg:x="2483" fg:w="7"/><text x="77.5058%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="77.3802%" y="453" width="0.0933%" height="15" fill="rgb(250,87,22)" fg:x="2487" fg:w="3"/><text x="77.6302%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="77.4736%" y="469" width="0.0622%" height="15" fill="rgb(239,43,17)" fg:x="2490" fg:w="2"/><text x="77.7236%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,305 samples, 71.72%)</title><rect x="5.8494%" y="501" width="71.7175%" height="15" fill="rgb(231,177,25)" fg:x="188" fg:w="2305"/><text x="6.0994%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (58 samples, 1.80%)</title><rect x="75.7623%" y="485" width="1.8046%" height="15" fill="rgb(219,179,1)" fg:x="2435" fg:w="58"/><text x="76.0123%" y="495.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="77.5358%" y="469" width="0.0311%" height="15" fill="rgb(238,219,53)" fg:x="2492" fg:w="1"/><text x="77.7858%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="78.8737%" y="453" width="0.0622%" height="15" fill="rgb(232,167,36)" fg:x="2535" fg:w="2"/><text x="79.1237%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="78.9048%" y="437" width="0.0311%" height="15" fill="rgb(244,19,51)" fg:x="2536" fg:w="1"/><text x="79.1548%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.19%)</title><rect x="78.8114%" y="485" width="0.1867%" height="15" fill="rgb(224,6,22)" fg:x="2533" fg:w="6"/><text x="79.0614%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.16%)</title><rect x="78.8426%" y="469" width="0.1556%" height="15" fill="rgb(224,145,5)" fg:x="2534" fg:w="5"/><text x="79.0926%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="78.9359%" y="453" width="0.0622%" height="15" fill="rgb(234,130,49)" fg:x="2537" fg:w="2"/><text x="79.1859%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="78.9981%" y="485" width="0.0933%" height="15" fill="rgb(254,6,2)" fg:x="2539" fg:w="3"/><text x="79.2481%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="79.0604%" y="469" width="0.0311%" height="15" fill="rgb(208,96,46)" fg:x="2541" fg:w="1"/><text x="79.3104%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,361 samples, 73.46%)</title><rect x="5.6627%" y="517" width="73.4599%" height="15" fill="rgb(239,3,39)" fg:x="182" fg:w="2361"/><text x="5.9127%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (50 samples, 1.56%)</title><rect x="77.5669%" y="501" width="1.5557%" height="15" fill="rgb(233,210,1)" fg:x="2493" fg:w="50"/><text x="77.8169%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="79.0915%" y="485" width="0.0311%" height="15" fill="rgb(244,137,37)" fg:x="2542" fg:w="1"/><text x="79.3415%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="80.2116%" y="485" width="0.0311%" height="15" fill="rgb(240,136,2)" fg:x="2578" fg:w="1"/><text x="80.4616%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="80.2427%" y="469" width="0.0622%" height="15" fill="rgb(239,18,37)" fg:x="2579" fg:w="2"/><text x="80.4927%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.19%)</title><rect x="80.1493%" y="501" width="0.1867%" height="15" fill="rgb(218,185,22)" fg:x="2576" fg:w="6"/><text x="80.3993%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="80.2427%" y="485" width="0.0933%" height="15" fill="rgb(225,218,4)" fg:x="2579" fg:w="3"/><text x="80.4927%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="80.3049%" y="469" width="0.0311%" height="15" fill="rgb(230,182,32)" fg:x="2581" fg:w="1"/><text x="80.5549%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="80.3360%" y="501" width="0.0933%" height="15" fill="rgb(242,56,43)" fg:x="2582" fg:w="3"/><text x="80.5860%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="80.3983%" y="485" width="0.0311%" height="15" fill="rgb(233,99,24)" fg:x="2584" fg:w="1"/><text x="80.6483%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="80.4294%" y="501" width="0.0622%" height="15" fill="rgb(234,209,42)" fg:x="2585" fg:w="2"/><text x="80.6794%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,410 samples, 74.98%)</title><rect x="5.5383%" y="533" width="74.9844%" height="15" fill="rgb(227,7,12)" fg:x="178" fg:w="2410"/><text x="5.7883%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (45 samples, 1.40%)</title><rect x="79.1226%" y="517" width="1.4001%" height="15" fill="rgb(245,203,43)" fg:x="2543" fg:w="45"/><text x="79.3726%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="80.4916%" y="501" width="0.0311%" height="15" fill="rgb(238,205,33)" fg:x="2587" fg:w="1"/><text x="80.7416%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="80.9894%" y="517" width="0.0622%" height="15" fill="rgb(231,56,7)" fg:x="2603" fg:w="2"/><text x="81.2394%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="81.0205%" y="501" width="0.0311%" height="15" fill="rgb(244,186,29)" fg:x="2604" fg:w="1"/><text x="81.2705%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="81.0205%" y="485" width="0.0311%" height="15" fill="rgb(234,111,31)" fg:x="2604" fg:w="1"/><text x="81.2705%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="81.0516%" y="517" width="0.0311%" height="15" fill="rgb(241,149,10)" fg:x="2605" fg:w="1"/><text x="81.3016%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="81.0828%" y="517" width="0.0622%" height="15" fill="rgb(249,206,44)" fg:x="2606" fg:w="2"/><text x="81.3328%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="81.1139%" y="501" width="0.0311%" height="15" fill="rgb(251,153,30)" fg:x="2607" fg:w="1"/><text x="81.3639%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,434 samples, 75.73%)</title><rect x="5.4449%" y="549" width="75.7312%" height="15" fill="rgb(239,152,38)" fg:x="175" fg:w="2434"/><text x="5.6949%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (21 samples, 0.65%)</title><rect x="80.5227%" y="533" width="0.6534%" height="15" fill="rgb(249,139,47)" fg:x="2588" fg:w="21"/><text x="80.7727%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="81.1450%" y="517" width="0.0311%" height="15" fill="rgb(244,64,35)" fg:x="2608" fg:w="1"/><text x="81.3950%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="81.6739%" y="533" width="0.0622%" height="15" fill="rgb(216,46,15)" fg:x="2625" fg:w="2"/><text x="81.9239%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="81.6739%" y="517" width="0.0622%" height="15" fill="rgb(250,74,19)" fg:x="2625" fg:w="2"/><text x="81.9239%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="81.7050%" y="501" width="0.0311%" height="15" fill="rgb(249,42,33)" fg:x="2626" fg:w="1"/><text x="81.9550%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="81.7362%" y="533" width="0.1245%" height="15" fill="rgb(242,149,17)" fg:x="2627" fg:w="4"/><text x="81.9862%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="81.7984%" y="517" width="0.0622%" height="15" fill="rgb(244,29,21)" fg:x="2629" fg:w="2"/><text x="82.0484%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,466 samples, 76.73%)</title><rect x="5.1960%" y="565" width="76.7268%" height="15" fill="rgb(220,130,37)" fg:x="167" fg:w="2466"/><text x="5.4460%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (24 samples, 0.75%)</title><rect x="81.1761%" y="549" width="0.7467%" height="15" fill="rgb(211,67,2)" fg:x="2609" fg:w="24"/><text x="81.4261%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="81.8606%" y="533" width="0.0622%" height="15" fill="rgb(235,68,52)" fg:x="2631" fg:w="2"/><text x="82.1106%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="82.5140%" y="549" width="0.0622%" height="15" fill="rgb(246,142,3)" fg:x="2652" fg:w="2"/><text x="82.7640%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="82.5451%" y="533" width="0.0311%" height="15" fill="rgb(241,25,7)" fg:x="2653" fg:w="1"/><text x="82.7951%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="82.5451%" y="517" width="0.0311%" height="15" fill="rgb(242,119,39)" fg:x="2653" fg:w="1"/><text x="82.7951%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="82.5762%" y="549" width="0.1245%" height="15" fill="rgb(241,98,45)" fg:x="2654" fg:w="4"/><text x="82.8262%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="82.6385%" y="533" width="0.0622%" height="15" fill="rgb(254,28,30)" fg:x="2656" fg:w="2"/><text x="82.8885%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="82.7007%" y="549" width="0.0622%" height="15" fill="rgb(241,142,54)" fg:x="2658" fg:w="2"/><text x="82.9507%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,497 samples, 77.69%)</title><rect x="5.1027%" y="581" width="77.6914%" height="15" fill="rgb(222,85,15)" fg:x="164" fg:w="2497"/><text x="5.3527%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (28 samples, 0.87%)</title><rect x="81.9228%" y="565" width="0.8712%" height="15" fill="rgb(210,85,47)" fg:x="2633" fg:w="28"/><text x="82.1728%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="82.7629%" y="549" width="0.0311%" height="15" fill="rgb(224,206,25)" fg:x="2660" fg:w="1"/><text x="83.0129%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="83.5408%" y="549" width="0.0311%" height="15" fill="rgb(243,201,19)" fg:x="2685" fg:w="1"/><text x="83.7908%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.16%)</title><rect x="83.5719%" y="533" width="0.1556%" height="15" fill="rgb(236,59,4)" fg:x="2686" fg:w="5"/><text x="83.8219%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.22%)</title><rect x="83.5408%" y="565" width="0.2178%" height="15" fill="rgb(254,179,45)" fg:x="2685" fg:w="7"/><text x="83.7908%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.19%)</title><rect x="83.5719%" y="549" width="0.1867%" height="15" fill="rgb(226,14,10)" fg:x="2686" fg:w="6"/><text x="83.8219%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="83.7274%" y="533" width="0.0311%" height="15" fill="rgb(244,27,41)" fg:x="2691" fg:w="1"/><text x="83.9774%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="83.7586%" y="565" width="0.0311%" height="15" fill="rgb(235,35,32)" fg:x="2692" fg:w="1"/><text x="84.0086%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="83.7586%" y="549" width="0.0311%" height="15" fill="rgb(218,68,31)" fg:x="2692" fg:w="1"/><text x="84.0086%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,538 samples, 78.97%)</title><rect x="4.8538%" y="597" width="78.9670%" height="15" fill="rgb(207,120,37)" fg:x="156" fg:w="2538"/><text x="5.1038%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (33 samples, 1.03%)</title><rect x="82.7940%" y="581" width="1.0268%" height="15" fill="rgb(227,98,0)" fg:x="2661" fg:w="33"/><text x="83.0440%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="83.7897%" y="565" width="0.0311%" height="15" fill="rgb(207,7,3)" fg:x="2693" fg:w="1"/><text x="84.0397%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="84.7542%" y="581" width="0.0933%" height="15" fill="rgb(206,98,19)" fg:x="2724" fg:w="3"/><text x="85.0042%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="84.8164%" y="565" width="0.0311%" height="15" fill="rgb(217,5,26)" fg:x="2726" fg:w="1"/><text x="85.0664%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.19%)</title><rect x="84.8475%" y="581" width="0.1867%" height="15" fill="rgb(235,190,38)" fg:x="2727" fg:w="6"/><text x="85.0975%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="85.0031%" y="565" width="0.0311%" height="15" fill="rgb(247,86,24)" fg:x="2732" fg:w="1"/><text x="85.2531%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="85.0342%" y="581" width="0.0311%" height="15" fill="rgb(205,101,16)" fg:x="2733" fg:w="1"/><text x="85.2842%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,589 samples, 80.55%)</title><rect x="4.5426%" y="613" width="80.5538%" height="15" fill="rgb(246,168,33)" fg:x="146" fg:w="2589"/><text x="4.7926%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (41 samples, 1.28%)</title><rect x="83.8208%" y="597" width="1.2757%" height="15" fill="rgb(231,114,1)" fg:x="2694" fg:w="41"/><text x="84.0708%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="85.0653%" y="581" width="0.0311%" height="15" fill="rgb(207,184,53)" fg:x="2734" fg:w="1"/><text x="85.3153%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="86.0610%" y="597" width="0.0933%" height="15" fill="rgb(224,95,51)" fg:x="2766" fg:w="3"/><text x="86.3110%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="86.0921%" y="581" width="0.0622%" height="15" fill="rgb(212,188,45)" fg:x="2767" fg:w="2"/><text x="86.3421%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="86.0921%" y="565" width="0.0622%" height="15" fill="rgb(223,154,38)" fg:x="2767" fg:w="2"/><text x="86.3421%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="86.0921%" y="549" width="0.0622%" height="15" fill="rgb(251,22,52)" fg:x="2767" fg:w="2"/><text x="86.3421%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,633 samples, 81.92%)</title><rect x="4.3559%" y="629" width="81.9228%" height="15" fill="rgb(229,209,22)" fg:x="140" fg:w="2633"/><text x="4.6059%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (38 samples, 1.18%)</title><rect x="85.0965%" y="613" width="1.1823%" height="15" fill="rgb(234,138,34)" fg:x="2735" fg:w="38"/><text x="85.3465%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="86.1543%" y="597" width="0.1245%" height="15" fill="rgb(212,95,11)" fg:x="2769" fg:w="4"/><text x="86.4043%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="86.1854%" y="581" width="0.0933%" height="15" fill="rgb(240,179,47)" fg:x="2770" fg:w="3"/><text x="86.4354%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="87.0877%" y="581" width="0.0933%" height="15" fill="rgb(240,163,11)" fg:x="2799" fg:w="3"/><text x="87.3377%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="87.1500%" y="565" width="0.0311%" height="15" fill="rgb(236,37,12)" fg:x="2801" fg:w="1"/><text x="87.4000%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.22%)</title><rect x="86.9944%" y="613" width="0.2178%" height="15" fill="rgb(232,164,16)" fg:x="2796" fg:w="7"/><text x="87.2444%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.19%)</title><rect x="87.0255%" y="597" width="0.1867%" height="15" fill="rgb(244,205,15)" fg:x="2797" fg:w="6"/><text x="87.2755%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="87.1811%" y="581" width="0.0311%" height="15" fill="rgb(223,117,47)" fg:x="2802" fg:w="1"/><text x="87.4311%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.16%)</title><rect x="87.2122%" y="613" width="0.1556%" height="15" fill="rgb(244,107,35)" fg:x="2803" fg:w="5"/><text x="87.4622%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="87.3367%" y="597" width="0.0311%" height="15" fill="rgb(205,140,8)" fg:x="2807" fg:w="1"/><text x="87.5867%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="87.3678%" y="613" width="0.0311%" height="15" fill="rgb(228,84,46)" fg:x="2808" fg:w="1"/><text x="87.6178%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="87.3989%" y="613" width="0.0311%" height="15" fill="rgb(254,188,9)" fg:x="2809" fg:w="1"/><text x="87.6489%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,678 samples, 83.32%)</title><rect x="4.1381%" y="645" width="83.3230%" height="15" fill="rgb(206,112,54)" fg:x="133" fg:w="2678"/><text x="4.3881%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (38 samples, 1.18%)</title><rect x="86.2788%" y="629" width="1.1823%" height="15" fill="rgb(216,84,49)" fg:x="2773" fg:w="38"/><text x="86.5288%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="87.4300%" y="613" width="0.0311%" height="15" fill="rgb(214,194,35)" fg:x="2810" fg:w="1"/><text x="87.6800%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="88.1456%" y="629" width="0.1245%" height="15" fill="rgb(249,28,3)" fg:x="2833" fg:w="4"/><text x="88.3956%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.12%)</title><rect x="88.1456%" y="613" width="0.1245%" height="15" fill="rgb(222,56,52)" fg:x="2833" fg:w="4"/><text x="88.3956%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="88.2078%" y="597" width="0.0622%" height="15" fill="rgb(245,217,50)" fg:x="2835" fg:w="2"/><text x="88.4578%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="88.2701%" y="629" width="0.0622%" height="15" fill="rgb(213,201,24)" fg:x="2837" fg:w="2"/><text x="88.5201%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="88.3012%" y="613" width="0.0311%" height="15" fill="rgb(248,116,28)" fg:x="2838" fg:w="1"/><text x="88.5512%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,714 samples, 84.44%)</title><rect x="3.9515%" y="661" width="84.4431%" height="15" fill="rgb(219,72,43)" fg:x="127" fg:w="2714"/><text x="4.2015%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (30 samples, 0.93%)</title><rect x="87.4611%" y="645" width="0.9334%" height="15" fill="rgb(209,138,14)" fg:x="2811" fg:w="30"/><text x="87.7111%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="88.3323%" y="629" width="0.0622%" height="15" fill="rgb(222,18,33)" fg:x="2839" fg:w="2"/><text x="88.5823%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="88.8612%" y="645" width="0.1245%" height="15" fill="rgb(213,199,7)" fg:x="2856" fg:w="4"/><text x="89.1112%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="88.9235%" y="629" width="0.0622%" height="15" fill="rgb(250,110,10)" fg:x="2858" fg:w="2"/><text x="89.1735%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="88.9235%" y="613" width="0.0622%" height="15" fill="rgb(248,123,6)" fg:x="2858" fg:w="2"/><text x="89.1735%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="88.9546%" y="597" width="0.0311%" height="15" fill="rgb(206,91,31)" fg:x="2859" fg:w="1"/><text x="89.2046%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="88.9857%" y="645" width="0.0622%" height="15" fill="rgb(211,154,13)" fg:x="2860" fg:w="2"/><text x="89.2357%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,737 samples, 85.16%)</title><rect x="3.9203%" y="677" width="85.1587%" height="15" fill="rgb(225,148,7)" fg:x="126" fg:w="2737"/><text x="4.1703%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 0.68%)</title><rect x="88.3945%" y="661" width="0.6845%" height="15" fill="rgb(220,160,43)" fg:x="2841" fg:w="22"/><text x="88.6445%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="89.0479%" y="645" width="0.0311%" height="15" fill="rgb(213,52,39)" fg:x="2862" fg:w="1"/><text x="89.2979%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="89.3902%" y="661" width="0.1245%" height="15" fill="rgb(243,137,7)" fg:x="2873" fg:w="4"/><text x="89.6402%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="89.4213%" y="645" width="0.0933%" height="15" fill="rgb(230,79,13)" fg:x="2874" fg:w="3"/><text x="89.6713%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="89.4213%" y="629" width="0.0933%" height="15" fill="rgb(247,105,23)" fg:x="2874" fg:w="3"/><text x="89.6713%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="89.4835%" y="613" width="0.0311%" height="15" fill="rgb(223,179,41)" fg:x="2876" fg:w="1"/><text x="89.7335%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,758 samples, 85.81%)</title><rect x="3.7959%" y="693" width="85.8121%" height="15" fill="rgb(218,9,34)" fg:x="122" fg:w="2758"/><text x="4.0459%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (17 samples, 0.53%)</title><rect x="89.0790%" y="677" width="0.5289%" height="15" fill="rgb(222,106,8)" fg:x="2863" fg:w="17"/><text x="89.3290%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="89.5146%" y="661" width="0.0933%" height="15" fill="rgb(211,220,0)" fg:x="2877" fg:w="3"/><text x="89.7646%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="89.5457%" y="645" width="0.0622%" height="15" fill="rgb(229,52,16)" fg:x="2878" fg:w="2"/><text x="89.7957%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="89.9191%" y="677" width="0.0622%" height="15" fill="rgb(212,155,18)" fg:x="2890" fg:w="2"/><text x="90.1691%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="89.9191%" y="661" width="0.0622%" height="15" fill="rgb(242,21,14)" fg:x="2890" fg:w="2"/><text x="90.1691%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="89.9502%" y="645" width="0.0311%" height="15" fill="rgb(222,19,48)" fg:x="2891" fg:w="1"/><text x="90.2002%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,774 samples, 86.31%)</title><rect x="3.7026%" y="709" width="86.3099%" height="15" fill="rgb(232,45,27)" fg:x="119" fg:w="2774"/><text x="3.9526%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (13 samples, 0.40%)</title><rect x="89.6080%" y="693" width="0.4045%" height="15" fill="rgb(249,103,42)" fg:x="2880" fg:w="13"/><text x="89.8580%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="89.9813%" y="677" width="0.0311%" height="15" fill="rgb(246,81,33)" fg:x="2892" fg:w="1"/><text x="90.2313%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="89.9813%" y="661" width="0.0311%" height="15" fill="rgb(252,33,42)" fg:x="2892" fg:w="1"/><text x="90.2313%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,783 samples, 86.59%)</title><rect x="3.6092%" y="725" width="86.5899%" height="15" fill="rgb(209,212,41)" fg:x="116" fg:w="2783"/><text x="3.8592%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (6 samples, 0.19%)</title><rect x="90.0124%" y="709" width="0.1867%" height="15" fill="rgb(207,154,6)" fg:x="2893" fg:w="6"/><text x="90.2624%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,788 samples, 86.75%)</title><rect x="3.5470%" y="741" width="86.7455%" height="15" fill="rgb(223,64,47)" fg:x="114" fg:w="2788"/><text x="3.7970%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.09%)</title><rect x="90.1991%" y="725" width="0.0933%" height="15" fill="rgb(211,161,38)" fg:x="2899" fg:w="3"/><text x="90.4491%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,795 samples, 86.96%)</title><rect x="3.5470%" y="757" width="86.9633%" height="15" fill="rgb(219,138,40)" fg:x="114" fg:w="2795"/><text x="3.7970%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (7 samples, 0.22%)</title><rect x="90.2925%" y="741" width="0.2178%" height="15" fill="rgb(241,228,46)" fg:x="2902" fg:w="7"/><text x="90.5425%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="90.4169%" y="725" width="0.0933%" height="15" fill="rgb(223,209,38)" fg:x="2906" fg:w="3"/><text x="90.6669%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="90.4480%" y="709" width="0.0622%" height="15" fill="rgb(236,164,45)" fg:x="2907" fg:w="2"/><text x="90.6980%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,800 samples, 87.12%)</title><rect x="3.4848%" y="773" width="87.1189%" height="15" fill="rgb(231,15,5)" fg:x="112" fg:w="2800"/><text x="3.7348%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.09%)</title><rect x="90.5103%" y="757" width="0.0933%" height="15" fill="rgb(252,35,15)" fg:x="2909" fg:w="3"/><text x="90.7603%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="90.5725%" y="741" width="0.0311%" height="15" fill="rgb(248,181,18)" fg:x="2911" fg:w="1"/><text x="90.8225%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,804 samples, 87.24%)</title><rect x="3.4225%" y="821" width="87.2433%" height="15" fill="rgb(233,39,42)" fg:x="110" fg:w="2804"/><text x="3.6725%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,803 samples, 87.21%)</title><rect x="3.4536%" y="805" width="87.2122%" height="15" fill="rgb(238,110,33)" fg:x="111" fg:w="2803"/><text x="3.7036%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,803 samples, 87.21%)</title><rect x="3.4536%" y="789" width="87.2122%" height="15" fill="rgb(233,195,10)" fg:x="111" fg:w="2803"/><text x="3.7036%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.06%)</title><rect x="90.6036%" y="773" width="0.0622%" height="15" fill="rgb(254,105,3)" fg:x="2912" fg:w="2"/><text x="90.8536%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="90.6347%" y="757" width="0.0311%" height="15" fill="rgb(221,225,9)" fg:x="2913" fg:w="1"/><text x="90.8847%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.37%)</title><rect x="96.9197%" y="805" width="0.3734%" height="15" fill="rgb(224,227,45)" fg:x="3115" fg:w="12"/><text x="97.1697%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.25%)</title><rect x="97.0442%" y="789" width="0.2489%" height="15" fill="rgb(229,198,43)" fg:x="3119" fg:w="8"/><text x="97.2942%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.22%)</title><rect x="97.0753%" y="773" width="0.2178%" height="15" fill="rgb(206,209,35)" fg:x="3120" fg:w="7"/><text x="97.3253%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="97.2309%" y="757" width="0.0622%" height="15" fill="rgb(245,195,53)" fg:x="3125" fg:w="2"/><text x="97.4809%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.19%)</title><rect x="97.2931%" y="805" width="0.1867%" height="15" fill="rgb(240,92,26)" fg:x="3127" fg:w="6"/><text x="97.5431%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="97.4175%" y="789" width="0.0622%" height="15" fill="rgb(207,40,23)" fg:x="3131" fg:w="2"/><text x="97.6675%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="97.4798%" y="805" width="0.0622%" height="15" fill="rgb(223,111,35)" fg:x="3133" fg:w="2"/><text x="97.7298%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="97.5420%" y="805" width="0.0311%" height="15" fill="rgb(229,147,28)" fg:x="3135" fg:w="1"/><text x="97.7920%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="97.5731%" y="805" width="0.0311%" height="15" fill="rgb(211,29,28)" fg:x="3136" fg:w="1"/><text x="97.8231%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="97.6042%" y="805" width="0.0311%" height="15" fill="rgb(228,72,33)" fg:x="3137" fg:w="1"/><text x="97.8542%" y="815.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="97.6353%" y="805" width="0.0311%" height="15" fill="rgb(205,214,31)" fg:x="3138" fg:w="1"/><text x="97.8853%" y="815.50"></text></g><g><title>sudoku-solver`__rdl_alloc (2 samples, 0.06%)</title><rect x="97.6665%" y="805" width="0.0622%" height="15" fill="rgb(224,111,15)" fg:x="3139" fg:w="2"/><text x="97.9165%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="98.0087%" y="773" width="0.0622%" height="15" fill="rgb(253,21,26)" fg:x="3150" fg:w="2"/><text x="98.2587%" y="783.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (248 samples, 7.72%)</title><rect x="90.6658%" y="821" width="7.7162%" height="15" fill="rgb(245,139,43)" fg:x="2914" fg:w="248"/><text x="90.9158%" y="831.50">sudoku-solv..</text></g><g><title>sudoku-solver`alloc::vec::from_elem (21 samples, 0.65%)</title><rect x="97.7287%" y="805" width="0.6534%" height="15" fill="rgb(252,170,7)" fg:x="3141" fg:w="21"/><text x="97.9787%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.62%)</title><rect x="97.7598%" y="789" width="0.6223%" height="15" fill="rgb(231,118,14)" fg:x="3142" fg:w="20"/><text x="98.0098%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.31%)</title><rect x="98.0709%" y="773" width="0.3111%" height="15" fill="rgb(238,83,0)" fg:x="3152" fg:w="10"/><text x="98.3209%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.25%)</title><rect x="98.1332%" y="757" width="0.2489%" height="15" fill="rgb(221,39,39)" fg:x="3154" fg:w="8"/><text x="98.3832%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="98.2887%" y="741" width="0.0933%" height="15" fill="rgb(222,119,46)" fg:x="3159" fg:w="3"/><text x="98.5387%" y="751.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="98.4754%" y="789" width="0.0311%" height="15" fill="rgb(222,165,49)" fg:x="3165" fg:w="1"/><text x="98.7254%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_unlock_init_slow (1 samples, 0.03%)</title><rect x="98.5065%" y="789" width="0.0311%" height="15" fill="rgb(219,113,52)" fg:x="3166" fg:w="1"/><text x="98.7565%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.06%)</title><rect x="98.5688%" y="773" width="0.0622%" height="15" fill="rgb(214,7,15)" fg:x="3168" fg:w="2"/><text x="98.8188%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (2 samples, 0.06%)</title><rect x="98.6310%" y="773" width="0.0622%" height="15" fill="rgb(235,32,4)" fg:x="3170" fg:w="2"/><text x="98.8810%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_unlock_init_slow (1 samples, 0.03%)</title><rect x="98.6932%" y="773" width="0.0311%" height="15" fill="rgb(238,90,54)" fg:x="3172" fg:w="1"/><text x="98.9432%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`write (25 samples, 0.78%)</title><rect x="98.9421%" y="725" width="0.7778%" height="15" fill="rgb(213,208,19)" fg:x="3180" fg:w="25"/><text x="99.1921%" y="735.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (32 samples, 1.00%)</title><rect x="98.7866%" y="757" width="0.9956%" height="15" fill="rgb(233,156,4)" fg:x="3175" fg:w="32"/><text x="99.0366%" y="767.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (30 samples, 0.93%)</title><rect x="98.8488%" y="741" width="0.9334%" height="15" fill="rgb(207,194,5)" fg:x="3177" fg:w="30"/><text x="99.0988%" y="751.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (2 samples, 0.06%)</title><rect x="99.7200%" y="725" width="0.0622%" height="15" fill="rgb(206,111,30)" fg:x="3205" fg:w="2"/><text x="99.9700%" y="735.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="99.7822%" y="757" width="0.0311%" height="15" fill="rgb(243,70,54)" fg:x="3207" fg:w="1"/><text x="100.0322%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="99.8444%" y="725" width="0.0311%" height="15" fill="rgb(242,28,8)" fg:x="3209" fg:w="1"/><text x="100.0944%" y="735.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.09%)</title><rect x="99.8444%" y="741" width="0.0933%" height="15" fill="rgb(219,106,18)" fg:x="3209" fg:w="3"/><text x="100.0944%" y="751.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.06%)</title><rect x="99.8755%" y="725" width="0.0622%" height="15" fill="rgb(244,222,10)" fg:x="3210" fg:w="2"/><text x="100.1255%" y="735.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (1 samples, 0.03%)</title><rect x="99.9067%" y="709" width="0.0311%" height="15" fill="rgb(236,179,52)" fg:x="3211" fg:w="1"/><text x="100.1567%" y="719.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (46 samples, 1.43%)</title><rect x="98.5376%" y="789" width="1.4312%" height="15" fill="rgb(213,23,39)" fg:x="3167" fg:w="46"/><text x="98.7876%" y="799.50"></text></g><g><title>sudoku-solver`core::fmt::write (40 samples, 1.24%)</title><rect x="98.7243%" y="773" width="1.2446%" height="15" fill="rgb(238,48,10)" fg:x="3173" fg:w="40"/><text x="98.9743%" y="783.50"></text></g><g><title>sudoku-solver`core::fmt::Write::write_char (5 samples, 0.16%)</title><rect x="99.8133%" y="757" width="0.1556%" height="15" fill="rgb(251,196,23)" fg:x="3208" fg:w="5"/><text x="100.0633%" y="767.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9378%" y="741" width="0.0311%" height="15" fill="rgb(250,152,24)" fg:x="3212" fg:w="1"/><text x="100.1878%" y="751.50"></text></g><g><title>all (3,214 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(209,150,17)" fg:x="0" fg:w="3214"/><text x="0.2500%" y="943.50"></text></g><g><title>dyld`start (3,214 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="3214"/><text x="0.2500%" y="927.50">dyld`start</text></g><g><title>sudoku-solver`main (3,212 samples, 99.94%)</title><rect x="0.0622%" y="901" width="99.9378%" height="15" fill="rgb(253,148,53)" fg:x="2" fg:w="3212"/><text x="0.3122%" y="911.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (3,212 samples, 99.94%)</title><rect x="0.0622%" y="885" width="99.9378%" height="15" fill="rgb(218,129,16)" fg:x="2" fg:w="3212"/><text x="0.3122%" y="895.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (3,212 samples, 99.94%)</title><rect x="0.0622%" y="869" width="99.9378%" height="15" fill="rgb(216,85,19)" fg:x="2" fg:w="3212"/><text x="0.3122%" y="879.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (3,212 samples, 99.94%)</title><rect x="0.0622%" y="853" width="99.9378%" height="15" fill="rgb(235,228,7)" fg:x="2" fg:w="3212"/><text x="0.3122%" y="863.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (3,203 samples, 99.66%)</title><rect x="0.3423%" y="837" width="99.6577%" height="15" fill="rgb(245,175,0)" fg:x="11" fg:w="3203"/><text x="0.5923%" y="847.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (52 samples, 1.62%)</title><rect x="98.3821%" y="821" width="1.6179%" height="15" fill="rgb(208,168,36)" fg:x="3162" fg:w="52"/><text x="98.6321%" y="831.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (52 samples, 1.62%)</title><rect x="98.3821%" y="805" width="1.6179%" height="15" fill="rgb(246,171,24)" fg:x="3162" fg:w="52"/><text x="98.6321%" y="815.50"></text></g><g><title>sudoku-solver`core::fmt::write (1 samples, 0.03%)</title><rect x="99.9689%" y="789" width="0.0311%" height="15" fill="rgb(215,142,24)" fg:x="3213" fg:w="1"/><text x="100.2189%" y="799.50"></text></g></svg></svg>