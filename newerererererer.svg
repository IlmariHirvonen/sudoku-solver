<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="616"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.16%)</title><rect x="0.0000%" y="885" width="0.1623%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.16%)</title><rect x="0.0000%" y="869" width="0.1623%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="0.1623%" y="821" width="0.1623%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4123%" y="831.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="0.3247%" y="821" width="0.1623%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.5747%" y="831.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (1 samples, 0.16%)</title><rect x="0.4870%" y="821" width="0.1623%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.7370%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.49%)</title><rect x="1.2987%" y="805" width="0.4870%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="3"/><text x="1.5487%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.16%)</title><rect x="1.7857%" y="805" width="0.1623%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="1"/><text x="2.0357%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.16%)</title><rect x="1.7857%" y="789" width="0.1623%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="2.0357%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.16%)</title><rect x="1.7857%" y="773" width="0.1623%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="1"/><text x="2.0357%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="1.9481%" y="805" width="0.1623%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="2.1981%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="2.1104%" y="805" width="0.1623%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="2.3604%" y="815.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.32%)</title><rect x="2.4351%" y="789" width="0.3247%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="2"/><text x="2.6851%" y="799.50"></text></g><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.65%)</title><rect x="2.2727%" y="805" width="0.6494%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="4"/><text x="2.5227%" y="815.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.16%)</title><rect x="2.7597%" y="789" width="0.1623%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="1"/><text x="3.0097%" y="799.50"></text></g><g><title>sudoku-solver`alloc::raw_vec::finish_grow (1 samples, 0.16%)</title><rect x="2.7597%" y="773" width="0.1623%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="1"/><text x="3.0097%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.16%)</title><rect x="2.7597%" y="757" width="0.1623%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="1"/><text x="3.0097%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.16%)</title><rect x="2.7597%" y="741" width="0.1623%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="1"/><text x="3.0097%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="2.7597%" y="725" width="0.1623%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="1"/><text x="3.0097%" y="735.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="2.9221%" y="805" width="0.1623%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="3.1721%" y="815.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (8 samples, 1.30%)</title><rect x="3.0844%" y="805" width="1.2987%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="8"/><text x="3.3344%" y="815.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (2 samples, 0.32%)</title><rect x="4.3831%" y="805" width="0.3247%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="2"/><text x="4.6331%" y="815.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.16%)</title><rect x="4.5455%" y="789" width="0.1623%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="4.7955%" y="799.50"></text></g><g><title>sudoku-solver`core::fmt::write (1 samples, 0.16%)</title><rect x="4.5455%" y="773" width="0.1623%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="1"/><text x="4.7955%" y="783.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.16%)</title><rect x="4.5455%" y="757" width="0.1623%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="1"/><text x="4.7955%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.16%)</title><rect x="4.5455%" y="741" width="0.1623%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="4.7955%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.16%)</title><rect x="5.3571%" y="581" width="0.1623%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="1"/><text x="5.6071%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="5.5195%" y="581" width="0.1623%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="1"/><text x="5.7695%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="5.6818%" y="565" width="0.1623%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="1"/><text x="5.9318%" y="575.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="6.8182%" y="469" width="0.1623%" height="15" fill="rgb(214,148,48)" fg:x="42" fg:w="1"/><text x="7.0682%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="7.3052%" y="453" width="0.1623%" height="15" fill="rgb(232,36,49)" fg:x="45" fg:w="1"/><text x="7.5552%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="7.9545%" y="421" width="0.1623%" height="15" fill="rgb(209,103,24)" fg:x="49" fg:w="1"/><text x="8.2045%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="8.1169%" y="421" width="0.1623%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="1"/><text x="8.3669%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="8.2792%" y="421" width="0.1623%" height="15" fill="rgb(213,181,19)" fg:x="51" fg:w="1"/><text x="8.5292%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="8.4416%" y="421" width="0.1623%" height="15" fill="rgb(254,191,54)" fg:x="52" fg:w="1"/><text x="8.6916%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="9.4156%" y="405" width="0.1623%" height="15" fill="rgb(241,83,37)" fg:x="58" fg:w="1"/><text x="9.6656%" y="415.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.16%)</title><rect x="9.5779%" y="405" width="0.1623%" height="15" fill="rgb(233,36,39)" fg:x="59" fg:w="1"/><text x="9.8279%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.16%)</title><rect x="10.8766%" y="389" width="0.1623%" height="15" fill="rgb(226,3,54)" fg:x="67" fg:w="1"/><text x="11.1266%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="11.0390%" y="389" width="0.1623%" height="15" fill="rgb(245,192,40)" fg:x="68" fg:w="1"/><text x="11.2890%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="11.2013%" y="389" width="0.1623%" height="15" fill="rgb(238,167,29)" fg:x="69" fg:w="1"/><text x="11.4513%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="11.3636%" y="389" width="0.1623%" height="15" fill="rgb(232,182,51)" fg:x="70" fg:w="1"/><text x="11.6136%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="12.1753%" y="373" width="0.1623%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="1"/><text x="12.4253%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="12.3377%" y="357" width="0.1623%" height="15" fill="rgb(208,69,12)" fg:x="76" fg:w="1"/><text x="12.5877%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="12.5000%" y="357" width="0.1623%" height="15" fill="rgb(235,93,37)" fg:x="77" fg:w="1"/><text x="12.7500%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.16%)</title><rect x="13.6364%" y="341" width="0.1623%" height="15" fill="rgb(213,116,39)" fg:x="84" fg:w="1"/><text x="13.8864%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="13.7987%" y="341" width="0.1623%" height="15" fill="rgb(222,207,29)" fg:x="85" fg:w="1"/><text x="14.0487%" y="351.50"></text></g><g><title>sudoku-solver`__rdl_alloc (1 samples, 0.16%)</title><rect x="14.9351%" y="325" width="0.1623%" height="15" fill="rgb(206,96,30)" fg:x="92" fg:w="1"/><text x="15.1851%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="15.4221%" y="309" width="0.1623%" height="15" fill="rgb(218,138,4)" fg:x="95" fg:w="1"/><text x="15.6721%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="15.5844%" y="309" width="0.1623%" height="15" fill="rgb(250,191,14)" fg:x="96" fg:w="1"/><text x="15.8344%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="15.7468%" y="309" width="0.1623%" height="15" fill="rgb(239,60,40)" fg:x="97" fg:w="1"/><text x="15.9968%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="15.9091%" y="293" width="0.1623%" height="15" fill="rgb(206,27,48)" fg:x="98" fg:w="1"/><text x="16.1591%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.16%)</title><rect x="16.5584%" y="101" width="0.1623%" height="15" fill="rgb(225,35,8)" fg:x="102" fg:w="1"/><text x="16.8084%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.16%)</title><rect x="16.5584%" y="85" width="0.1623%" height="15" fill="rgb(250,213,24)" fg:x="102" fg:w="1"/><text x="16.8084%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.16%)</title><rect x="16.5584%" y="69" width="0.1623%" height="15" fill="rgb(247,123,22)" fg:x="102" fg:w="1"/><text x="16.8084%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1 samples, 0.16%)</title><rect x="16.5584%" y="53" width="0.1623%" height="15" fill="rgb(231,138,38)" fg:x="102" fg:w="1"/><text x="16.8084%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="16.5584%" y="37" width="0.1623%" height="15" fill="rgb(231,145,46)" fg:x="102" fg:w="1"/><text x="16.8084%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2 samples, 0.32%)</title><rect x="16.5584%" y="117" width="0.3247%" height="15" fill="rgb(251,118,11)" fg:x="102" fg:w="2"/><text x="16.8084%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="16.7208%" y="101" width="0.1623%" height="15" fill="rgb(217,147,25)" fg:x="103" fg:w="1"/><text x="16.9708%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.49%)</title><rect x="16.5584%" y="133" width="0.4870%" height="15" fill="rgb(247,81,37)" fg:x="102" fg:w="3"/><text x="16.8084%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="16.8831%" y="117" width="0.1623%" height="15" fill="rgb(209,12,38)" fg:x="104" fg:w="1"/><text x="17.1331%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5 samples, 0.81%)</title><rect x="16.5584%" y="149" width="0.8117%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="5"/><text x="16.8084%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.32%)</title><rect x="17.0455%" y="133" width="0.3247%" height="15" fill="rgb(248,47,43)" fg:x="105" fg:w="2"/><text x="17.2955%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (7 samples, 1.14%)</title><rect x="16.3961%" y="165" width="1.1364%" height="15" fill="rgb(221,10,30)" fg:x="101" fg:w="7"/><text x="16.6461%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="17.3701%" y="149" width="0.1623%" height="15" fill="rgb(210,229,1)" fg:x="107" fg:w="1"/><text x="17.6201%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="17.3701%" y="133" width="0.1623%" height="15" fill="rgb(222,148,37)" fg:x="107" fg:w="1"/><text x="17.6201%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="17.3701%" y="117" width="0.1623%" height="15" fill="rgb(234,67,33)" fg:x="107" fg:w="1"/><text x="17.6201%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="17.3701%" y="101" width="0.1623%" height="15" fill="rgb(247,98,35)" fg:x="107" fg:w="1"/><text x="17.6201%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9 samples, 1.46%)</title><rect x="16.3961%" y="181" width="1.4610%" height="15" fill="rgb(247,138,52)" fg:x="101" fg:w="9"/><text x="16.6461%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.32%)</title><rect x="17.5325%" y="165" width="0.3247%" height="15" fill="rgb(213,79,30)" fg:x="108" fg:w="2"/><text x="17.7825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="17.6948%" y="149" width="0.1623%" height="15" fill="rgb(246,177,23)" fg:x="109" fg:w="1"/><text x="17.9448%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12 samples, 1.95%)</title><rect x="16.3961%" y="197" width="1.9481%" height="15" fill="rgb(230,62,27)" fg:x="101" fg:w="12"/><text x="16.6461%" y="207.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.49%)</title><rect x="17.8571%" y="181" width="0.4870%" height="15" fill="rgb(216,154,8)" fg:x="110" fg:w="3"/><text x="18.1071%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (16 samples, 2.60%)</title><rect x="16.3961%" y="213" width="2.5974%" height="15" fill="rgb(244,35,45)" fg:x="101" fg:w="16"/><text x="16.6461%" y="223.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (4 samples, 0.65%)</title><rect x="18.3442%" y="197" width="0.6494%" height="15" fill="rgb(251,115,12)" fg:x="113" fg:w="4"/><text x="18.5942%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="18.8312%" y="181" width="0.1623%" height="15" fill="rgb(240,54,50)" fg:x="116" fg:w="1"/><text x="19.0812%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (18 samples, 2.92%)</title><rect x="16.3961%" y="229" width="2.9221%" height="15" fill="rgb(233,84,52)" fg:x="101" fg:w="18"/><text x="16.6461%" y="239.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (2 samples, 0.32%)</title><rect x="18.9935%" y="213" width="0.3247%" height="15" fill="rgb(207,117,47)" fg:x="117" fg:w="2"/><text x="19.2435%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="19.1558%" y="197" width="0.1623%" height="15" fill="rgb(249,43,39)" fg:x="118" fg:w="1"/><text x="19.4058%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="19.1558%" y="181" width="0.1623%" height="15" fill="rgb(209,38,44)" fg:x="118" fg:w="1"/><text x="19.4058%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19 samples, 3.08%)</title><rect x="16.3961%" y="245" width="3.0844%" height="15" fill="rgb(236,212,23)" fg:x="101" fg:w="19"/><text x="16.6461%" y="255.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="19.3182%" y="229" width="0.1623%" height="15" fill="rgb(242,79,21)" fg:x="119" fg:w="1"/><text x="19.5682%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="19.3182%" y="213" width="0.1623%" height="15" fill="rgb(211,96,35)" fg:x="119" fg:w="1"/><text x="19.5682%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="20.4545%" y="229" width="0.1623%" height="15" fill="rgb(253,215,40)" fg:x="126" fg:w="1"/><text x="20.7045%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="20.4545%" y="213" width="0.1623%" height="15" fill="rgb(211,81,21)" fg:x="126" fg:w="1"/><text x="20.7045%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="20.4545%" y="197" width="0.1623%" height="15" fill="rgb(208,190,38)" fg:x="126" fg:w="1"/><text x="20.7045%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (28 samples, 4.55%)</title><rect x="16.2338%" y="261" width="4.5455%" height="15" fill="rgb(235,213,38)" fg:x="100" fg:w="28"/><text x="16.4838%" y="271.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (8 samples, 1.30%)</title><rect x="19.4805%" y="245" width="1.2987%" height="15" fill="rgb(237,122,38)" fg:x="120" fg:w="8"/><text x="19.7305%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="20.6169%" y="229" width="0.1623%" height="15" fill="rgb(244,218,35)" fg:x="127" fg:w="1"/><text x="20.8669%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="20.6169%" y="213" width="0.1623%" height="15" fill="rgb(240,68,47)" fg:x="127" fg:w="1"/><text x="20.8669%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (33 samples, 5.36%)</title><rect x="16.2338%" y="277" width="5.3571%" height="15" fill="rgb(210,16,53)" fg:x="100" fg:w="33"/><text x="16.4838%" y="287.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.81%)</title><rect x="20.7792%" y="261" width="0.8117%" height="15" fill="rgb(235,124,12)" fg:x="128" fg:w="5"/><text x="21.0292%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="21.4286%" y="245" width="0.1623%" height="15" fill="rgb(224,169,11)" fg:x="132" fg:w="1"/><text x="21.6786%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="22.7273%" y="261" width="0.4870%" height="15" fill="rgb(250,166,2)" fg:x="140" fg:w="3"/><text x="22.9773%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="23.0519%" y="245" width="0.1623%" height="15" fill="rgb(242,216,29)" fg:x="142" fg:w="1"/><text x="23.3019%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="23.0519%" y="229" width="0.1623%" height="15" fill="rgb(230,116,27)" fg:x="142" fg:w="1"/><text x="23.3019%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="23.0519%" y="213" width="0.1623%" height="15" fill="rgb(228,99,48)" fg:x="142" fg:w="1"/><text x="23.3019%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (45 samples, 7.31%)</title><rect x="16.0714%" y="293" width="7.3052%" height="15" fill="rgb(253,11,6)" fg:x="99" fg:w="45"/><text x="16.3214%" y="303.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 1.79%)</title><rect x="21.5909%" y="277" width="1.7857%" height="15" fill="rgb(247,143,39)" fg:x="133" fg:w="11"/><text x="21.8409%" y="287.50">s..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="23.2143%" y="261" width="0.1623%" height="15" fill="rgb(236,97,10)" fg:x="143" fg:w="1"/><text x="23.4643%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="25.0000%" y="277" width="0.4870%" height="15" fill="rgb(233,208,19)" fg:x="154" fg:w="3"/><text x="25.2500%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.49%)</title><rect x="25.0000%" y="261" width="0.4870%" height="15" fill="rgb(216,164,2)" fg:x="154" fg:w="3"/><text x="25.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="25.3247%" y="245" width="0.1623%" height="15" fill="rgb(220,129,5)" fg:x="156" fg:w="1"/><text x="25.5747%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (61 samples, 9.90%)</title><rect x="15.9091%" y="309" width="9.9026%" height="15" fill="rgb(242,17,10)" fg:x="98" fg:w="61"/><text x="16.1591%" y="319.50">sudoku-solver`..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (15 samples, 2.44%)</title><rect x="23.3766%" y="293" width="2.4351%" height="15" fill="rgb(242,107,0)" fg:x="144" fg:w="15"/><text x="23.6266%" y="303.50">su..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="25.4870%" y="277" width="0.3247%" height="15" fill="rgb(251,28,31)" fg:x="157" fg:w="2"/><text x="25.7370%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="28.2468%" y="293" width="0.4870%" height="15" fill="rgb(233,223,10)" fg:x="174" fg:w="3"/><text x="28.4968%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="28.4091%" y="277" width="0.3247%" height="15" fill="rgb(215,21,27)" fg:x="175" fg:w="2"/><text x="28.6591%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="28.4091%" y="261" width="0.3247%" height="15" fill="rgb(232,23,21)" fg:x="175" fg:w="2"/><text x="28.6591%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="28.5714%" y="245" width="0.1623%" height="15" fill="rgb(244,5,23)" fg:x="176" fg:w="1"/><text x="28.8214%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (85 samples, 13.80%)</title><rect x="15.0974%" y="325" width="13.7987%" height="15" fill="rgb(226,81,46)" fg:x="93" fg:w="85"/><text x="15.3474%" y="335.50">sudoku-solver`sudoku_..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (19 samples, 3.08%)</title><rect x="25.8117%" y="309" width="3.0844%" height="15" fill="rgb(247,70,30)" fg:x="159" fg:w="19"/><text x="26.0617%" y="319.50">sud..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="28.7338%" y="293" width="0.1623%" height="15" fill="rgb(212,68,19)" fg:x="177" fg:w="1"/><text x="28.9838%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="33.1169%" y="293" width="0.1623%" height="15" fill="rgb(240,187,13)" fg:x="204" fg:w="1"/><text x="33.3669%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 1.30%)</title><rect x="32.4675%" y="309" width="1.2987%" height="15" fill="rgb(223,113,26)" fg:x="200" fg:w="8"/><text x="32.7175%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.49%)</title><rect x="33.2792%" y="293" width="0.4870%" height="15" fill="rgb(206,192,2)" fg:x="205" fg:w="3"/><text x="33.5292%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.49%)</title><rect x="33.2792%" y="277" width="0.4870%" height="15" fill="rgb(241,108,4)" fg:x="205" fg:w="3"/><text x="33.5292%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.32%)</title><rect x="33.4416%" y="261" width="0.3247%" height="15" fill="rgb(247,173,49)" fg:x="206" fg:w="2"/><text x="33.6916%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="33.7662%" y="309" width="0.1623%" height="15" fill="rgb(224,114,35)" fg:x="208" fg:w="1"/><text x="34.0162%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (124 samples, 20.13%)</title><rect x="13.9610%" y="341" width="20.1299%" height="15" fill="rgb(245,159,27)" fg:x="86" fg:w="124"/><text x="14.2110%" y="351.50">sudoku-solver`sudoku_solver::bac..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (32 samples, 5.19%)</title><rect x="28.8961%" y="325" width="5.1948%" height="15" fill="rgb(245,172,44)" fg:x="178" fg:w="32"/><text x="29.1461%" y="335.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="33.9286%" y="309" width="0.1623%" height="15" fill="rgb(236,23,11)" fg:x="209" fg:w="1"/><text x="34.1786%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.32%)</title><rect x="38.3117%" y="325" width="0.3247%" height="15" fill="rgb(205,117,38)" fg:x="236" fg:w="2"/><text x="38.5617%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="38.4740%" y="309" width="0.1623%" height="15" fill="rgb(237,72,25)" fg:x="237" fg:w="1"/><text x="38.7240%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="38.6364%" y="325" width="0.3247%" height="15" fill="rgb(244,70,9)" fg:x="238" fg:w="2"/><text x="38.8864%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (164 samples, 26.62%)</title><rect x="12.6623%" y="357" width="26.6234%" height="15" fill="rgb(217,125,39)" fg:x="78" fg:w="164"/><text x="12.9123%" y="367.50">sudoku-solver`sudoku_solver::backtraking::b..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (32 samples, 5.19%)</title><rect x="34.0909%" y="341" width="5.1948%" height="15" fill="rgb(235,36,10)" fg:x="210" fg:w="32"/><text x="34.3409%" y="351.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.32%)</title><rect x="38.9610%" y="325" width="0.3247%" height="15" fill="rgb(251,123,47)" fg:x="240" fg:w="2"/><text x="39.2110%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="41.8831%" y="341" width="0.1623%" height="15" fill="rgb(221,13,13)" fg:x="258" fg:w="1"/><text x="42.1331%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (188 samples, 30.52%)</title><rect x="12.3377%" y="373" width="30.5195%" height="15" fill="rgb(238,131,9)" fg:x="76" fg:w="188"/><text x="12.5877%" y="383.50">sudoku-solver`sudoku_solver::backtraking::backtra..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 3.57%)</title><rect x="39.2857%" y="357" width="3.5714%" height="15" fill="rgb(211,50,8)" fg:x="242" fg:w="22"/><text x="39.5357%" y="367.50">sudo..</text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.81%)</title><rect x="42.0455%" y="341" width="0.8117%" height="15" fill="rgb(245,182,24)" fg:x="259" fg:w="5"/><text x="42.2955%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="42.6948%" y="325" width="0.1623%" height="15" fill="rgb(242,14,37)" fg:x="263" fg:w="1"/><text x="42.9448%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="47.2403%" y="357" width="0.4870%" height="15" fill="rgb(246,228,12)" fg:x="291" fg:w="3"/><text x="47.4903%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="47.4026%" y="341" width="0.3247%" height="15" fill="rgb(213,55,15)" fg:x="292" fg:w="2"/><text x="47.6526%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="47.5649%" y="325" width="0.1623%" height="15" fill="rgb(209,9,3)" fg:x="293" fg:w="1"/><text x="47.8149%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="47.7273%" y="357" width="0.1623%" height="15" fill="rgb(230,59,30)" fg:x="294" fg:w="1"/><text x="47.9773%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (225 samples, 36.53%)</title><rect x="11.5260%" y="389" width="36.5260%" height="15" fill="rgb(209,121,21)" fg:x="71" fg:w="225"/><text x="11.7760%" y="399.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recur..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (32 samples, 5.19%)</title><rect x="42.8571%" y="373" width="5.1948%" height="15" fill="rgb(220,109,13)" fg:x="264" fg:w="32"/><text x="43.1071%" y="383.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="47.8896%" y="357" width="0.1623%" height="15" fill="rgb(232,18,1)" fg:x="295" fg:w="1"/><text x="48.1396%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.81%)</title><rect x="51.4610%" y="373" width="0.8117%" height="15" fill="rgb(215,41,42)" fg:x="317" fg:w="5"/><text x="51.7110%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.65%)</title><rect x="51.6234%" y="357" width="0.6494%" height="15" fill="rgb(224,123,36)" fg:x="318" fg:w="4"/><text x="51.8734%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.65%)</title><rect x="51.6234%" y="341" width="0.6494%" height="15" fill="rgb(240,125,3)" fg:x="318" fg:w="4"/><text x="51.8734%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.16%)</title><rect x="52.2727%" y="373" width="0.1623%" height="15" fill="rgb(205,98,50)" fg:x="322" fg:w="1"/><text x="52.5227%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="52.4351%" y="373" width="0.3247%" height="15" fill="rgb(205,185,37)" fg:x="323" fg:w="2"/><text x="52.6851%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.32%)</title><rect x="52.7597%" y="373" width="0.3247%" height="15" fill="rgb(238,207,15)" fg:x="325" fg:w="2"/><text x="53.0097%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="53.0844%" y="373" width="0.1623%" height="15" fill="rgb(213,199,42)" fg:x="327" fg:w="1"/><text x="53.3344%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (269 samples, 43.67%)</title><rect x="9.7403%" y="405" width="43.6688%" height="15" fill="rgb(235,201,11)" fg:x="60" fg:w="269"/><text x="9.9903%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (33 samples, 5.36%)</title><rect x="48.0519%" y="389" width="5.3571%" height="15" fill="rgb(207,46,11)" fg:x="296" fg:w="33"/><text x="48.3019%" y="399.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="53.2468%" y="373" width="0.1623%" height="15" fill="rgb(241,35,35)" fg:x="328" fg:w="1"/><text x="53.4968%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="57.3052%" y="373" width="0.1623%" height="15" fill="rgb(243,32,47)" fg:x="353" fg:w="1"/><text x="57.5552%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="57.6299%" y="357" width="0.3247%" height="15" fill="rgb(247,202,23)" fg:x="355" fg:w="2"/><text x="57.8799%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.81%)</title><rect x="57.3052%" y="389" width="0.8117%" height="15" fill="rgb(219,102,11)" fg:x="353" fg:w="5"/><text x="57.5552%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.65%)</title><rect x="57.4675%" y="373" width="0.6494%" height="15" fill="rgb(243,110,44)" fg:x="354" fg:w="4"/><text x="57.7175%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="57.9545%" y="357" width="0.1623%" height="15" fill="rgb(222,74,54)" fg:x="357" fg:w="1"/><text x="58.2045%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="58.1169%" y="389" width="0.3247%" height="15" fill="rgb(216,99,12)" fg:x="358" fg:w="2"/><text x="58.3669%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="58.2792%" y="373" width="0.1623%" height="15" fill="rgb(226,22,26)" fg:x="359" fg:w="1"/><text x="58.5292%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (310 samples, 50.32%)</title><rect x="8.6039%" y="421" width="50.3247%" height="15" fill="rgb(217,163,10)" fg:x="53" fg:w="310"/><text x="8.8539%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (34 samples, 5.52%)</title><rect x="53.4091%" y="405" width="5.5195%" height="15" fill="rgb(213,25,53)" fg:x="329" fg:w="34"/><text x="53.6591%" y="415.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.49%)</title><rect x="58.4416%" y="389" width="0.4870%" height="15" fill="rgb(252,105,26)" fg:x="360" fg:w="3"/><text x="58.6916%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.49%)</title><rect x="62.6623%" y="373" width="0.4870%" height="15" fill="rgb(220,39,43)" fg:x="386" fg:w="3"/><text x="62.9123%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.49%)</title><rect x="62.6623%" y="357" width="0.4870%" height="15" fill="rgb(229,68,48)" fg:x="386" fg:w="3"/><text x="62.9123%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.81%)</title><rect x="62.5000%" y="405" width="0.8117%" height="15" fill="rgb(252,8,32)" fg:x="385" fg:w="5"/><text x="62.7500%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.81%)</title><rect x="62.5000%" y="389" width="0.8117%" height="15" fill="rgb(223,20,43)" fg:x="385" fg:w="5"/><text x="62.7500%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="63.1494%" y="373" width="0.1623%" height="15" fill="rgb(229,81,49)" fg:x="389" fg:w="1"/><text x="63.3994%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.16%)</title><rect x="63.3117%" y="405" width="0.1623%" height="15" fill="rgb(236,28,36)" fg:x="390" fg:w="1"/><text x="63.5617%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.97%)</title><rect x="63.4740%" y="405" width="0.9740%" height="15" fill="rgb(249,185,26)" fg:x="391" fg:w="6"/><text x="63.7240%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.49%)</title><rect x="63.9610%" y="389" width="0.4870%" height="15" fill="rgb(249,174,33)" fg:x="394" fg:w="3"/><text x="64.2110%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.32%)</title><rect x="64.4481%" y="405" width="0.3247%" height="15" fill="rgb(233,201,37)" fg:x="397" fg:w="2"/><text x="64.6981%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (354 samples, 57.47%)</title><rect x="7.7922%" y="437" width="57.4675%" height="15" fill="rgb(221,78,26)" fg:x="48" fg:w="354"/><text x="8.0422%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (39 samples, 6.33%)</title><rect x="58.9286%" y="421" width="6.3312%" height="15" fill="rgb(250,127,30)" fg:x="363" fg:w="39"/><text x="59.1786%" y="431.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.49%)</title><rect x="64.7727%" y="405" width="0.4870%" height="15" fill="rgb(230,49,44)" fg:x="399" fg:w="3"/><text x="65.0227%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.32%)</title><rect x="67.5325%" y="421" width="0.3247%" height="15" fill="rgb(229,67,23)" fg:x="416" fg:w="2"/><text x="67.7825%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="67.6948%" y="405" width="0.1623%" height="15" fill="rgb(249,83,47)" fg:x="417" fg:w="1"/><text x="67.9448%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="67.6948%" y="389" width="0.1623%" height="15" fill="rgb(215,43,3)" fg:x="417" fg:w="1"/><text x="67.9448%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (378 samples, 61.36%)</title><rect x="7.4675%" y="453" width="61.3636%" height="15" fill="rgb(238,154,13)" fg:x="46" fg:w="378"/><text x="7.7175%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (22 samples, 3.57%)</title><rect x="65.2597%" y="437" width="3.5714%" height="15" fill="rgb(219,56,2)" fg:x="402" fg:w="22"/><text x="65.5097%" y="447.50">sudo..</text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.97%)</title><rect x="67.8571%" y="421" width="0.9740%" height="15" fill="rgb(233,0,4)" fg:x="418" fg:w="6"/><text x="68.1071%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="68.6688%" y="405" width="0.1623%" height="15" fill="rgb(235,30,7)" fg:x="423" fg:w="1"/><text x="68.9188%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="71.9156%" y="437" width="0.1623%" height="15" fill="rgb(250,79,13)" fg:x="443" fg:w="1"/><text x="72.1656%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="71.9156%" y="421" width="0.1623%" height="15" fill="rgb(211,146,34)" fg:x="443" fg:w="1"/><text x="72.1656%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (404 samples, 65.58%)</title><rect x="6.9805%" y="469" width="65.5844%" height="15" fill="rgb(228,22,38)" fg:x="43" fg:w="404"/><text x="7.2305%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (23 samples, 3.73%)</title><rect x="68.8312%" y="453" width="3.7338%" height="15" fill="rgb(235,168,5)" fg:x="424" fg:w="23"/><text x="69.0812%" y="463.50">sudo..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.49%)</title><rect x="72.0779%" y="437" width="0.4870%" height="15" fill="rgb(221,155,16)" fg:x="444" fg:w="3"/><text x="72.3279%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.49%)</title><rect x="72.0779%" y="421" width="0.4870%" height="15" fill="rgb(215,215,53)" fg:x="444" fg:w="3"/><text x="72.3279%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.16%)</title><rect x="74.0260%" y="453" width="0.1623%" height="15" fill="rgb(223,4,10)" fg:x="456" fg:w="1"/><text x="74.2760%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="74.1883%" y="453" width="0.1623%" height="15" fill="rgb(234,103,6)" fg:x="457" fg:w="1"/><text x="74.4383%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (418 samples, 67.86%)</title><rect x="6.6558%" y="485" width="67.8571%" height="15" fill="rgb(227,97,0)" fg:x="41" fg:w="418"/><text x="6.9058%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (12 samples, 1.95%)</title><rect x="72.5649%" y="469" width="1.9481%" height="15" fill="rgb(234,150,53)" fg:x="447" fg:w="12"/><text x="72.8149%" y="479.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="74.3506%" y="453" width="0.1623%" height="15" fill="rgb(228,201,54)" fg:x="458" fg:w="1"/><text x="74.6006%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="75.6494%" y="453" width="0.1623%" height="15" fill="rgb(222,22,37)" fg:x="466" fg:w="1"/><text x="75.8994%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="75.6494%" y="469" width="0.4870%" height="15" fill="rgb(237,53,32)" fg:x="466" fg:w="3"/><text x="75.8994%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="75.8117%" y="453" width="0.3247%" height="15" fill="rgb(233,25,53)" fg:x="467" fg:w="2"/><text x="76.0617%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="75.8117%" y="437" width="0.3247%" height="15" fill="rgb(210,40,34)" fg:x="467" fg:w="2"/><text x="76.0617%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="75.9740%" y="421" width="0.1623%" height="15" fill="rgb(241,220,44)" fg:x="468" fg:w="1"/><text x="76.2240%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (430 samples, 69.81%)</title><rect x="6.4935%" y="501" width="69.8052%" height="15" fill="rgb(235,28,35)" fg:x="40" fg:w="430"/><text x="6.7435%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 1.79%)</title><rect x="74.5130%" y="485" width="1.7857%" height="15" fill="rgb(210,56,17)" fg:x="459" fg:w="11"/><text x="74.7630%" y="495.50">s..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="76.1364%" y="469" width="0.1623%" height="15" fill="rgb(224,130,29)" fg:x="469" fg:w="1"/><text x="76.3864%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="76.1364%" y="453" width="0.1623%" height="15" fill="rgb(235,212,8)" fg:x="469" fg:w="1"/><text x="76.3864%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (439 samples, 71.27%)</title><rect x="6.4935%" y="517" width="71.2662%" height="15" fill="rgb(223,33,50)" fg:x="40" fg:w="439"/><text x="6.7435%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 1.46%)</title><rect x="76.2987%" y="501" width="1.4610%" height="15" fill="rgb(219,149,13)" fg:x="470" fg:w="9"/><text x="76.5487%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="77.2727%" y="485" width="0.4870%" height="15" fill="rgb(250,156,29)" fg:x="476" fg:w="3"/><text x="77.5227%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="77.5974%" y="469" width="0.1623%" height="15" fill="rgb(216,193,19)" fg:x="478" fg:w="1"/><text x="77.8474%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="77.5974%" y="453" width="0.1623%" height="15" fill="rgb(216,135,14)" fg:x="478" fg:w="1"/><text x="77.8474%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="77.5974%" y="437" width="0.1623%" height="15" fill="rgb(241,47,5)" fg:x="478" fg:w="1"/><text x="77.8474%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (448 samples, 72.73%)</title><rect x="6.3312%" y="533" width="72.7273%" height="15" fill="rgb(233,42,35)" fg:x="39" fg:w="448"/><text x="6.5812%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (8 samples, 1.30%)</title><rect x="77.7597%" y="517" width="1.2987%" height="15" fill="rgb(231,13,6)" fg:x="479" fg:w="8"/><text x="78.0097%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="78.8961%" y="501" width="0.1623%" height="15" fill="rgb(207,181,40)" fg:x="486" fg:w="1"/><text x="79.1461%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (459 samples, 74.51%)</title><rect x="6.0065%" y="549" width="74.5130%" height="15" fill="rgb(254,173,49)" fg:x="37" fg:w="459"/><text x="6.2565%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 1.46%)</title><rect x="79.0584%" y="533" width="1.4610%" height="15" fill="rgb(221,1,38)" fg:x="487" fg:w="9"/><text x="79.3084%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="80.3571%" y="517" width="0.1623%" height="15" fill="rgb(206,124,46)" fg:x="495" fg:w="1"/><text x="80.6071%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (463 samples, 75.16%)</title><rect x="5.8442%" y="565" width="75.1623%" height="15" fill="rgb(249,21,11)" fg:x="36" fg:w="463"/><text x="6.0942%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.49%)</title><rect x="80.5195%" y="549" width="0.4870%" height="15" fill="rgb(222,201,40)" fg:x="496" fg:w="3"/><text x="80.7695%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="81.6558%" y="549" width="0.4870%" height="15" fill="rgb(235,61,29)" fg:x="503" fg:w="3"/><text x="81.9058%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="81.8182%" y="533" width="0.3247%" height="15" fill="rgb(219,207,3)" fg:x="504" fg:w="2"/><text x="82.0682%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="81.9805%" y="517" width="0.1623%" height="15" fill="rgb(222,56,46)" fg:x="505" fg:w="1"/><text x="82.2305%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (473 samples, 76.79%)</title><rect x="5.6818%" y="581" width="76.7857%" height="15" fill="rgb(239,76,54)" fg:x="35" fg:w="473"/><text x="5.9318%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (9 samples, 1.46%)</title><rect x="81.0065%" y="565" width="1.4610%" height="15" fill="rgb(231,124,27)" fg:x="499" fg:w="9"/><text x="81.2565%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="82.1429%" y="549" width="0.3247%" height="15" fill="rgb(249,195,6)" fg:x="506" fg:w="2"/><text x="82.3929%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (483 samples, 78.41%)</title><rect x="5.3571%" y="597" width="78.4091%" height="15" fill="rgb(237,174,47)" fg:x="33" fg:w="483"/><text x="5.6071%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (8 samples, 1.30%)</title><rect x="82.4675%" y="581" width="1.2987%" height="15" fill="rgb(206,201,31)" fg:x="508" fg:w="8"/><text x="82.7175%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="85.2273%" y="581" width="0.4870%" height="15" fill="rgb(231,57,52)" fg:x="525" fg:w="3"/><text x="85.4773%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="85.3896%" y="565" width="0.3247%" height="15" fill="rgb(248,177,22)" fg:x="526" fg:w="2"/><text x="85.6396%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="85.3896%" y="549" width="0.3247%" height="15" fill="rgb(215,211,37)" fg:x="526" fg:w="2"/><text x="85.6396%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.16%)</title><rect x="85.7143%" y="581" width="0.1623%" height="15" fill="rgb(241,128,51)" fg:x="528" fg:w="1"/><text x="85.9643%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="85.8766%" y="581" width="0.1623%" height="15" fill="rgb(227,165,31)" fg:x="529" fg:w="1"/><text x="86.1266%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="85.8766%" y="565" width="0.1623%" height="15" fill="rgb(228,167,24)" fg:x="529" fg:w="1"/><text x="86.1266%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (498 samples, 80.84%)</title><rect x="5.3571%" y="613" width="80.8442%" height="15" fill="rgb(228,143,12)" fg:x="33" fg:w="498"/><text x="5.6071%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (15 samples, 2.44%)</title><rect x="83.7662%" y="597" width="2.4351%" height="15" fill="rgb(249,149,8)" fg:x="516" fg:w="15"/><text x="84.0162%" y="607.50">su..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="86.0390%" y="581" width="0.1623%" height="15" fill="rgb(243,35,44)" fg:x="530" fg:w="1"/><text x="86.2890%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (502 samples, 81.49%)</title><rect x="5.1948%" y="629" width="81.4935%" height="15" fill="rgb(246,89,9)" fg:x="32" fg:w="502"/><text x="5.4448%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.49%)</title><rect x="86.2013%" y="613" width="0.4870%" height="15" fill="rgb(233,213,13)" fg:x="531" fg:w="3"/><text x="86.4513%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (507 samples, 82.31%)</title><rect x="4.8701%" y="645" width="82.3052%" height="15" fill="rgb(233,141,41)" fg:x="30" fg:w="507"/><text x="5.1201%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (3 samples, 0.49%)</title><rect x="86.6883%" y="629" width="0.4870%" height="15" fill="rgb(239,167,4)" fg:x="534" fg:w="3"/><text x="86.9383%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.32%)</title><rect x="86.8506%" y="613" width="0.3247%" height="15" fill="rgb(209,217,16)" fg:x="535" fg:w="2"/><text x="87.1006%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="86.8506%" y="597" width="0.3247%" height="15" fill="rgb(219,88,35)" fg:x="535" fg:w="2"/><text x="87.1006%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="87.0130%" y="581" width="0.1623%" height="15" fill="rgb(220,193,23)" fg:x="536" fg:w="1"/><text x="87.2630%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="87.0130%" y="565" width="0.1623%" height="15" fill="rgb(230,90,52)" fg:x="536" fg:w="1"/><text x="87.2630%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="87.6623%" y="629" width="0.1623%" height="15" fill="rgb(252,106,19)" fg:x="540" fg:w="1"/><text x="87.9123%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (513 samples, 83.28%)</title><rect x="4.7078%" y="661" width="83.2792%" height="15" fill="rgb(206,74,20)" fg:x="29" fg:w="513"/><text x="4.9578%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.81%)</title><rect x="87.1753%" y="645" width="0.8117%" height="15" fill="rgb(230,138,44)" fg:x="537" fg:w="5"/><text x="87.4253%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="87.8247%" y="629" width="0.1623%" height="15" fill="rgb(235,182,43)" fg:x="541" fg:w="1"/><text x="88.0747%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (514 samples, 83.44%)</title><rect x="4.7078%" y="677" width="83.4416%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="514"/><text x="4.9578%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="87.9870%" y="661" width="0.1623%" height="15" fill="rgb(248,9,4)" fg:x="542" fg:w="1"/><text x="88.2370%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (515 samples, 83.60%)</title><rect x="4.7078%" y="693" width="83.6039%" height="15" fill="rgb(210,31,22)" fg:x="29" fg:w="515"/><text x="4.9578%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="88.1494%" y="677" width="0.1623%" height="15" fill="rgb(239,54,39)" fg:x="543" fg:w="1"/><text x="88.3994%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (516 samples, 83.77%)</title><rect x="4.7078%" y="725" width="83.7662%" height="15" fill="rgb(230,99,41)" fg:x="29" fg:w="516"/><text x="4.9578%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (516 samples, 83.77%)</title><rect x="4.7078%" y="709" width="83.7662%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="516"/><text x="4.9578%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="88.3117%" y="693" width="0.1623%" height="15" fill="rgb(213,46,41)" fg:x="544" fg:w="1"/><text x="88.5617%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (517 samples, 83.93%)</title><rect x="4.7078%" y="789" width="83.9286%" height="15" fill="rgb(215,133,35)" fg:x="29" fg:w="517"/><text x="4.9578%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (517 samples, 83.93%)</title><rect x="4.7078%" y="773" width="83.9286%" height="15" fill="rgb(213,28,5)" fg:x="29" fg:w="517"/><text x="4.9578%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (517 samples, 83.93%)</title><rect x="4.7078%" y="757" width="83.9286%" height="15" fill="rgb(215,77,49)" fg:x="29" fg:w="517"/><text x="4.9578%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (517 samples, 83.93%)</title><rect x="4.7078%" y="741" width="83.9286%" height="15" fill="rgb(248,100,22)" fg:x="29" fg:w="517"/><text x="4.9578%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="88.4740%" y="725" width="0.1623%" height="15" fill="rgb(208,67,9)" fg:x="545" fg:w="1"/><text x="88.7240%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="88.4740%" y="709" width="0.1623%" height="15" fill="rgb(219,133,21)" fg:x="545" fg:w="1"/><text x="88.7240%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (518 samples, 84.09%)</title><rect x="4.7078%" y="805" width="84.0909%" height="15" fill="rgb(246,46,29)" fg:x="29" fg:w="518"/><text x="4.9578%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1 samples, 0.16%)</title><rect x="88.6364%" y="789" width="0.1623%" height="15" fill="rgb(246,185,52)" fg:x="546" fg:w="1"/><text x="88.8864%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="95.9416%" y="773" width="0.1623%" height="15" fill="rgb(252,136,11)" fg:x="591" fg:w="1"/><text x="96.1916%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="96.1039%" y="757" width="0.3247%" height="15" fill="rgb(219,138,53)" fg:x="592" fg:w="2"/><text x="96.3539%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 1.46%)</title><rect x="95.1299%" y="789" width="1.4610%" height="15" fill="rgb(211,51,23)" fg:x="586" fg:w="9"/><text x="95.3799%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.49%)</title><rect x="96.1039%" y="773" width="0.4870%" height="15" fill="rgb(247,221,28)" fg:x="592" fg:w="3"/><text x="96.3539%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="96.4286%" y="757" width="0.1623%" height="15" fill="rgb(251,222,45)" fg:x="594" fg:w="1"/><text x="96.6786%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.32%)</title><rect x="96.5909%" y="789" width="0.3247%" height="15" fill="rgb(217,162,53)" fg:x="595" fg:w="2"/><text x="96.8409%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="96.9156%" y="789" width="0.1623%" height="15" fill="rgb(229,93,14)" fg:x="597" fg:w="1"/><text x="97.1656%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.16%)</title><rect x="97.0779%" y="789" width="0.1623%" height="15" fill="rgb(209,67,49)" fg:x="598" fg:w="1"/><text x="97.3279%" y="799.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="97.2403%" y="789" width="0.1623%" height="15" fill="rgb(213,87,29)" fg:x="599" fg:w="1"/><text x="97.4903%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="97.4026%" y="773" width="0.4870%" height="15" fill="rgb(205,151,52)" fg:x="600" fg:w="3"/><text x="97.6526%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="97.5649%" y="757" width="0.3247%" height="15" fill="rgb(253,215,39)" fg:x="601" fg:w="2"/><text x="97.8149%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.16%)</title><rect x="97.7273%" y="741" width="0.1623%" height="15" fill="rgb(221,220,41)" fg:x="602" fg:w="1"/><text x="97.9773%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="97.7273%" y="725" width="0.1623%" height="15" fill="rgb(218,133,21)" fg:x="602" fg:w="1"/><text x="97.9773%" y="735.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (57 samples, 9.25%)</title><rect x="88.7987%" y="805" width="9.2532%" height="15" fill="rgb(221,193,43)" fg:x="547" fg:w="57"/><text x="89.0487%" y="815.50">sudoku-solver..</text></g><g><title>sudoku-solver`alloc::vec::from_elem (4 samples, 0.65%)</title><rect x="97.4026%" y="789" width="0.6494%" height="15" fill="rgb(240,128,52)" fg:x="600" fg:w="4"/><text x="97.6526%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.16%)</title><rect x="97.8896%" y="773" width="0.1623%" height="15" fill="rgb(253,114,12)" fg:x="603" fg:w="1"/><text x="98.1396%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.32%)</title><rect x="98.0519%" y="757" width="0.3247%" height="15" fill="rgb(215,223,47)" fg:x="604" fg:w="2"/><text x="98.3019%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.32%)</title><rect x="98.3766%" y="725" width="0.3247%" height="15" fill="rgb(248,225,23)" fg:x="606" fg:w="2"/><text x="98.6266%" y="735.50"></text></g><g><title>all (616 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="616"/><text x="0.2500%" y="927.50"></text></g><g><title>dyld`start (616 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="616"/><text x="0.2500%" y="911.50">dyld`start</text></g><g><title>sudoku-solver`main (615 samples, 99.84%)</title><rect x="0.1623%" y="885" width="99.8377%" height="15" fill="rgb(244,45,10)" fg:x="1" fg:w="615"/><text x="0.4123%" y="895.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (615 samples, 99.84%)</title><rect x="0.1623%" y="869" width="99.8377%" height="15" fill="rgb(207,125,25)" fg:x="1" fg:w="615"/><text x="0.4123%" y="879.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (615 samples, 99.84%)</title><rect x="0.1623%" y="853" width="99.8377%" height="15" fill="rgb(210,195,18)" fg:x="1" fg:w="615"/><text x="0.4123%" y="863.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (615 samples, 99.84%)</title><rect x="0.1623%" y="837" width="99.8377%" height="15" fill="rgb(249,80,12)" fg:x="1" fg:w="615"/><text x="0.4123%" y="847.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (612 samples, 99.35%)</title><rect x="0.6494%" y="821" width="99.3506%" height="15" fill="rgb(221,65,9)" fg:x="4" fg:w="612"/><text x="0.8994%" y="831.50">sudoku-solver`sudoku_solver::main</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (12 samples, 1.95%)</title><rect x="98.0519%" y="805" width="1.9481%" height="15" fill="rgb(235,49,36)" fg:x="604" fg:w="12"/><text x="98.3019%" y="815.50">s..</text></g><g><title>sudoku-solver`std::io::stdio::_print (12 samples, 1.95%)</title><rect x="98.0519%" y="789" width="1.9481%" height="15" fill="rgb(225,32,20)" fg:x="604" fg:w="12"/><text x="98.3019%" y="799.50">s..</text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12 samples, 1.95%)</title><rect x="98.0519%" y="773" width="1.9481%" height="15" fill="rgb(215,141,46)" fg:x="604" fg:w="12"/><text x="98.3019%" y="783.50">s..</text></g><g><title>sudoku-solver`core::fmt::write (10 samples, 1.62%)</title><rect x="98.3766%" y="757" width="1.6234%" height="15" fill="rgb(250,160,47)" fg:x="606" fg:w="10"/><text x="98.6266%" y="767.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 1.62%)</title><rect x="98.3766%" y="741" width="1.6234%" height="15" fill="rgb(216,222,40)" fg:x="606" fg:w="10"/><text x="98.6266%" y="751.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 1.30%)</title><rect x="98.7013%" y="725" width="1.2987%" height="15" fill="rgb(234,217,39)" fg:x="608" fg:w="8"/><text x="98.9513%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 1.30%)</title><rect x="98.7013%" y="709" width="1.2987%" height="15" fill="rgb(207,178,40)" fg:x="608" fg:w="8"/><text x="98.9513%" y="719.50"></text></g></svg></svg>