<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="23574"><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.02%)</title><rect x="0.0042%" y="869" width="0.0170%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="4"/><text x="0.2542%" y="879.50"></text></g><g><title>dyld`start (6 samples, 0.03%)</title><rect x="0.0000%" y="965" width="0.0255%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="975.50"></text></g><g><title>sudoku-solver`main (6 samples, 0.03%)</title><rect x="0.0000%" y="949" width="0.0255%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="959.50"></text></g><g><title>sudoku-solver`std::rt::lang_start_internal (6 samples, 0.03%)</title><rect x="0.0000%" y="933" width="0.0255%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="943.50"></text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (6 samples, 0.03%)</title><rect x="0.0000%" y="917" width="0.0255%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="927.50"></text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.03%)</title><rect x="0.0000%" y="901" width="0.0255%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="911.50"></text></g><g><title>sudoku-solver`sudoku_solver::main (6 samples, 0.03%)</title><rect x="0.0000%" y="885" width="0.0255%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.01%)</title><rect x="0.0255%" y="885" width="0.0127%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="3"/><text x="0.2755%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="0.0382%" y="885" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="3"/><text x="0.2882%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.03%)</title><rect x="0.0594%" y="885" width="0.0255%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="6"/><text x="0.3094%" y="895.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (5 samples, 0.02%)</title><rect x="0.0976%" y="885" width="0.0212%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="5"/><text x="0.3476%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.01%)</title><rect x="0.1866%" y="869" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="44" fg:w="3"/><text x="0.4366%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.08%)</title><rect x="0.2800%" y="853" width="0.0806%" height="15" fill="rgb(216,20,37)" fg:x="66" fg:w="19"/><text x="0.5300%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.17%)</title><rect x="0.1994%" y="869" width="0.1654%" height="15" fill="rgb(206,188,39)" fg:x="47" fg:w="39"/><text x="0.4494%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.02%)</title><rect x="0.3648%" y="869" width="0.0170%" height="15" fill="rgb(217,207,13)" fg:x="86" fg:w="4"/><text x="0.6148%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="0.3860%" y="869" width="0.0170%" height="15" fill="rgb(231,73,38)" fg:x="91" fg:w="4"/><text x="0.6360%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.06%)</title><rect x="0.4030%" y="869" width="0.0636%" height="15" fill="rgb(225,20,46)" fg:x="95" fg:w="15"/><text x="0.6530%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="0.4666%" y="869" width="0.0170%" height="15" fill="rgb(210,31,41)" fg:x="110" fg:w="4"/><text x="0.7166%" y="879.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="0.4836%" y="869" width="0.0127%" height="15" fill="rgb(221,200,47)" fg:x="114" fg:w="3"/><text x="0.7336%" y="879.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="0.5048%" y="869" width="0.0127%" height="15" fill="rgb(226,26,5)" fg:x="119" fg:w="3"/><text x="0.7548%" y="879.50"></text></g><g><title>sudoku-solver`core::slice::sort::recurse (83 samples, 0.35%)</title><rect x="0.5175%" y="869" width="0.3521%" height="15" fill="rgb(249,33,26)" fg:x="122" fg:w="83"/><text x="0.7675%" y="879.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (34 samples, 0.14%)</title><rect x="0.8738%" y="837" width="0.1442%" height="15" fill="rgb(235,183,28)" fg:x="206" fg:w="34"/><text x="1.1238%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (34 samples, 0.14%)</title><rect x="0.8738%" y="821" width="0.1442%" height="15" fill="rgb(221,5,38)" fg:x="206" fg:w="34"/><text x="1.1238%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`write (26 samples, 0.11%)</title><rect x="1.0266%" y="805" width="0.1103%" height="15" fill="rgb(247,18,42)" fg:x="242" fg:w="26"/><text x="1.2766%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.03%)</title><rect x="1.1411%" y="789" width="0.0297%" height="15" fill="rgb(241,131,45)" fg:x="269" fg:w="7"/><text x="1.3911%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.15%)</title><rect x="1.0266%" y="821" width="0.1485%" height="15" fill="rgb(249,31,29)" fg:x="242" fg:w="35"/><text x="1.2766%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 0.04%)</title><rect x="1.1368%" y="805" width="0.0382%" height="15" fill="rgb(225,111,53)" fg:x="268" fg:w="9"/><text x="1.3868%" y="815.50"></text></g><g><title>sudoku-solver`std::io::stdio::_print (74 samples, 0.31%)</title><rect x="0.8696%" y="869" width="0.3139%" height="15" fill="rgb(238,160,17)" fg:x="205" fg:w="74"/><text x="1.1196%" y="879.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (73 samples, 0.31%)</title><rect x="0.8738%" y="853" width="0.3097%" height="15" fill="rgb(214,148,48)" fg:x="206" fg:w="73"/><text x="1.1238%" y="863.50"></text></g><g><title>sudoku-solver`core::fmt::write (37 samples, 0.16%)</title><rect x="1.0266%" y="837" width="0.1570%" height="15" fill="rgb(232,36,49)" fg:x="242" fg:w="37"/><text x="1.2766%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="1.6332%" y="709" width="0.0170%" height="15" fill="rgb(209,103,24)" fg:x="385" fg:w="4"/><text x="1.8832%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="1.6501%" y="709" width="0.0212%" height="15" fill="rgb(229,88,8)" fg:x="389" fg:w="5"/><text x="1.9001%" y="719.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="1.6756%" y="709" width="0.0170%" height="15" fill="rgb(213,181,19)" fg:x="395" fg:w="4"/><text x="1.9256%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="1.8156%" y="693" width="0.0127%" height="15" fill="rgb(254,191,54)" fg:x="428" fg:w="3"/><text x="2.0656%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="1.8283%" y="693" width="0.0170%" height="15" fill="rgb(241,83,37)" fg:x="431" fg:w="4"/><text x="2.0783%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="1.9895%" y="677" width="0.0127%" height="15" fill="rgb(233,36,39)" fg:x="469" fg:w="3"/><text x="2.2395%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="2.0022%" y="677" width="0.0212%" height="15" fill="rgb(226,3,54)" fg:x="472" fg:w="5"/><text x="2.2522%" y="687.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="2.0277%" y="677" width="0.0127%" height="15" fill="rgb(245,192,40)" fg:x="478" fg:w="3"/><text x="2.2777%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="2.3416%" y="645" width="0.0170%" height="15" fill="rgb(238,167,29)" fg:x="552" fg:w="4"/><text x="2.5916%" y="655.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="2.3628%" y="645" width="0.0170%" height="15" fill="rgb(232,182,51)" fg:x="557" fg:w="4"/><text x="2.6128%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="2.5282%" y="629" width="0.0212%" height="15" fill="rgb(231,60,39)" fg:x="596" fg:w="5"/><text x="2.7782%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="2.5494%" y="629" width="0.0170%" height="15" fill="rgb(208,69,12)" fg:x="601" fg:w="4"/><text x="2.7994%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="2.5664%" y="629" width="0.0170%" height="15" fill="rgb(235,93,37)" fg:x="605" fg:w="4"/><text x="2.8164%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="2.7361%" y="613" width="0.0127%" height="15" fill="rgb(213,116,39)" fg:x="645" fg:w="3"/><text x="2.9861%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.01%)</title><rect x="2.8760%" y="597" width="0.0127%" height="15" fill="rgb(222,207,29)" fg:x="678" fg:w="3"/><text x="3.1260%" y="607.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="2.9015%" y="597" width="0.0127%" height="15" fill="rgb(206,96,30)" fg:x="684" fg:w="3"/><text x="3.1515%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="3.2196%" y="565" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="759" fg:w="3"/><text x="3.4696%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="3.2493%" y="565" width="0.0212%" height="15" fill="rgb(250,191,14)" fg:x="766" fg:w="5"/><text x="3.4993%" y="575.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="3.2875%" y="565" width="0.0127%" height="15" fill="rgb(239,60,40)" fg:x="775" fg:w="3"/><text x="3.5375%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="3.4742%" y="549" width="0.0170%" height="15" fill="rgb(206,27,48)" fg:x="819" fg:w="4"/><text x="3.7242%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.04%)</title><rect x="3.4911%" y="549" width="0.0382%" height="15" fill="rgb(225,35,8)" fg:x="823" fg:w="9"/><text x="3.7411%" y="559.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="3.5463%" y="549" width="0.0170%" height="15" fill="rgb(250,213,24)" fg:x="836" fg:w="4"/><text x="3.7963%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="3.7711%" y="533" width="0.0212%" height="15" fill="rgb(247,123,22)" fg:x="889" fg:w="5"/><text x="4.0211%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="3.8008%" y="533" width="0.0127%" height="15" fill="rgb(231,138,38)" fg:x="896" fg:w="3"/><text x="4.0508%" y="543.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="3.8220%" y="533" width="0.0170%" height="15" fill="rgb(231,145,46)" fg:x="901" fg:w="4"/><text x="4.0720%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.03%)</title><rect x="4.1826%" y="517" width="0.0255%" height="15" fill="rgb(251,118,11)" fg:x="986" fg:w="6"/><text x="4.4326%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.06%)</title><rect x="4.2080%" y="517" width="0.0636%" height="15" fill="rgb(217,147,25)" fg:x="992" fg:w="15"/><text x="4.4580%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.03%)</title><rect x="4.2717%" y="517" width="0.0339%" height="15" fill="rgb(247,81,37)" fg:x="1007" fg:w="8"/><text x="4.5217%" y="527.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (7 samples, 0.03%)</title><rect x="4.3141%" y="517" width="0.0297%" height="15" fill="rgb(209,12,38)" fg:x="1017" fg:w="7"/><text x="4.5641%" y="527.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="4.3438%" y="517" width="0.0170%" height="15" fill="rgb(227,1,9)" fg:x="1024" fg:w="4"/><text x="4.5938%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.04%)</title><rect x="4.9122%" y="501" width="0.0424%" height="15" fill="rgb(248,47,43)" fg:x="1158" fg:w="10"/><text x="5.1622%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="4.9546%" y="501" width="0.0339%" height="15" fill="rgb(221,10,30)" fg:x="1168" fg:w="8"/><text x="5.2046%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.06%)</title><rect x="4.9885%" y="501" width="0.0636%" height="15" fill="rgb(210,229,1)" fg:x="1176" fg:w="15"/><text x="5.2385%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.03%)</title><rect x="5.0522%" y="501" width="0.0339%" height="15" fill="rgb(222,148,37)" fg:x="1191" fg:w="8"/><text x="5.3022%" y="511.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (6 samples, 0.03%)</title><rect x="5.0861%" y="501" width="0.0255%" height="15" fill="rgb(234,67,33)" fg:x="1199" fg:w="6"/><text x="5.3361%" y="511.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="5.1116%" y="501" width="0.0212%" height="15" fill="rgb(247,98,35)" fg:x="1205" fg:w="5"/><text x="5.3616%" y="511.50"></text></g><g><title>sudoku-solver`__rdl_alloc (6 samples, 0.03%)</title><rect x="5.1328%" y="501" width="0.0255%" height="15" fill="rgb(247,138,52)" fg:x="1210" fg:w="6"/><text x="5.3828%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.04%)</title><rect x="5.9345%" y="485" width="0.0424%" height="15" fill="rgb(213,79,30)" fg:x="1399" fg:w="10"/><text x="6.1845%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.04%)</title><rect x="5.9769%" y="485" width="0.0424%" height="15" fill="rgb(246,177,23)" fg:x="1409" fg:w="10"/><text x="6.2269%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.06%)</title><rect x="6.0193%" y="485" width="0.0551%" height="15" fill="rgb(230,62,27)" fg:x="1419" fg:w="13"/><text x="6.2693%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.03%)</title><rect x="6.0745%" y="485" width="0.0297%" height="15" fill="rgb(216,154,8)" fg:x="1432" fg:w="7"/><text x="6.3245%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (7 samples, 0.03%)</title><rect x="6.1042%" y="485" width="0.0297%" height="15" fill="rgb(244,35,45)" fg:x="1439" fg:w="7"/><text x="6.3542%" y="495.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (7 samples, 0.03%)</title><rect x="6.1339%" y="485" width="0.0297%" height="15" fill="rgb(251,115,12)" fg:x="1446" fg:w="7"/><text x="6.3839%" y="495.50"></text></g><g><title>sudoku-solver`__rdl_alloc (5 samples, 0.02%)</title><rect x="6.1636%" y="485" width="0.0212%" height="15" fill="rgb(240,54,50)" fg:x="1453" fg:w="5"/><text x="6.4136%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.04%)</title><rect x="6.9823%" y="469" width="0.0424%" height="15" fill="rgb(233,84,52)" fg:x="1646" fg:w="10"/><text x="7.2323%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="7.0247%" y="469" width="0.0339%" height="15" fill="rgb(207,117,47)" fg:x="1656" fg:w="8"/><text x="7.2747%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.05%)</title><rect x="7.0586%" y="469" width="0.0509%" height="15" fill="rgb(249,43,39)" fg:x="1664" fg:w="12"/><text x="7.3086%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="7.1095%" y="469" width="0.0170%" height="15" fill="rgb(209,38,44)" fg:x="1676" fg:w="4"/><text x="7.3595%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (11 samples, 0.05%)</title><rect x="7.1265%" y="469" width="0.0467%" height="15" fill="rgb(236,212,23)" fg:x="1680" fg:w="11"/><text x="7.3765%" y="479.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (7 samples, 0.03%)</title><rect x="7.1732%" y="469" width="0.0297%" height="15" fill="rgb(242,79,21)" fg:x="1691" fg:w="7"/><text x="7.4232%" y="479.50"></text></g><g><title>sudoku-solver`__rdl_alloc (8 samples, 0.03%)</title><rect x="7.2029%" y="469" width="0.0339%" height="15" fill="rgb(211,96,35)" fg:x="1698" fg:w="8"/><text x="7.4529%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="7.8943%" y="453" width="0.0170%" height="15" fill="rgb(253,215,40)" fg:x="1861" fg:w="4"/><text x="8.1443%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.03%)</title><rect x="7.9113%" y="453" width="0.0339%" height="15" fill="rgb(211,81,21)" fg:x="1865" fg:w="8"/><text x="8.1613%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.11%)</title><rect x="7.9452%" y="453" width="0.1103%" height="15" fill="rgb(208,190,38)" fg:x="1873" fg:w="26"/><text x="8.1952%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.07%)</title><rect x="8.0555%" y="453" width="0.0679%" height="15" fill="rgb(235,213,38)" fg:x="1899" fg:w="16"/><text x="8.3055%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.03%)</title><rect x="8.1234%" y="453" width="0.0297%" height="15" fill="rgb(237,122,38)" fg:x="1915" fg:w="7"/><text x="8.3734%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (8 samples, 0.03%)</title><rect x="8.1530%" y="453" width="0.0339%" height="15" fill="rgb(244,218,35)" fg:x="1922" fg:w="8"/><text x="8.4030%" y="463.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="8.1870%" y="453" width="0.0212%" height="15" fill="rgb(240,68,47)" fg:x="1930" fg:w="5"/><text x="8.4370%" y="463.50"></text></g><g><title>sudoku-solver`__rdl_alloc (5 samples, 0.02%)</title><rect x="8.2082%" y="453" width="0.0212%" height="15" fill="rgb(210,16,53)" fg:x="1935" fg:w="5"/><text x="8.4582%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.03%)</title><rect x="8.9039%" y="437" width="0.0339%" height="15" fill="rgb(235,124,12)" fg:x="2099" fg:w="8"/><text x="9.1539%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="8.9378%" y="437" width="0.0339%" height="15" fill="rgb(224,169,11)" fg:x="2107" fg:w="8"/><text x="9.1878%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.06%)</title><rect x="8.9717%" y="437" width="0.0551%" height="15" fill="rgb(250,166,2)" fg:x="2115" fg:w="13"/><text x="9.2217%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="9.0269%" y="437" width="0.0170%" height="15" fill="rgb(242,216,29)" fg:x="2128" fg:w="4"/><text x="9.2769%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (11 samples, 0.05%)</title><rect x="9.0439%" y="437" width="0.0467%" height="15" fill="rgb(230,116,27)" fg:x="2132" fg:w="11"/><text x="9.2939%" y="447.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="9.0905%" y="437" width="0.0212%" height="15" fill="rgb(228,99,48)" fg:x="2143" fg:w="5"/><text x="9.3405%" y="447.50"></text></g><g><title>sudoku-solver`__rdl_alloc (9 samples, 0.04%)</title><rect x="9.1117%" y="437" width="0.0382%" height="15" fill="rgb(253,11,6)" fg:x="2148" fg:w="9"/><text x="9.3617%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="9.7692%" y="421" width="0.0255%" height="15" fill="rgb(247,143,39)" fg:x="2303" fg:w="6"/><text x="10.0192%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (13 samples, 0.06%)</title><rect x="9.7947%" y="421" width="0.0551%" height="15" fill="rgb(236,97,10)" fg:x="2309" fg:w="13"/><text x="10.0447%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.08%)</title><rect x="9.8498%" y="421" width="0.0848%" height="15" fill="rgb(233,208,19)" fg:x="2322" fg:w="20"/><text x="10.0998%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.05%)</title><rect x="9.9347%" y="421" width="0.0509%" height="15" fill="rgb(216,164,2)" fg:x="2342" fg:w="12"/><text x="10.1847%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="9.9856%" y="421" width="0.0170%" height="15" fill="rgb(220,129,5)" fg:x="2354" fg:w="4"/><text x="10.2356%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (11 samples, 0.05%)</title><rect x="10.0025%" y="421" width="0.0467%" height="15" fill="rgb(242,17,10)" fg:x="2358" fg:w="11"/><text x="10.2525%" y="431.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (8 samples, 0.03%)</title><rect x="10.0492%" y="421" width="0.0339%" height="15" fill="rgb(242,107,0)" fg:x="2369" fg:w="8"/><text x="10.2992%" y="431.50"></text></g><g><title>sudoku-solver`__rdl_alloc (8 samples, 0.03%)</title><rect x="10.0831%" y="421" width="0.0339%" height="15" fill="rgb(251,28,31)" fg:x="2377" fg:w="8"/><text x="10.3331%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.05%)</title><rect x="10.8637%" y="405" width="0.0467%" height="15" fill="rgb(233,223,10)" fg:x="2561" fg:w="11"/><text x="11.1137%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.07%)</title><rect x="10.9103%" y="405" width="0.0721%" height="15" fill="rgb(215,21,27)" fg:x="2572" fg:w="17"/><text x="11.1603%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.07%)</title><rect x="10.9824%" y="405" width="0.0679%" height="15" fill="rgb(232,23,21)" fg:x="2589" fg:w="16"/><text x="11.2324%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="11.0503%" y="405" width="0.0212%" height="15" fill="rgb(244,5,23)" fg:x="2605" fg:w="5"/><text x="11.3003%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (12 samples, 0.05%)</title><rect x="11.0715%" y="405" width="0.0509%" height="15" fill="rgb(226,81,46)" fg:x="2610" fg:w="12"/><text x="11.3215%" y="415.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (15 samples, 0.06%)</title><rect x="11.1224%" y="405" width="0.0636%" height="15" fill="rgb(247,70,30)" fg:x="2622" fg:w="15"/><text x="11.3724%" y="415.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="11.1861%" y="405" width="0.0127%" height="15" fill="rgb(212,68,19)" fg:x="2637" fg:w="3"/><text x="11.4361%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.05%)</title><rect x="11.9835%" y="389" width="0.0467%" height="15" fill="rgb(240,187,13)" fg:x="2825" fg:w="11"/><text x="12.2335%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.06%)</title><rect x="12.0302%" y="389" width="0.0636%" height="15" fill="rgb(223,113,26)" fg:x="2836" fg:w="15"/><text x="12.2802%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.05%)</title><rect x="12.0938%" y="389" width="0.0509%" height="15" fill="rgb(206,192,2)" fg:x="2851" fg:w="12"/><text x="12.3438%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.03%)</title><rect x="12.1447%" y="389" width="0.0339%" height="15" fill="rgb(241,108,4)" fg:x="2863" fg:w="8"/><text x="12.3947%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (10 samples, 0.04%)</title><rect x="12.1787%" y="389" width="0.0424%" height="15" fill="rgb(247,173,49)" fg:x="2871" fg:w="10"/><text x="12.4287%" y="399.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (13 samples, 0.06%)</title><rect x="12.2211%" y="389" width="0.0551%" height="15" fill="rgb(224,114,35)" fg:x="2881" fg:w="13"/><text x="12.4711%" y="399.50"></text></g><g><title>sudoku-solver`__rdl_alloc (5 samples, 0.02%)</title><rect x="12.2762%" y="389" width="0.0212%" height="15" fill="rgb(245,159,27)" fg:x="2894" fg:w="5"/><text x="12.5262%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="12.8701%" y="373" width="0.0127%" height="15" fill="rgb(245,172,44)" fg:x="3034" fg:w="3"/><text x="13.1201%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.04%)</title><rect x="12.8828%" y="373" width="0.0382%" height="15" fill="rgb(236,23,11)" fg:x="3037" fg:w="9"/><text x="13.1328%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.06%)</title><rect x="12.9210%" y="373" width="0.0636%" height="15" fill="rgb(205,117,38)" fg:x="3046" fg:w="15"/><text x="13.1710%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.03%)</title><rect x="12.9846%" y="373" width="0.0339%" height="15" fill="rgb(237,72,25)" fg:x="3061" fg:w="8"/><text x="13.2346%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="13.0271%" y="373" width="0.0170%" height="15" fill="rgb(244,70,9)" fg:x="3071" fg:w="4"/><text x="13.2771%" y="383.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="13.0440%" y="373" width="0.0212%" height="15" fill="rgb(217,125,39)" fg:x="3075" fg:w="5"/><text x="13.2940%" y="383.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="13.0652%" y="373" width="0.0127%" height="15" fill="rgb(235,36,10)" fg:x="3080" fg:w="3"/><text x="13.3152%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.05%)</title><rect x="13.5446%" y="357" width="0.0509%" height="15" fill="rgb(251,123,47)" fg:x="3193" fg:w="12"/><text x="13.7946%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.07%)</title><rect x="13.5955%" y="357" width="0.0679%" height="15" fill="rgb(221,13,13)" fg:x="3205" fg:w="16"/><text x="13.8455%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="13.6718%" y="357" width="0.0170%" height="15" fill="rgb(238,131,9)" fg:x="3223" fg:w="4"/><text x="13.9218%" y="367.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="13.6888%" y="357" width="0.0170%" height="15" fill="rgb(211,50,8)" fg:x="3227" fg:w="4"/><text x="13.9388%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.03%)</title><rect x="13.9942%" y="341" width="0.0255%" height="15" fill="rgb(245,182,24)" fg:x="3299" fg:w="6"/><text x="14.2442%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="14.0197%" y="341" width="0.0212%" height="15" fill="rgb(242,14,37)" fg:x="3305" fg:w="5"/><text x="14.2697%" y="351.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="14.0663%" y="341" width="0.0127%" height="15" fill="rgb(246,228,12)" fg:x="3316" fg:w="3"/><text x="14.3163%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="14.2360%" y="325" width="0.0212%" height="15" fill="rgb(213,55,15)" fg:x="3356" fg:w="5"/><text x="14.4860%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="14.2572%" y="325" width="0.0212%" height="15" fill="rgb(209,9,3)" fg:x="3361" fg:w="5"/><text x="14.5072%" y="335.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="14.2869%" y="325" width="0.0127%" height="15" fill="rgb(230,59,30)" fg:x="3368" fg:w="3"/><text x="14.5369%" y="335.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="14.2997%" y="325" width="0.0127%" height="15" fill="rgb(209,121,21)" fg:x="3371" fg:w="3"/><text x="14.5497%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="14.5839%" y="293" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="3438" fg:w="3"/><text x="14.8339%" y="303.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="14.6857%" y="277" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="3462" fg:w="3"/><text x="14.9357%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="14.8766%" y="245" width="0.0127%" height="15" fill="rgb(215,41,42)" fg:x="3507" fg:w="3"/><text x="15.1266%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (4 samples, 0.02%)</title><rect x="15.3262%" y="69" width="0.0170%" height="15" fill="rgb(224,123,36)" fg:x="3613" fg:w="4"/><text x="15.5762%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.01%)</title><rect x="15.3304%" y="53" width="0.0127%" height="15" fill="rgb(240,125,3)" fg:x="3614" fg:w="3"/><text x="15.5804%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3 samples, 0.01%)</title><rect x="15.3304%" y="37" width="0.0127%" height="15" fill="rgb(205,98,50)" fg:x="3614" fg:w="3"/><text x="15.5804%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11 samples, 0.05%)</title><rect x="15.3177%" y="85" width="0.0467%" height="15" fill="rgb(205,185,37)" fg:x="3611" fg:w="11"/><text x="15.5677%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.02%)</title><rect x="15.3432%" y="69" width="0.0212%" height="15" fill="rgb(238,207,15)" fg:x="3617" fg:w="5"/><text x="15.5932%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (22 samples, 0.09%)</title><rect x="15.3135%" y="101" width="0.0933%" height="15" fill="rgb(213,199,42)" fg:x="3610" fg:w="22"/><text x="15.5635%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (10 samples, 0.04%)</title><rect x="15.3644%" y="85" width="0.0424%" height="15" fill="rgb(235,201,11)" fg:x="3622" fg:w="10"/><text x="15.6144%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (35 samples, 0.15%)</title><rect x="15.3050%" y="117" width="0.1485%" height="15" fill="rgb(207,46,11)" fg:x="3608" fg:w="35"/><text x="15.5550%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.05%)</title><rect x="15.4068%" y="101" width="0.0467%" height="15" fill="rgb(241,35,35)" fg:x="3632" fg:w="11"/><text x="15.6568%" y="111.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (55 samples, 0.23%)</title><rect x="15.2880%" y="133" width="0.2333%" height="15" fill="rgb(243,32,47)" fg:x="3604" fg:w="55"/><text x="15.5380%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (16 samples, 0.07%)</title><rect x="15.4535%" y="117" width="0.0679%" height="15" fill="rgb(247,202,23)" fg:x="3643" fg:w="16"/><text x="15.7035%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="15.5807%" y="117" width="0.0127%" height="15" fill="rgb(219,102,11)" fg:x="3673" fg:w="3"/><text x="15.8307%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (76 samples, 0.32%)</title><rect x="15.2753%" y="149" width="0.3224%" height="15" fill="rgb(243,110,44)" fg:x="3601" fg:w="76"/><text x="15.5253%" y="159.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (18 samples, 0.08%)</title><rect x="15.5213%" y="133" width="0.0764%" height="15" fill="rgb(222,74,54)" fg:x="3659" fg:w="18"/><text x="15.7713%" y="143.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (116 samples, 0.49%)</title><rect x="15.2583%" y="165" width="0.4921%" height="15" fill="rgb(216,99,12)" fg:x="3597" fg:w="116"/><text x="15.5083%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (36 samples, 0.15%)</title><rect x="15.5977%" y="149" width="0.1527%" height="15" fill="rgb(226,22,26)" fg:x="3677" fg:w="36"/><text x="15.8477%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="15.9201%" y="149" width="0.0170%" height="15" fill="rgb(217,163,10)" fg:x="3753" fg:w="4"/><text x="16.1701%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="15.9243%" y="133" width="0.0127%" height="15" fill="rgb(213,25,53)" fg:x="3754" fg:w="3"/><text x="16.1743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="15.9243%" y="117" width="0.0127%" height="15" fill="rgb(252,105,26)" fg:x="3754" fg:w="3"/><text x="16.1743%" y="127.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (177 samples, 0.75%)</title><rect x="15.1989%" y="181" width="0.7508%" height="15" fill="rgb(220,39,43)" fg:x="3583" fg:w="177"/><text x="15.4489%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (47 samples, 0.20%)</title><rect x="15.7504%" y="165" width="0.1994%" height="15" fill="rgb(229,68,48)" fg:x="3713" fg:w="47"/><text x="16.0004%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="16.2594%" y="133" width="0.0170%" height="15" fill="rgb(252,8,32)" fg:x="3833" fg:w="4"/><text x="16.5094%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="16.2510%" y="165" width="0.0297%" height="15" fill="rgb(223,20,43)" fg:x="3831" fg:w="7"/><text x="16.5010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.03%)</title><rect x="16.2552%" y="149" width="0.0255%" height="15" fill="rgb(229,81,49)" fg:x="3832" fg:w="6"/><text x="16.5052%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="16.2891%" y="165" width="0.0339%" height="15" fill="rgb(236,28,36)" fg:x="3840" fg:w="8"/><text x="16.5391%" y="175.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (284 samples, 1.20%)</title><rect x="15.1311%" y="197" width="1.2047%" height="15" fill="rgb(249,185,26)" fg:x="3567" fg:w="284"/><text x="15.3811%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (91 samples, 0.39%)</title><rect x="15.9498%" y="181" width="0.3860%" height="15" fill="rgb(249,174,33)" fg:x="3760" fg:w="91"/><text x="16.1998%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="16.6921%" y="149" width="0.0297%" height="15" fill="rgb(233,201,37)" fg:x="3935" fg:w="7"/><text x="16.9421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.06%)</title><rect x="16.6667%" y="181" width="0.0594%" height="15" fill="rgb(221,78,26)" fg:x="3929" fg:w="14"/><text x="16.9167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="16.6836%" y="165" width="0.0424%" height="15" fill="rgb(250,127,30)" fg:x="3933" fg:w="10"/><text x="16.9336%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.04%)</title><rect x="16.7261%" y="181" width="0.0424%" height="15" fill="rgb(230,49,44)" fg:x="3943" fg:w="10"/><text x="16.9761%" y="191.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (408 samples, 1.73%)</title><rect x="15.0547%" y="213" width="1.7307%" height="15" fill="rgb(229,67,23)" fg:x="3549" fg:w="408"/><text x="15.3047%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (106 samples, 0.45%)</title><rect x="16.3358%" y="197" width="0.4496%" height="15" fill="rgb(249,83,47)" fg:x="3851" fg:w="106"/><text x="16.5858%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="16.7685%" y="181" width="0.0170%" height="15" fill="rgb(215,43,3)" fg:x="3953" fg:w="4"/><text x="17.0185%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.05%)</title><rect x="17.1503%" y="197" width="0.0509%" height="15" fill="rgb(238,154,13)" fg:x="4043" fg:w="12"/><text x="17.4003%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.05%)</title><rect x="17.1545%" y="181" width="0.0467%" height="15" fill="rgb(219,56,2)" fg:x="4044" fg:w="11"/><text x="17.4045%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.05%)</title><rect x="17.1545%" y="165" width="0.0467%" height="15" fill="rgb(233,0,4)" fg:x="4044" fg:w="11"/><text x="17.4045%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="17.1757%" y="149" width="0.0255%" height="15" fill="rgb(235,30,7)" fg:x="4049" fg:w="6"/><text x="17.4257%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.04%)</title><rect x="17.2012%" y="197" width="0.0424%" height="15" fill="rgb(250,79,13)" fg:x="4055" fg:w="10"/><text x="17.4512%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.02%)</title><rect x="17.2266%" y="181" width="0.0170%" height="15" fill="rgb(211,146,34)" fg:x="4061" fg:w="4"/><text x="17.4766%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="17.2478%" y="197" width="0.0212%" height="15" fill="rgb(228,22,38)" fg:x="4066" fg:w="5"/><text x="17.4978%" y="207.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (542 samples, 2.30%)</title><rect x="14.9741%" y="229" width="2.2991%" height="15" fill="rgb(235,168,5)" fg:x="3530" fg:w="542"/><text x="15.2241%" y="239.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (115 samples, 0.49%)</title><rect x="16.7854%" y="213" width="0.4878%" height="15" fill="rgb(221,155,16)" fg:x="3957" fg:w="115"/><text x="17.0354%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.04%)</title><rect x="17.7314%" y="181" width="0.0382%" height="15" fill="rgb(215,215,53)" fg:x="4180" fg:w="9"/><text x="17.9814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.06%)</title><rect x="17.7102%" y="213" width="0.0636%" height="15" fill="rgb(223,4,10)" fg:x="4175" fg:w="15"/><text x="17.9602%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="17.7314%" y="197" width="0.0424%" height="15" fill="rgb(234,103,6)" fg:x="4180" fg:w="10"/><text x="17.9814%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="17.8205%" y="197" width="0.0212%" height="15" fill="rgb(227,97,0)" fg:x="4201" fg:w="5"/><text x="18.0705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.07%)</title><rect x="17.7781%" y="213" width="0.0679%" height="15" fill="rgb(234,150,53)" fg:x="4191" fg:w="16"/><text x="18.0281%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (699 samples, 2.97%)</title><rect x="14.8978%" y="245" width="2.9651%" height="15" fill="rgb(228,201,54)" fg:x="3512" fg:w="699"/><text x="15.1478%" y="255.50">sud..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (139 samples, 0.59%)</title><rect x="17.2733%" y="229" width="0.5896%" height="15" fill="rgb(222,22,37)" fg:x="4072" fg:w="139"/><text x="17.5233%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.04%)</title><rect x="18.3083%" y="197" width="0.0382%" height="15" fill="rgb(237,53,32)" fg:x="4316" fg:w="9"/><text x="18.5583%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="18.2829%" y="229" width="0.0679%" height="15" fill="rgb(233,25,53)" fg:x="4310" fg:w="16"/><text x="18.5329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="18.3083%" y="213" width="0.0424%" height="15" fill="rgb(210,40,34)" fg:x="4316" fg:w="10"/><text x="18.5583%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.03%)</title><rect x="18.3592%" y="229" width="0.0297%" height="15" fill="rgb(241,220,44)" fg:x="4328" fg:w="7"/><text x="18.6092%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="18.3762%" y="213" width="0.0127%" height="15" fill="rgb(235,28,35)" fg:x="4332" fg:w="3"/><text x="18.6262%" y="223.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (852 samples, 3.61%)</title><rect x="14.7875%" y="261" width="3.6142%" height="15" fill="rgb(210,56,17)" fg:x="3486" fg:w="852"/><text x="15.0375%" y="271.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (127 samples, 0.54%)</title><rect x="17.8629%" y="245" width="0.5387%" height="15" fill="rgb(224,130,29)" fg:x="4211" fg:w="127"/><text x="18.1129%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="18.3889%" y="229" width="0.0127%" height="15" fill="rgb(235,212,8)" fg:x="4335" fg:w="3"/><text x="18.6389%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.04%)</title><rect x="18.6901%" y="245" width="0.0424%" height="15" fill="rgb(223,33,50)" fg:x="4406" fg:w="10"/><text x="18.9401%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="18.7028%" y="229" width="0.0297%" height="15" fill="rgb(219,149,13)" fg:x="4409" fg:w="7"/><text x="18.9528%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="18.7071%" y="213" width="0.0255%" height="15" fill="rgb(250,156,29)" fg:x="4410" fg:w="6"/><text x="18.9571%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.03%)</title><rect x="18.7367%" y="245" width="0.0297%" height="15" fill="rgb(216,193,19)" fg:x="4417" fg:w="7"/><text x="18.9867%" y="255.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (960 samples, 4.07%)</title><rect x="14.6984%" y="277" width="4.0723%" height="15" fill="rgb(216,135,14)" fg:x="3465" fg:w="960"/><text x="14.9484%" y="287.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (87 samples, 0.37%)</title><rect x="18.4016%" y="261" width="0.3691%" height="15" fill="rgb(241,47,5)" fg:x="4338" fg:w="87"/><text x="18.6516%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="19.2246%" y="229" width="0.0339%" height="15" fill="rgb(233,42,35)" fg:x="4532" fg:w="8"/><text x="19.4746%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="19.2415%" y="213" width="0.0170%" height="15" fill="rgb(231,13,6)" fg:x="4536" fg:w="4"/><text x="19.4915%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="19.1991%" y="261" width="0.0679%" height="15" fill="rgb(207,181,40)" fg:x="4526" fg:w="16"/><text x="19.4491%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.05%)</title><rect x="19.2203%" y="245" width="0.0467%" height="15" fill="rgb(254,173,49)" fg:x="4531" fg:w="11"/><text x="19.4703%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="19.2670%" y="261" width="0.0127%" height="15" fill="rgb(221,1,38)" fg:x="4542" fg:w="3"/><text x="19.5170%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="19.3009%" y="245" width="0.0255%" height="15" fill="rgb(206,124,46)" fg:x="4550" fg:w="6"/><text x="19.5509%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.05%)</title><rect x="19.2797%" y="261" width="0.0509%" height="15" fill="rgb(249,21,11)" fg:x="4545" fg:w="12"/><text x="19.5297%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="19.3306%" y="261" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="4557" fg:w="3"/><text x="19.5806%" y="271.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,117 samples, 4.74%)</title><rect x="14.6093%" y="293" width="4.7383%" height="15" fill="rgb(235,61,29)" fg:x="3444" fg:w="1117"/><text x="14.8593%" y="303.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (136 samples, 0.58%)</title><rect x="18.7707%" y="277" width="0.5769%" height="15" fill="rgb(219,207,3)" fg:x="4425" fg:w="136"/><text x="19.0207%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.07%)</title><rect x="19.8990%" y="277" width="0.0721%" height="15" fill="rgb(222,56,46)" fg:x="4691" fg:w="17"/><text x="20.1490%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="19.9330%" y="261" width="0.0382%" height="15" fill="rgb(239,76,54)" fg:x="4699" fg:w="9"/><text x="20.1830%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="19.9457%" y="245" width="0.0255%" height="15" fill="rgb(231,124,27)" fg:x="4702" fg:w="6"/><text x="20.1957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="19.9712%" y="277" width="0.0127%" height="15" fill="rgb(249,195,6)" fg:x="4708" fg:w="3"/><text x="20.2212%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.04%)</title><rect x="19.9839%" y="277" width="0.0382%" height="15" fill="rgb(237,174,47)" fg:x="4711" fg:w="9"/><text x="20.2339%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="20.0008%" y="261" width="0.0212%" height="15" fill="rgb(206,201,31)" fg:x="4715" fg:w="5"/><text x="20.2508%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="20.0263%" y="277" width="0.0212%" height="15" fill="rgb(231,57,52)" fg:x="4721" fg:w="5"/><text x="20.2763%" y="287.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,317 samples, 5.59%)</title><rect x="14.4651%" y="309" width="5.5867%" height="15" fill="rgb(248,177,22)" fg:x="3410" fg:w="1317"/><text x="14.7151%" y="319.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (166 samples, 0.70%)</title><rect x="19.3476%" y="293" width="0.7042%" height="15" fill="rgb(215,211,37)" fg:x="4561" fg:w="166"/><text x="19.5976%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="20.8280%" y="293" width="0.0679%" height="15" fill="rgb(241,128,51)" fg:x="4910" fg:w="16"/><text x="21.0780%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.05%)</title><rect x="20.8450%" y="277" width="0.0509%" height="15" fill="rgb(227,165,31)" fg:x="4914" fg:w="12"/><text x="21.0950%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.05%)</title><rect x="20.8450%" y="261" width="0.0509%" height="15" fill="rgb(228,167,24)" fg:x="4914" fg:w="12"/><text x="21.0950%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.09%)</title><rect x="20.8959%" y="293" width="0.0933%" height="15" fill="rgb(228,143,12)" fg:x="4926" fg:w="22"/><text x="21.1459%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="20.9595%" y="277" width="0.0297%" height="15" fill="rgb(249,149,8)" fg:x="4941" fg:w="7"/><text x="21.2095%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="20.9892%" y="293" width="0.0212%" height="15" fill="rgb(243,35,44)" fg:x="4948" fg:w="5"/><text x="21.2392%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,582 samples, 6.71%)</title><rect x="14.3124%" y="325" width="6.7108%" height="15" fill="rgb(246,89,9)" fg:x="3374" fg:w="1582"/><text x="14.5624%" y="335.50">sudoku-so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (229 samples, 0.97%)</title><rect x="20.0518%" y="309" width="0.9714%" height="15" fill="rgb(233,213,13)" fg:x="4727" fg:w="229"/><text x="20.3018%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.07%)</title><rect x="22.1897%" y="277" width="0.0679%" height="15" fill="rgb(233,141,41)" fg:x="5231" fg:w="16"/><text x="22.4397%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="22.2448%" y="261" width="0.0127%" height="15" fill="rgb(239,167,4)" fg:x="5244" fg:w="3"/><text x="22.4948%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.14%)</title><rect x="22.1261%" y="309" width="0.1357%" height="15" fill="rgb(209,217,16)" fg:x="5216" fg:w="32"/><text x="22.3761%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.08%)</title><rect x="22.1770%" y="293" width="0.0848%" height="15" fill="rgb(219,88,35)" fg:x="5228" fg:w="20"/><text x="22.4270%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.16%)</title><rect x="22.2661%" y="309" width="0.1570%" height="15" fill="rgb(220,193,23)" fg:x="5249" fg:w="37"/><text x="22.5161%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.05%)</title><rect x="22.3721%" y="293" width="0.0509%" height="15" fill="rgb(230,90,52)" fg:x="5274" fg:w="12"/><text x="22.6221%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="22.4273%" y="309" width="0.0212%" height="15" fill="rgb(252,106,19)" fg:x="5287" fg:w="5"/><text x="22.6773%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (1,976 samples, 8.38%)</title><rect x="14.0876%" y="341" width="8.3821%" height="15" fill="rgb(206,74,20)" fg:x="3321" fg:w="1976"/><text x="14.3376%" y="351.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (341 samples, 1.45%)</title><rect x="21.0232%" y="325" width="1.4465%" height="15" fill="rgb(230,138,44)" fg:x="4956" fg:w="341"/><text x="21.2732%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="22.4485%" y="309" width="0.0212%" height="15" fill="rgb(235,182,43)" fg:x="5292" fg:w="5"/><text x="22.6985%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.10%)</title><rect x="24.3489%" y="293" width="0.1018%" height="15" fill="rgb(242,16,51)" fg:x="5740" fg:w="24"/><text x="24.5989%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="24.4252%" y="277" width="0.0255%" height="15" fill="rgb(248,9,4)" fg:x="5758" fg:w="6"/><text x="24.6752%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.24%)</title><rect x="24.2471%" y="325" width="0.2375%" height="15" fill="rgb(210,31,22)" fg:x="5716" fg:w="56"/><text x="24.4971%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.17%)</title><rect x="24.3192%" y="309" width="0.1654%" height="15" fill="rgb(239,54,39)" fg:x="5733" fg:w="39"/><text x="24.5692%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.03%)</title><rect x="24.4507%" y="293" width="0.0339%" height="15" fill="rgb(230,99,41)" fg:x="5764" fg:w="8"/><text x="24.7007%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="24.4846%" y="325" width="0.0212%" height="15" fill="rgb(253,106,12)" fg:x="5772" fg:w="5"/><text x="24.7346%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.07%)</title><rect x="24.5779%" y="309" width="0.0721%" height="15" fill="rgb(213,46,41)" fg:x="5794" fg:w="17"/><text x="24.8279%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.15%)</title><rect x="24.5058%" y="325" width="0.1485%" height="15" fill="rgb(215,133,35)" fg:x="5777" fg:w="35"/><text x="24.7558%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="24.6543%" y="325" width="0.0127%" height="15" fill="rgb(213,28,5)" fg:x="5812" fg:w="3"/><text x="24.9043%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.07%)</title><rect x="24.6670%" y="325" width="0.0721%" height="15" fill="rgb(215,77,49)" fg:x="5815" fg:w="17"/><text x="24.9170%" y="335.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,606 samples, 11.05%)</title><rect x="13.7100%" y="357" width="11.0546%" height="15" fill="rgb(248,100,22)" fg:x="3232" fg:w="2606"/><text x="13.9600%" y="367.50">sudoku-solver`su..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (541 samples, 2.29%)</title><rect x="22.4697%" y="341" width="2.2949%" height="15" fill="rgb(208,67,9)" fg:x="5297" fg:w="541"/><text x="22.7197%" y="351.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.03%)</title><rect x="24.7391%" y="325" width="0.0255%" height="15" fill="rgb(219,133,21)" fg:x="5832" fg:w="6"/><text x="24.9891%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (39 samples, 0.17%)</title><rect x="27.4582%" y="309" width="0.1654%" height="15" fill="rgb(246,46,29)" fg:x="6473" fg:w="39"/><text x="27.7082%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="27.6024%" y="293" width="0.0212%" height="15" fill="rgb(246,185,52)" fg:x="6507" fg:w="5"/><text x="27.8524%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (88 samples, 0.37%)</title><rect x="27.2885%" y="341" width="0.3733%" height="15" fill="rgb(252,136,11)" fg:x="6433" fg:w="88"/><text x="27.5385%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.24%)</title><rect x="27.4243%" y="325" width="0.2375%" height="15" fill="rgb(219,138,53)" fg:x="6465" fg:w="56"/><text x="27.6743%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="27.6237%" y="309" width="0.0382%" height="15" fill="rgb(211,51,23)" fg:x="6512" fg:w="9"/><text x="27.8737%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="27.6618%" y="341" width="0.0127%" height="15" fill="rgb(247,221,28)" fg:x="6521" fg:w="3"/><text x="27.9118%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.10%)</title><rect x="27.7933%" y="325" width="0.0976%" height="15" fill="rgb(251,222,45)" fg:x="6552" fg:w="23"/><text x="28.0433%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.22%)</title><rect x="27.6746%" y="341" width="0.2206%" height="15" fill="rgb(217,162,53)" fg:x="6524" fg:w="52"/><text x="27.9246%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.07%)</title><rect x="27.9036%" y="341" width="0.0721%" height="15" fill="rgb(229,93,14)" fg:x="6578" fg:w="17"/><text x="28.1536%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="27.9757%" y="341" width="0.0212%" height="15" fill="rgb(209,67,49)" fg:x="6595" fg:w="5"/><text x="28.2257%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3,521 samples, 14.94%)</title><rect x="13.0780%" y="373" width="14.9359%" height="15" fill="rgb(213,87,29)" fg:x="3083" fg:w="3521"/><text x="13.3280%" y="383.50">sudoku-solver`sudoku_so..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (766 samples, 3.25%)</title><rect x="24.7646%" y="357" width="3.2493%" height="15" fill="rgb(205,151,52)" fg:x="5838" fg:w="766"/><text x="25.0146%" y="367.50">sud..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="27.9969%" y="341" width="0.0170%" height="15" fill="rgb(253,215,39)" fg:x="6600" fg:w="4"/><text x="28.2469%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (61 samples, 0.26%)</title><rect x="31.6408%" y="325" width="0.2588%" height="15" fill="rgb(221,220,41)" fg:x="7459" fg:w="61"/><text x="31.8908%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.06%)</title><rect x="31.8444%" y="309" width="0.0551%" height="15" fill="rgb(218,133,21)" fg:x="7507" fg:w="13"/><text x="32.0944%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (116 samples, 0.49%)</title><rect x="31.4329%" y="357" width="0.4921%" height="15" fill="rgb(221,193,43)" fg:x="7410" fg:w="116"/><text x="31.6829%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (79 samples, 0.34%)</title><rect x="31.5899%" y="341" width="0.3351%" height="15" fill="rgb(240,128,52)" fg:x="7447" fg:w="79"/><text x="31.8399%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="31.8996%" y="325" width="0.0255%" height="15" fill="rgb(253,114,12)" fg:x="7520" fg:w="6"/><text x="32.1496%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.03%)</title><rect x="31.9250%" y="357" width="0.0255%" height="15" fill="rgb(215,223,47)" fg:x="7526" fg:w="6"/><text x="32.1750%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.11%)</title><rect x="32.1626%" y="341" width="0.1145%" height="15" fill="rgb(248,225,23)" fg:x="7582" fg:w="27"/><text x="32.4126%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (80 samples, 0.34%)</title><rect x="31.9505%" y="357" width="0.3394%" height="15" fill="rgb(250,108,0)" fg:x="7532" fg:w="80"/><text x="32.2005%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="32.2771%" y="341" width="0.0127%" height="15" fill="rgb(228,208,7)" fg:x="7609" fg:w="3"/><text x="32.5271%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="32.2898%" y="357" width="0.0212%" height="15" fill="rgb(244,45,10)" fg:x="7612" fg:w="5"/><text x="32.5398%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.10%)</title><rect x="32.3110%" y="357" width="0.0976%" height="15" fill="rgb(207,125,25)" fg:x="7617" fg:w="23"/><text x="32.5610%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (4,753 samples, 20.16%)</title><rect x="12.2974%" y="389" width="20.1620%" height="15" fill="rgb(210,195,18)" fg:x="2899" fg:w="4753"/><text x="12.5474%" y="399.50">sudoku-solver`sudoku_solver::bac..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,048 samples, 4.45%)</title><rect x="28.0139%" y="373" width="4.4456%" height="15" fill="rgb(249,80,12)" fg:x="6604" fg:w="1048"/><text x="28.2639%" y="383.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.05%)</title><rect x="32.4128%" y="357" width="0.0467%" height="15" fill="rgb(221,65,9)" fg:x="7641" fg:w="11"/><text x="32.6628%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="36.9305%" y="357" width="0.0170%" height="15" fill="rgb(235,49,36)" fg:x="8706" fg:w="4"/><text x="37.1805%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (60 samples, 0.25%)</title><rect x="37.0111%" y="341" width="0.2545%" height="15" fill="rgb(225,32,20)" fg:x="8725" fg:w="60"/><text x="37.2611%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="37.2275%" y="325" width="0.0382%" height="15" fill="rgb(215,141,46)" fg:x="8776" fg:w="9"/><text x="37.4775%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (129 samples, 0.55%)</title><rect x="36.7736%" y="373" width="0.5472%" height="15" fill="rgb(250,160,47)" fg:x="8669" fg:w="129"/><text x="37.0236%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (88 samples, 0.37%)</title><rect x="36.9475%" y="357" width="0.3733%" height="15" fill="rgb(216,222,40)" fg:x="8710" fg:w="88"/><text x="37.1975%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.06%)</title><rect x="37.2656%" y="341" width="0.0551%" height="15" fill="rgb(234,217,39)" fg:x="8785" fg:w="13"/><text x="37.5156%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.06%)</title><rect x="37.3208%" y="373" width="0.0551%" height="15" fill="rgb(207,178,40)" fg:x="8798" fg:w="13"/><text x="37.5708%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.21%)</title><rect x="37.6135%" y="357" width="0.2121%" height="15" fill="rgb(221,136,13)" fg:x="8867" fg:w="50"/><text x="37.8635%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (107 samples, 0.45%)</title><rect x="37.3759%" y="373" width="0.4539%" height="15" fill="rgb(249,199,10)" fg:x="8811" fg:w="107"/><text x="37.6259%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="37.8298%" y="373" width="0.0170%" height="15" fill="rgb(249,222,13)" fg:x="8918" fg:w="4"/><text x="38.0798%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.14%)</title><rect x="37.8468%" y="373" width="0.1357%" height="15" fill="rgb(244,185,38)" fg:x="8922" fg:w="32"/><text x="38.0968%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="37.9825%" y="373" width="0.0170%" height="15" fill="rgb(236,202,9)" fg:x="8954" fg:w="4"/><text x="38.2325%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (6,328 samples, 26.84%)</title><rect x="11.1988%" y="405" width="26.8431%" height="15" fill="rgb(250,229,37)" fg:x="2640" fg:w="6328"/><text x="11.4488%" y="415.50">sudoku-solver`sudoku_solver::backtraking::b..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,316 samples, 5.58%)</title><rect x="32.4595%" y="389" width="5.5824%" height="15" fill="rgb(206,174,23)" fg:x="7652" fg:w="1316"/><text x="32.7095%" y="399.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.04%)</title><rect x="37.9995%" y="373" width="0.0424%" height="15" fill="rgb(211,33,43)" fg:x="8958" fg:w="10"/><text x="38.2495%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="42.7971%" y="373" width="0.0339%" height="15" fill="rgb(245,58,50)" fg:x="10089" fg:w="8"/><text x="43.0471%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.35%)</title><rect x="42.9074%" y="357" width="0.3521%" height="15" fill="rgb(244,68,36)" fg:x="10115" fg:w="83"/><text x="43.1574%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.10%)</title><rect x="43.1620%" y="341" width="0.0976%" height="15" fill="rgb(232,229,15)" fg:x="10175" fg:w="23"/><text x="43.4120%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (167 samples, 0.71%)</title><rect x="42.5978%" y="389" width="0.7084%" height="15" fill="rgb(254,30,23)" fg:x="10042" fg:w="167"/><text x="42.8478%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (112 samples, 0.48%)</title><rect x="42.8311%" y="373" width="0.4751%" height="15" fill="rgb(235,160,14)" fg:x="10097" fg:w="112"/><text x="43.0811%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.05%)</title><rect x="43.2595%" y="357" width="0.0467%" height="15" fill="rgb(212,155,44)" fg:x="10198" fg:w="11"/><text x="43.5095%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.03%)</title><rect x="43.3062%" y="389" width="0.0339%" height="15" fill="rgb(226,2,50)" fg:x="10209" fg:w="8"/><text x="43.5562%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (131 samples, 0.56%)</title><rect x="43.3401%" y="389" width="0.5557%" height="15" fill="rgb(234,177,6)" fg:x="10217" fg:w="131"/><text x="43.5901%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (57 samples, 0.24%)</title><rect x="43.6540%" y="373" width="0.2418%" height="15" fill="rgb(217,24,9)" fg:x="10291" fg:w="57"/><text x="43.9040%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.03%)</title><rect x="43.8958%" y="389" width="0.0255%" height="15" fill="rgb(220,13,46)" fg:x="10348" fg:w="6"/><text x="44.1458%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.18%)</title><rect x="43.9213%" y="389" width="0.1782%" height="15" fill="rgb(239,221,27)" fg:x="10354" fg:w="42"/><text x="44.1713%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (8,022 samples, 34.03%)</title><rect x="10.1171%" y="421" width="34.0290%" height="15" fill="rgb(222,198,25)" fg:x="2385" fg:w="8022"/><text x="10.3671%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_r..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,439 samples, 6.10%)</title><rect x="38.0419%" y="405" width="6.1042%" height="15" fill="rgb(211,99,13)" fg:x="8968" fg:w="1439"/><text x="38.2919%" y="415.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.04%)</title><rect x="44.1079%" y="389" width="0.0382%" height="15" fill="rgb(232,111,31)" fg:x="10398" fg:w="9"/><text x="44.3579%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="48.6086%" y="389" width="0.0127%" height="15" fill="rgb(245,82,37)" fg:x="11459" fg:w="3"/><text x="48.8586%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (80 samples, 0.34%)</title><rect x="48.7444%" y="373" width="0.3394%" height="15" fill="rgb(227,149,46)" fg:x="11491" fg:w="80"/><text x="48.9944%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.07%)</title><rect x="49.0116%" y="357" width="0.0721%" height="15" fill="rgb(218,36,50)" fg:x="11554" fg:w="17"/><text x="49.2616%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (166 samples, 0.70%)</title><rect x="48.4093%" y="405" width="0.7042%" height="15" fill="rgb(226,80,48)" fg:x="11412" fg:w="166"/><text x="48.6593%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (116 samples, 0.49%)</title><rect x="48.6214%" y="389" width="0.4921%" height="15" fill="rgb(238,224,15)" fg:x="11462" fg:w="116"/><text x="48.8714%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="49.0837%" y="373" width="0.0297%" height="15" fill="rgb(241,136,10)" fg:x="11571" fg:w="7"/><text x="49.3337%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.05%)</title><rect x="49.1134%" y="405" width="0.0509%" height="15" fill="rgb(208,32,45)" fg:x="11578" fg:w="12"/><text x="49.3634%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (135 samples, 0.57%)</title><rect x="49.1643%" y="405" width="0.5727%" height="15" fill="rgb(207,135,9)" fg:x="11590" fg:w="135"/><text x="49.4143%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (54 samples, 0.23%)</title><rect x="49.5079%" y="389" width="0.2291%" height="15" fill="rgb(206,86,44)" fg:x="11671" fg:w="54"/><text x="49.7579%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.03%)</title><rect x="49.7370%" y="405" width="0.0255%" height="15" fill="rgb(245,177,15)" fg:x="11725" fg:w="6"/><text x="49.9870%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (45 samples, 0.19%)</title><rect x="49.7625%" y="405" width="0.1909%" height="15" fill="rgb(206,64,50)" fg:x="11731" fg:w="45"/><text x="50.0125%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.03%)</title><rect x="49.9533%" y="405" width="0.0255%" height="15" fill="rgb(234,36,40)" fg:x="11776" fg:w="6"/><text x="50.2033%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9,638 samples, 40.88%)</title><rect x="9.1542%" y="437" width="40.8840%" height="15" fill="rgb(213,64,8)" fg:x="2158" fg:w="9638"/><text x="9.4042%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,389 samples, 5.89%)</title><rect x="44.1461%" y="421" width="5.8921%" height="15" fill="rgb(210,75,36)" fg:x="10407" fg:w="1389"/><text x="44.3961%" y="431.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.06%)</title><rect x="49.9788%" y="405" width="0.0594%" height="15" fill="rgb(229,88,21)" fg:x="11782" fg:w="14"/><text x="50.2288%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="54.3777%" y="405" width="0.0339%" height="15" fill="rgb(252,204,47)" fg:x="12819" fg:w="8"/><text x="54.6277%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (69 samples, 0.29%)</title><rect x="54.4668%" y="389" width="0.2927%" height="15" fill="rgb(208,77,27)" fg:x="12840" fg:w="69"/><text x="54.7168%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.08%)</title><rect x="54.6789%" y="373" width="0.0806%" height="15" fill="rgb(221,76,26)" fg:x="12890" fg:w="19"/><text x="54.9289%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (141 samples, 0.60%)</title><rect x="54.1995%" y="421" width="0.5981%" height="15" fill="rgb(225,139,18)" fg:x="12777" fg:w="141"/><text x="54.4495%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (91 samples, 0.39%)</title><rect x="54.4116%" y="405" width="0.3860%" height="15" fill="rgb(230,137,11)" fg:x="12827" fg:w="91"/><text x="54.6616%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="54.7595%" y="389" width="0.0382%" height="15" fill="rgb(212,28,1)" fg:x="12909" fg:w="9"/><text x="55.0095%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.04%)</title><rect x="54.7977%" y="421" width="0.0424%" height="15" fill="rgb(248,164,17)" fg:x="12918" fg:w="10"/><text x="55.0477%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (120 samples, 0.51%)</title><rect x="54.8401%" y="421" width="0.5090%" height="15" fill="rgb(222,171,42)" fg:x="12928" fg:w="120"/><text x="55.0901%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.21%)</title><rect x="55.1370%" y="405" width="0.2121%" height="15" fill="rgb(243,84,45)" fg:x="12998" fg:w="50"/><text x="55.3870%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.04%)</title><rect x="55.3491%" y="421" width="0.0382%" height="15" fill="rgb(252,49,23)" fg:x="13048" fg:w="9"/><text x="55.5991%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.13%)</title><rect x="55.3873%" y="421" width="0.1273%" height="15" fill="rgb(215,19,7)" fg:x="13057" fg:w="30"/><text x="55.6373%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11,162 samples, 47.35%)</title><rect x="8.2294%" y="453" width="47.3488%" height="15" fill="rgb(238,81,41)" fg:x="1940" fg:w="11162"/><text x="8.4794%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,306 samples, 5.54%)</title><rect x="50.0382%" y="437" width="5.5400%" height="15" fill="rgb(210,199,37)" fg:x="11796" fg:w="1306"/><text x="50.2882%" y="447.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.06%)</title><rect x="55.5230%" y="421" width="0.0551%" height="15" fill="rgb(244,192,49)" fg:x="13089" fg:w="13"/><text x="55.7730%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="60.1892%" y="421" width="0.0212%" height="15" fill="rgb(226,211,11)" fg:x="14189" fg:w="5"/><text x="60.4392%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (70 samples, 0.30%)</title><rect x="60.3249%" y="405" width="0.2969%" height="15" fill="rgb(236,162,54)" fg:x="14221" fg:w="70"/><text x="60.5749%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.07%)</title><rect x="60.5540%" y="389" width="0.0679%" height="15" fill="rgb(220,229,9)" fg:x="14275" fg:w="16"/><text x="60.8040%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (151 samples, 0.64%)</title><rect x="60.0322%" y="437" width="0.6405%" height="15" fill="rgb(250,87,22)" fg:x="14152" fg:w="151"/><text x="60.2822%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (109 samples, 0.46%)</title><rect x="60.2104%" y="421" width="0.4624%" height="15" fill="rgb(239,43,17)" fg:x="14194" fg:w="109"/><text x="60.4604%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.05%)</title><rect x="60.6219%" y="405" width="0.0509%" height="15" fill="rgb(231,177,25)" fg:x="14291" fg:w="12"/><text x="60.8719%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.06%)</title><rect x="60.6728%" y="437" width="0.0594%" height="15" fill="rgb(219,179,1)" fg:x="14303" fg:w="14"/><text x="60.9228%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.21%)</title><rect x="61.0630%" y="421" width="0.2121%" height="15" fill="rgb(238,219,53)" fg:x="14395" fg:w="50"/><text x="61.3130%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (130 samples, 0.55%)</title><rect x="60.7322%" y="437" width="0.5515%" height="15" fill="rgb(232,167,36)" fg:x="14317" fg:w="130"/><text x="60.9822%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (40 samples, 0.17%)</title><rect x="61.2879%" y="437" width="0.1697%" height="15" fill="rgb(244,19,51)" fg:x="14448" fg:w="40"/><text x="61.5379%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="61.4575%" y="437" width="0.0127%" height="15" fill="rgb(224,6,22)" fg:x="14488" fg:w="3"/><text x="61.7075%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12,798 samples, 54.29%)</title><rect x="7.2410%" y="469" width="54.2886%" height="15" fill="rgb(224,145,5)" fg:x="1707" fg:w="12798"/><text x="7.4910%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,403 samples, 5.95%)</title><rect x="55.5782%" y="453" width="5.9515%" height="15" fill="rgb(234,130,49)" fg:x="13102" fg:w="1403"/><text x="55.8282%" y="463.50">sudoku-s..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.06%)</title><rect x="61.4703%" y="437" width="0.0594%" height="15" fill="rgb(254,6,2)" fg:x="14491" fg:w="14"/><text x="61.7203%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="65.9625%" y="437" width="0.0297%" height="15" fill="rgb(208,96,46)" fg:x="15550" fg:w="7"/><text x="66.2125%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (74 samples, 0.31%)</title><rect x="66.0643%" y="421" width="0.3139%" height="15" fill="rgb(239,3,39)" fg:x="15574" fg:w="74"/><text x="66.3143%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.07%)</title><rect x="66.3061%" y="405" width="0.0721%" height="15" fill="rgb(233,210,1)" fg:x="15631" fg:w="17"/><text x="66.5561%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (159 samples, 0.67%)</title><rect x="65.7462%" y="453" width="0.6745%" height="15" fill="rgb(244,137,37)" fg:x="15499" fg:w="159"/><text x="65.9962%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (101 samples, 0.43%)</title><rect x="65.9922%" y="437" width="0.4284%" height="15" fill="rgb(240,136,2)" fg:x="15557" fg:w="101"/><text x="66.2422%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.04%)</title><rect x="66.3782%" y="421" width="0.0424%" height="15" fill="rgb(239,18,37)" fg:x="15648" fg:w="10"/><text x="66.6282%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.04%)</title><rect x="66.4206%" y="453" width="0.0382%" height="15" fill="rgb(218,185,22)" fg:x="15658" fg:w="9"/><text x="66.6706%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.21%)</title><rect x="66.6964%" y="437" width="0.2079%" height="15" fill="rgb(225,218,4)" fg:x="15723" fg:w="49"/><text x="66.9464%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (111 samples, 0.47%)</title><rect x="66.4588%" y="453" width="0.4709%" height="15" fill="rgb(230,182,32)" fg:x="15667" fg:w="111"/><text x="66.7088%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.03%)</title><rect x="66.9042%" y="437" width="0.0255%" height="15" fill="rgb(242,56,43)" fg:x="15772" fg:w="6"/><text x="67.1542%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.03%)</title><rect x="66.9297%" y="453" width="0.0297%" height="15" fill="rgb(233,99,24)" fg:x="15778" fg:w="7"/><text x="67.1797%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (41 samples, 0.17%)</title><rect x="66.9594%" y="453" width="0.1739%" height="15" fill="rgb(234,209,42)" fg:x="15785" fg:w="41"/><text x="67.2094%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,378 samples, 60.99%)</title><rect x="6.1848%" y="485" width="60.9909%" height="15" fill="rgb(227,7,12)" fg:x="1458" fg:w="14378"/><text x="6.4348%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,331 samples, 5.65%)</title><rect x="61.5297%" y="469" width="5.6461%" height="15" fill="rgb(245,203,43)" fg:x="14505" fg:w="1331"/><text x="61.7797%" y="479.50">sudoku-..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.04%)</title><rect x="67.1375%" y="453" width="0.0382%" height="15" fill="rgb(238,205,33)" fg:x="15827" fg:w="9"/><text x="67.3875%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="71.1631%" y="453" width="0.0212%" height="15" fill="rgb(231,56,7)" fg:x="16776" fg:w="5"/><text x="71.4131%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (80 samples, 0.34%)</title><rect x="71.2353%" y="437" width="0.3394%" height="15" fill="rgb(244,186,29)" fg:x="16793" fg:w="80"/><text x="71.4853%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.10%)</title><rect x="71.4771%" y="421" width="0.0976%" height="15" fill="rgb(234,111,31)" fg:x="16850" fg:w="23"/><text x="71.7271%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (147 samples, 0.62%)</title><rect x="71.0062%" y="469" width="0.6236%" height="15" fill="rgb(241,149,10)" fg:x="16739" fg:w="147"/><text x="71.2562%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (105 samples, 0.45%)</title><rect x="71.1844%" y="453" width="0.4454%" height="15" fill="rgb(249,206,44)" fg:x="16781" fg:w="105"/><text x="71.4344%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.06%)</title><rect x="71.5746%" y="437" width="0.0551%" height="15" fill="rgb(251,153,30)" fg:x="16873" fg:w="13"/><text x="71.8246%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.05%)</title><rect x="71.6298%" y="469" width="0.0467%" height="15" fill="rgb(239,152,38)" fg:x="16886" fg:w="11"/><text x="71.8798%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (81 samples, 0.34%)</title><rect x="71.6764%" y="469" width="0.3436%" height="15" fill="rgb(249,139,47)" fg:x="16897" fg:w="81"/><text x="71.9264%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.12%)</title><rect x="71.9012%" y="453" width="0.1188%" height="15" fill="rgb(244,64,35)" fg:x="16950" fg:w="28"/><text x="72.1512%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="72.0200%" y="469" width="0.0127%" height="15" fill="rgb(216,46,15)" fg:x="16978" fg:w="3"/><text x="72.2700%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.15%)</title><rect x="72.0327%" y="469" width="0.1485%" height="15" fill="rgb(250,74,19)" fg:x="16981" fg:w="35"/><text x="72.2827%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="72.1812%" y="469" width="0.0170%" height="15" fill="rgb(249,42,33)" fg:x="17016" fg:w="4"/><text x="72.4312%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,811 samples, 67.07%)</title><rect x="5.1582%" y="501" width="67.0697%" height="15" fill="rgb(242,149,17)" fg:x="1216" fg:w="15811"/><text x="5.4082%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,191 samples, 5.05%)</title><rect x="67.1757%" y="485" width="5.0522%" height="15" fill="rgb(244,29,21)" fg:x="15836" fg:w="1191"/><text x="67.4257%" y="495.50">sudoku..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.03%)</title><rect x="72.1982%" y="469" width="0.0297%" height="15" fill="rgb(220,130,37)" fg:x="17020" fg:w="7"/><text x="72.4482%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="75.6681%" y="469" width="0.0255%" height="15" fill="rgb(211,67,2)" fg:x="17838" fg:w="6"/><text x="75.9181%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (54 samples, 0.23%)</title><rect x="75.7529%" y="453" width="0.2291%" height="15" fill="rgb(235,68,52)" fg:x="17858" fg:w="54"/><text x="76.0029%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.06%)</title><rect x="75.9269%" y="437" width="0.0551%" height="15" fill="rgb(246,142,3)" fg:x="17899" fg:w="13"/><text x="76.1769%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (113 samples, 0.48%)</title><rect x="75.5409%" y="485" width="0.4793%" height="15" fill="rgb(241,25,7)" fg:x="17808" fg:w="113"/><text x="75.7909%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (77 samples, 0.33%)</title><rect x="75.6936%" y="469" width="0.3266%" height="15" fill="rgb(242,119,39)" fg:x="17844" fg:w="77"/><text x="75.9436%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="75.9820%" y="453" width="0.0382%" height="15" fill="rgb(241,98,45)" fg:x="17912" fg:w="9"/><text x="76.2320%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.04%)</title><rect x="76.0202%" y="485" width="0.0424%" height="15" fill="rgb(254,28,30)" fg:x="17921" fg:w="10"/><text x="76.2702%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (39 samples, 0.17%)</title><rect x="76.2874%" y="469" width="0.1654%" height="15" fill="rgb(241,142,54)" fg:x="17984" fg:w="39"/><text x="76.5374%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (95 samples, 0.40%)</title><rect x="76.0626%" y="485" width="0.4030%" height="15" fill="rgb(222,85,15)" fg:x="17931" fg:w="95"/><text x="76.3126%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="76.4529%" y="469" width="0.0127%" height="15" fill="rgb(210,85,47)" fg:x="18023" fg:w="3"/><text x="76.7029%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.15%)</title><rect x="76.4741%" y="485" width="0.1485%" height="15" fill="rgb(224,206,25)" fg:x="18028" fg:w="35"/><text x="76.7241%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (17,043 samples, 72.30%)</title><rect x="4.3650%" y="517" width="72.2957%" height="15" fill="rgb(243,201,19)" fg:x="1029" fg:w="17043"/><text x="4.6150%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (1,045 samples, 4.43%)</title><rect x="72.2279%" y="501" width="4.4328%" height="15" fill="rgb(236,59,4)" fg:x="17027" fg:w="1045"/><text x="72.4779%" y="511.50">sudok..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.03%)</title><rect x="76.6310%" y="485" width="0.0297%" height="15" fill="rgb(254,179,45)" fg:x="18065" fg:w="7"/><text x="76.8810%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (44 samples, 0.19%)</title><rect x="78.8623%" y="469" width="0.1866%" height="15" fill="rgb(226,14,10)" fg:x="18591" fg:w="44"/><text x="79.1123%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.04%)</title><rect x="79.0065%" y="453" width="0.0424%" height="15" fill="rgb(244,27,41)" fg:x="18625" fg:w="10"/><text x="79.2565%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (102 samples, 0.43%)</title><rect x="78.6460%" y="501" width="0.4327%" height="15" fill="rgb(235,35,32)" fg:x="18540" fg:w="102"/><text x="78.8960%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (65 samples, 0.28%)</title><rect x="78.8029%" y="485" width="0.2757%" height="15" fill="rgb(218,68,31)" fg:x="18577" fg:w="65"/><text x="79.0529%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="79.0490%" y="469" width="0.0297%" height="15" fill="rgb(207,120,37)" fg:x="18635" fg:w="7"/><text x="79.2990%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.05%)</title><rect x="79.0786%" y="501" width="0.0509%" height="15" fill="rgb(227,98,0)" fg:x="18642" fg:w="12"/><text x="79.3286%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.12%)</title><rect x="79.2950%" y="485" width="0.1230%" height="15" fill="rgb(207,7,3)" fg:x="18693" fg:w="29"/><text x="79.5450%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.29%)</title><rect x="79.1295%" y="501" width="0.2927%" height="15" fill="rgb(206,98,19)" fg:x="18654" fg:w="69"/><text x="79.3795%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="79.4222%" y="501" width="0.0127%" height="15" fill="rgb(217,5,26)" fg:x="18723" fg:w="3"/><text x="79.6722%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.13%)</title><rect x="79.4350%" y="501" width="0.1315%" height="15" fill="rgb(235,190,38)" fg:x="18726" fg:w="31"/><text x="79.6850%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="79.5665%" y="501" width="0.0170%" height="15" fill="rgb(247,86,24)" fg:x="18757" fg:w="4"/><text x="79.8165%" y="511.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (17,854 samples, 75.74%)</title><rect x="3.8559%" y="533" width="75.7360%" height="15" fill="rgb(205,101,16)" fg:x="909" fg:w="17854"/><text x="4.1059%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (691 samples, 2.93%)</title><rect x="76.6607%" y="517" width="2.9312%" height="15" fill="rgb(246,168,33)" fg:x="18072" fg:w="691"/><text x="76.9107%" y="527.50">su..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.13%)</title><rect x="80.9536%" y="485" width="0.1315%" height="15" fill="rgb(231,114,1)" fg:x="19084" fg:w="31"/><text x="81.2036%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="81.0469%" y="469" width="0.0382%" height="15" fill="rgb(207,184,53)" fg:x="19106" fg:w="9"/><text x="81.2969%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.23%)</title><rect x="80.8730%" y="517" width="0.2291%" height="15" fill="rgb(224,95,51)" fg:x="19065" fg:w="54"/><text x="81.1230%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.16%)</title><rect x="80.9451%" y="501" width="0.1570%" height="15" fill="rgb(212,188,45)" fg:x="19082" fg:w="37"/><text x="81.1951%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="81.0851%" y="485" width="0.0170%" height="15" fill="rgb(223,154,38)" fg:x="19115" fg:w="4"/><text x="81.3351%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="81.1021%" y="517" width="0.0212%" height="15" fill="rgb(251,22,52)" fg:x="19119" fg:w="5"/><text x="81.3521%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.07%)</title><rect x="81.2378%" y="501" width="0.0679%" height="15" fill="rgb(229,209,22)" fg:x="19151" fg:w="16"/><text x="81.4878%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.19%)</title><rect x="81.1233%" y="517" width="0.1866%" height="15" fill="rgb(234,138,34)" fg:x="19124" fg:w="44"/><text x="81.3733%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.06%)</title><rect x="81.3142%" y="517" width="0.0636%" height="15" fill="rgb(212,95,11)" fg:x="19169" fg:w="15"/><text x="81.5642%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (18,346 samples, 77.82%)</title><rect x="3.5632%" y="549" width="77.8230%" height="15" fill="rgb(240,179,47)" fg:x="840" fg:w="18346"/><text x="3.8132%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (423 samples, 1.79%)</title><rect x="79.5919%" y="533" width="1.7943%" height="15" fill="rgb(240,163,11)" fg:x="18763" fg:w="423"/><text x="79.8419%" y="543.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.10%)</title><rect x="82.3874%" y="501" width="0.0976%" height="15" fill="rgb(236,37,12)" fg:x="19422" fg:w="23"/><text x="82.6374%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.05%)</title><rect x="82.4340%" y="485" width="0.0509%" height="15" fill="rgb(232,164,16)" fg:x="19433" fg:w="12"/><text x="82.6840%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.17%)</title><rect x="82.3322%" y="533" width="0.1654%" height="15" fill="rgb(244,205,15)" fg:x="19409" fg:w="39"/><text x="82.5822%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.13%)</title><rect x="82.3704%" y="517" width="0.1273%" height="15" fill="rgb(223,117,47)" fg:x="19418" fg:w="30"/><text x="82.6204%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="82.4849%" y="501" width="0.0127%" height="15" fill="rgb(244,107,35)" fg:x="19445" fg:w="3"/><text x="82.7349%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.04%)</title><rect x="82.5825%" y="517" width="0.0382%" height="15" fill="rgb(205,140,8)" fg:x="19468" fg:w="9"/><text x="82.8325%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.13%)</title><rect x="82.4977%" y="533" width="0.1273%" height="15" fill="rgb(228,84,46)" fg:x="19448" fg:w="30"/><text x="82.7477%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="82.6292%" y="533" width="0.0212%" height="15" fill="rgb(254,188,9)" fg:x="19479" fg:w="5"/><text x="82.8792%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="82.6504%" y="533" width="0.0127%" height="15" fill="rgb(206,112,54)" fg:x="19484" fg:w="3"/><text x="82.9004%" y="543.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (18,711 samples, 79.37%)</title><rect x="3.3002%" y="565" width="79.3713%" height="15" fill="rgb(216,84,49)" fg:x="778" fg:w="18711"/><text x="3.5502%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (303 samples, 1.29%)</title><rect x="81.3863%" y="549" width="1.2853%" height="15" fill="rgb(214,194,35)" fg:x="19186" fg:w="303"/><text x="81.6363%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="83.4309%" y="533" width="0.0170%" height="15" fill="rgb(249,28,3)" fg:x="19668" fg:w="4"/><text x="83.6809%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.08%)</title><rect x="83.4691%" y="517" width="0.0806%" height="15" fill="rgb(222,56,52)" fg:x="19677" fg:w="19"/><text x="83.7191%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="83.5369%" y="501" width="0.0127%" height="15" fill="rgb(245,217,50)" fg:x="19693" fg:w="3"/><text x="83.7869%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.16%)</title><rect x="83.4012%" y="549" width="0.1612%" height="15" fill="rgb(213,201,24)" fg:x="19661" fg:w="38"/><text x="83.6512%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.11%)</title><rect x="83.4479%" y="533" width="0.1145%" height="15" fill="rgb(248,116,28)" fg:x="19672" fg:w="27"/><text x="83.6979%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="83.5497%" y="517" width="0.0127%" height="15" fill="rgb(219,72,43)" fg:x="19696" fg:w="3"/><text x="83.7997%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="83.6345%" y="533" width="0.0255%" height="15" fill="rgb(209,138,14)" fg:x="19716" fg:w="6"/><text x="83.8845%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.10%)</title><rect x="83.5624%" y="549" width="0.1018%" height="15" fill="rgb(222,18,33)" fg:x="19699" fg:w="24"/><text x="83.8124%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.04%)</title><rect x="83.6727%" y="549" width="0.0382%" height="15" fill="rgb(213,199,7)" fg:x="19725" fg:w="9"/><text x="83.9227%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19,012 samples, 80.65%)</title><rect x="3.0712%" y="581" width="80.6482%" height="15" fill="rgb(250,110,10)" fg:x="724" fg:w="19012"/><text x="3.3212%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (247 samples, 1.05%)</title><rect x="82.6716%" y="565" width="1.0478%" height="15" fill="rgb(248,123,6)" fg:x="19489" fg:w="247"/><text x="82.9216%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.06%)</title><rect x="84.4150%" y="533" width="0.0551%" height="15" fill="rgb(206,91,31)" fg:x="19900" fg:w="13"/><text x="84.6650%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="84.4447%" y="517" width="0.0255%" height="15" fill="rgb(211,154,13)" fg:x="19907" fg:w="6"/><text x="84.6947%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.11%)</title><rect x="84.3726%" y="565" width="0.1103%" height="15" fill="rgb(225,148,7)" fg:x="19890" fg:w="26"/><text x="84.6226%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.07%)</title><rect x="84.4108%" y="549" width="0.0721%" height="15" fill="rgb(220,160,43)" fg:x="19899" fg:w="17"/><text x="84.6608%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="84.4702%" y="533" width="0.0127%" height="15" fill="rgb(213,52,39)" fg:x="19913" fg:w="3"/><text x="84.7202%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="84.4829%" y="565" width="0.0127%" height="15" fill="rgb(243,137,7)" fg:x="19916" fg:w="3"/><text x="84.7329%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.09%)</title><rect x="84.4956%" y="565" width="0.0933%" height="15" fill="rgb(230,79,13)" fg:x="19919" fg:w="22"/><text x="84.7456%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="84.5593%" y="549" width="0.0297%" height="15" fill="rgb(247,105,23)" fg:x="19934" fg:w="7"/><text x="84.8093%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.05%)</title><rect x="84.5974%" y="565" width="0.0467%" height="15" fill="rgb(223,179,41)" fg:x="19943" fg:w="11"/><text x="84.8474%" y="575.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19,268 samples, 81.73%)</title><rect x="2.9185%" y="597" width="81.7341%" height="15" fill="rgb(218,9,34)" fg:x="688" fg:w="19268"/><text x="3.1685%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (220 samples, 0.93%)</title><rect x="83.7194%" y="581" width="0.9332%" height="15" fill="rgb(222,106,8)" fg:x="19736" fg:w="220"/><text x="83.9694%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.06%)</title><rect x="85.3567%" y="549" width="0.0636%" height="15" fill="rgb(211,220,0)" fg:x="20122" fg:w="15"/><text x="85.6067%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="85.3907%" y="533" width="0.0297%" height="15" fill="rgb(229,52,16)" fg:x="20130" fg:w="7"/><text x="85.6407%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.14%)</title><rect x="85.2931%" y="581" width="0.1442%" height="15" fill="rgb(212,155,18)" fg:x="20107" fg:w="34"/><text x="85.5431%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.10%)</title><rect x="85.3398%" y="565" width="0.0976%" height="15" fill="rgb(242,21,14)" fg:x="20118" fg:w="23"/><text x="85.5898%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="85.4204%" y="549" width="0.0170%" height="15" fill="rgb(222,19,48)" fg:x="20137" fg:w="4"/><text x="85.6704%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.07%)</title><rect x="85.4416%" y="581" width="0.0721%" height="15" fill="rgb(232,45,27)" fg:x="20142" fg:w="17"/><text x="85.6916%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="85.4925%" y="565" width="0.0212%" height="15" fill="rgb(249,103,42)" fg:x="20154" fg:w="5"/><text x="85.7425%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.05%)</title><rect x="85.5222%" y="581" width="0.0467%" height="15" fill="rgb(246,81,33)" fg:x="20161" fg:w="11"/><text x="85.7722%" y="591.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19,519 samples, 82.80%)</title><rect x="2.7742%" y="613" width="82.7988%" height="15" fill="rgb(252,33,42)" fg:x="654" fg:w="19519"/><text x="3.0242%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (217 samples, 0.92%)</title><rect x="84.6526%" y="597" width="0.9205%" height="15" fill="rgb(209,212,41)" fg:x="19956" fg:w="217"/><text x="84.9026%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.07%)</title><rect x="86.3154%" y="565" width="0.0679%" height="15" fill="rgb(207,154,6)" fg:x="20348" fg:w="16"/><text x="86.5654%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="86.3579%" y="549" width="0.0255%" height="15" fill="rgb(223,64,47)" fg:x="20358" fg:w="6"/><text x="86.6079%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.14%)</title><rect x="86.2688%" y="597" width="0.1357%" height="15" fill="rgb(211,161,38)" fg:x="20337" fg:w="32"/><text x="86.5188%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.11%)</title><rect x="86.2942%" y="581" width="0.1103%" height="15" fill="rgb(219,138,40)" fg:x="20343" fg:w="26"/><text x="86.5442%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="86.3833%" y="565" width="0.0212%" height="15" fill="rgb(241,228,46)" fg:x="20364" fg:w="5"/><text x="86.6333%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.12%)</title><rect x="86.4088%" y="597" width="0.1230%" height="15" fill="rgb(223,209,38)" fg:x="20370" fg:w="29"/><text x="86.6588%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="86.5063%" y="581" width="0.0255%" height="15" fill="rgb(236,164,45)" fg:x="20393" fg:w="6"/><text x="86.7563%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.04%)</title><rect x="86.5318%" y="597" width="0.0382%" height="15" fill="rgb(231,15,5)" fg:x="20399" fg:w="9"/><text x="86.7818%" y="607.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (19,799 samples, 83.99%)</title><rect x="2.5918%" y="629" width="83.9866%" height="15" fill="rgb(252,35,15)" fg:x="611" fg:w="19799"/><text x="2.8418%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (237 samples, 1.01%)</title><rect x="85.5731%" y="613" width="1.0053%" height="15" fill="rgb(248,181,18)" fg:x="20173" fg:w="237"/><text x="85.8231%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="87.2996%" y="581" width="0.0424%" height="15" fill="rgb(233,39,42)" fg:x="20580" fg:w="10"/><text x="87.5496%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.12%)</title><rect x="87.2317%" y="613" width="0.1188%" height="15" fill="rgb(238,110,33)" fg:x="20564" fg:w="28"/><text x="87.4817%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.06%)</title><rect x="87.2911%" y="597" width="0.0594%" height="15" fill="rgb(233,195,10)" fg:x="20578" fg:w="14"/><text x="87.5411%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="87.3505%" y="613" width="0.0212%" height="15" fill="rgb(254,105,3)" fg:x="20592" fg:w="5"/><text x="87.6005%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.07%)</title><rect x="87.3717%" y="613" width="0.0721%" height="15" fill="rgb(221,225,9)" fg:x="20597" fg:w="17"/><text x="87.6217%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="87.4141%" y="597" width="0.0297%" height="15" fill="rgb(224,227,45)" fg:x="20607" fg:w="7"/><text x="87.6641%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="87.4438%" y="613" width="0.0212%" height="15" fill="rgb(229,198,43)" fg:x="20614" fg:w="5"/><text x="87.6938%" y="623.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (20,059 samples, 85.09%)</title><rect x="2.3840%" y="645" width="85.0895%" height="15" fill="rgb(206,209,35)" fg:x="562" fg:w="20059"/><text x="2.6340%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (211 samples, 0.90%)</title><rect x="86.5784%" y="629" width="0.8951%" height="15" fill="rgb(245,195,53)" fg:x="20410" fg:w="211"/><text x="86.8284%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="88.3092%" y="613" width="0.0127%" height="15" fill="rgb(240,92,26)" fg:x="20818" fg:w="3"/><text x="88.5592%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.07%)</title><rect x="88.3516%" y="597" width="0.0721%" height="15" fill="rgb(207,40,23)" fg:x="20828" fg:w="17"/><text x="88.6016%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="88.4067%" y="581" width="0.0170%" height="15" fill="rgb(223,111,35)" fg:x="20841" fg:w="4"/><text x="88.6567%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.17%)</title><rect x="88.2795%" y="629" width="0.1654%" height="15" fill="rgb(229,147,28)" fg:x="20811" fg:w="39"/><text x="88.5295%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.12%)</title><rect x="88.3219%" y="613" width="0.1230%" height="15" fill="rgb(211,29,28)" fg:x="20821" fg:w="29"/><text x="88.5719%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="88.4237%" y="597" width="0.0212%" height="15" fill="rgb(228,72,33)" fg:x="20845" fg:w="5"/><text x="88.6737%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="88.4449%" y="629" width="0.0127%" height="15" fill="rgb(205,214,31)" fg:x="20850" fg:w="3"/><text x="88.6949%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.09%)</title><rect x="88.4576%" y="629" width="0.0933%" height="15" fill="rgb(224,111,15)" fg:x="20853" fg:w="22"/><text x="88.7076%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="88.5170%" y="613" width="0.0339%" height="15" fill="rgb(253,21,26)" fg:x="20867" fg:w="8"/><text x="88.7670%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.03%)</title><rect x="88.5552%" y="629" width="0.0297%" height="15" fill="rgb(245,139,43)" fg:x="20876" fg:w="7"/><text x="88.8052%" y="639.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (20,353 samples, 86.34%)</title><rect x="2.2567%" y="661" width="86.3366%" height="15" fill="rgb(252,170,7)" fg:x="532" fg:w="20353"/><text x="2.5067%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (264 samples, 1.12%)</title><rect x="87.4735%" y="645" width="1.1199%" height="15" fill="rgb(231,118,14)" fg:x="20621" fg:w="264"/><text x="87.7235%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="89.5393%" y="613" width="0.0424%" height="15" fill="rgb(238,83,0)" fg:x="21108" fg:w="10"/><text x="89.7893%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="89.5690%" y="597" width="0.0127%" height="15" fill="rgb(221,39,39)" fg:x="21115" fg:w="3"/><text x="89.8190%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.11%)</title><rect x="89.4927%" y="645" width="0.1103%" height="15" fill="rgb(222,119,46)" fg:x="21097" fg:w="26"/><text x="89.7427%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.08%)</title><rect x="89.5266%" y="629" width="0.0764%" height="15" fill="rgb(222,165,49)" fg:x="21105" fg:w="18"/><text x="89.7766%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="89.5817%" y="613" width="0.0212%" height="15" fill="rgb(219,113,52)" fg:x="21118" fg:w="5"/><text x="89.8317%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.11%)</title><rect x="89.6114%" y="645" width="0.1103%" height="15" fill="rgb(214,7,15)" fg:x="21125" fg:w="26"/><text x="89.8614%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.05%)</title><rect x="89.6751%" y="629" width="0.0467%" height="15" fill="rgb(235,32,4)" fg:x="21140" fg:w="11"/><text x="89.9251%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.03%)</title><rect x="89.7217%" y="645" width="0.0255%" height="15" fill="rgb(238,90,54)" fg:x="21151" fg:w="6"/><text x="89.9717%" y="655.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (20,680 samples, 87.72%)</title><rect x="2.0404%" y="677" width="87.7238%" height="15" fill="rgb(213,208,19)" fg:x="481" fg:w="20680"/><text x="2.2904%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (276 samples, 1.17%)</title><rect x="88.5934%" y="661" width="1.1708%" height="15" fill="rgb(233,156,4)" fg:x="20885" fg:w="276"/><text x="88.8434%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.07%)</title><rect x="90.6677%" y="629" width="0.0679%" height="15" fill="rgb(207,194,5)" fg:x="21374" fg:w="16"/><text x="90.9177%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="90.7228%" y="613" width="0.0127%" height="15" fill="rgb(206,111,30)" fg:x="21387" fg:w="3"/><text x="90.9728%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.11%)</title><rect x="90.6380%" y="661" width="0.1103%" height="15" fill="rgb(243,70,54)" fg:x="21367" fg:w="26"/><text x="90.8880%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.09%)</title><rect x="90.6550%" y="645" width="0.0933%" height="15" fill="rgb(242,28,8)" fg:x="21371" fg:w="22"/><text x="90.9050%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="90.7356%" y="629" width="0.0127%" height="15" fill="rgb(219,106,18)" fg:x="21390" fg:w="3"/><text x="90.9856%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.06%)</title><rect x="90.8331%" y="645" width="0.0594%" height="15" fill="rgb(244,222,10)" fg:x="21413" fg:w="14"/><text x="91.0831%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.14%)</title><rect x="90.7525%" y="661" width="0.1442%" height="15" fill="rgb(236,179,52)" fg:x="21394" fg:w="34"/><text x="91.0025%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.05%)</title><rect x="90.8968%" y="661" width="0.0467%" height="15" fill="rgb(213,23,39)" fg:x="21428" fg:w="11"/><text x="91.1468%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="90.9434%" y="661" width="0.0127%" height="15" fill="rgb(238,48,10)" fg:x="21439" fg:w="3"/><text x="91.1934%" y="671.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,006 samples, 89.11%)</title><rect x="1.8665%" y="693" width="89.1066%" height="15" fill="rgb(251,196,23)" fg:x="440" fg:w="21006"/><text x="2.1165%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (285 samples, 1.21%)</title><rect x="89.7641%" y="677" width="1.2090%" height="15" fill="rgb(250,152,24)" fg:x="21161" fg:w="285"/><text x="90.0141%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="90.9561%" y="661" width="0.0170%" height="15" fill="rgb(209,150,17)" fg:x="21442" fg:w="4"/><text x="91.2061%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="91.6433%" y="661" width="0.0212%" height="15" fill="rgb(234,202,34)" fg:x="21604" fg:w="5"/><text x="91.8933%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.06%)</title><rect x="91.6858%" y="645" width="0.0551%" height="15" fill="rgb(253,148,53)" fg:x="21614" fg:w="13"/><text x="91.9358%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="91.7282%" y="629" width="0.0127%" height="15" fill="rgb(218,129,16)" fg:x="21624" fg:w="3"/><text x="91.9782%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.16%)</title><rect x="91.6009%" y="677" width="0.1570%" height="15" fill="rgb(216,85,19)" fg:x="21594" fg:w="37"/><text x="91.8509%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.09%)</title><rect x="91.6645%" y="661" width="0.0933%" height="15" fill="rgb(235,228,7)" fg:x="21609" fg:w="22"/><text x="91.9145%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="91.7409%" y="645" width="0.0170%" height="15" fill="rgb(245,175,0)" fg:x="21627" fg:w="4"/><text x="91.9909%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.09%)</title><rect x="91.7621%" y="677" width="0.0891%" height="15" fill="rgb(208,168,36)" fg:x="21632" fg:w="21"/><text x="92.0121%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.04%)</title><rect x="91.8130%" y="661" width="0.0382%" height="15" fill="rgb(246,171,24)" fg:x="21644" fg:w="9"/><text x="92.0630%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="91.8554%" y="677" width="0.0127%" height="15" fill="rgb(215,142,24)" fg:x="21654" fg:w="3"/><text x="92.1054%" y="687.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,258 samples, 90.18%)</title><rect x="1.7053%" y="709" width="90.1756%" height="15" fill="rgb(250,187,7)" fg:x="402" fg:w="21258"/><text x="1.9553%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (214 samples, 0.91%)</title><rect x="90.9731%" y="693" width="0.9078%" height="15" fill="rgb(228,66,33)" fg:x="21446" fg:w="214"/><text x="91.2231%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="92.5002%" y="661" width="0.0424%" height="15" fill="rgb(234,215,21)" fg:x="21806" fg:w="10"/><text x="92.7502%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.11%)</title><rect x="92.4493%" y="693" width="0.1145%" height="15" fill="rgb(222,191,20)" fg:x="21794" fg:w="27"/><text x="92.6993%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.08%)</title><rect x="92.4875%" y="677" width="0.0764%" height="15" fill="rgb(245,79,54)" fg:x="21803" fg:w="18"/><text x="92.7375%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="92.5426%" y="661" width="0.0212%" height="15" fill="rgb(240,10,37)" fg:x="21816" fg:w="5"/><text x="92.7926%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="92.5638%" y="693" width="0.0127%" height="15" fill="rgb(214,192,32)" fg:x="21821" fg:w="3"/><text x="92.8138%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.05%)</title><rect x="92.6317%" y="677" width="0.0509%" height="15" fill="rgb(209,36,54)" fg:x="21837" fg:w="12"/><text x="92.8817%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.11%)</title><rect x="92.5766%" y="693" width="0.1103%" height="15" fill="rgb(220,10,11)" fg:x="21824" fg:w="26"/><text x="92.8266%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="92.6953%" y="693" width="0.0212%" height="15" fill="rgb(221,106,17)" fg:x="21852" fg:w="5"/><text x="92.9453%" y="703.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,495 samples, 91.18%)</title><rect x="1.5441%" y="725" width="91.1810%" height="15" fill="rgb(251,142,44)" fg:x="364" fg:w="21495"/><text x="1.7941%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (199 samples, 0.84%)</title><rect x="91.8809%" y="709" width="0.8442%" height="15" fill="rgb(238,13,15)" fg:x="21660" fg:w="199"/><text x="92.1309%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.05%)</title><rect x="93.0898%" y="677" width="0.0467%" height="15" fill="rgb(208,107,27)" fg:x="21945" fg:w="11"/><text x="93.3398%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="93.1238%" y="661" width="0.0127%" height="15" fill="rgb(205,136,37)" fg:x="21953" fg:w="3"/><text x="93.3738%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.08%)</title><rect x="93.0644%" y="709" width="0.0764%" height="15" fill="rgb(250,205,27)" fg:x="21939" fg:w="18"/><text x="93.3144%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.06%)</title><rect x="93.0814%" y="693" width="0.0594%" height="15" fill="rgb(210,80,43)" fg:x="21943" fg:w="14"/><text x="93.3314%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.03%)</title><rect x="93.1450%" y="709" width="0.0297%" height="15" fill="rgb(247,160,36)" fg:x="21958" fg:w="7"/><text x="93.3950%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.02%)</title><rect x="93.1577%" y="693" width="0.0170%" height="15" fill="rgb(234,13,49)" fg:x="21961" fg:w="4"/><text x="93.4077%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.02%)</title><rect x="93.1789%" y="709" width="0.0170%" height="15" fill="rgb(234,122,0)" fg:x="21966" fg:w="4"/><text x="93.4289%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,633 samples, 91.77%)</title><rect x="1.4338%" y="741" width="91.7664%" height="15" fill="rgb(207,146,38)" fg:x="338" fg:w="21633"/><text x="1.6838%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (112 samples, 0.48%)</title><rect x="92.7250%" y="725" width="0.4751%" height="15" fill="rgb(207,177,25)" fg:x="21859" fg:w="112"/><text x="92.9750%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="93.4080%" y="693" width="0.0255%" height="15" fill="rgb(211,178,42)" fg:x="22020" fg:w="6"/><text x="93.6580%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="93.4207%" y="677" width="0.0127%" height="15" fill="rgb(230,69,54)" fg:x="22023" fg:w="3"/><text x="93.6707%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.06%)</title><rect x="93.3741%" y="725" width="0.0636%" height="15" fill="rgb(214,135,41)" fg:x="22012" fg:w="15"/><text x="93.6241%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="93.4080%" y="709" width="0.0297%" height="15" fill="rgb(237,67,25)" fg:x="22020" fg:w="7"/><text x="93.6580%" y="719.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,710 samples, 92.09%)</title><rect x="1.3871%" y="757" width="92.0930%" height="15" fill="rgb(222,189,50)" fg:x="327" fg:w="21710"/><text x="1.6371%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (66 samples, 0.28%)</title><rect x="93.2001%" y="741" width="0.2800%" height="15" fill="rgb(245,148,34)" fg:x="21971" fg:w="66"/><text x="93.4501%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.04%)</title><rect x="93.4377%" y="725" width="0.0424%" height="15" fill="rgb(222,29,6)" fg:x="22027" fg:w="10"/><text x="93.6877%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="93.4589%" y="709" width="0.0212%" height="15" fill="rgb(221,189,43)" fg:x="22032" fg:w="5"/><text x="93.7089%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="93.6031%" y="741" width="0.0127%" height="15" fill="rgb(207,36,27)" fg:x="22066" fg:w="3"/><text x="93.8531%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,761 samples, 92.31%)</title><rect x="1.3277%" y="773" width="92.3093%" height="15" fill="rgb(217,90,24)" fg:x="313" fg:w="21761"/><text x="1.5777%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (37 samples, 0.16%)</title><rect x="93.4801%" y="757" width="0.1570%" height="15" fill="rgb(224,66,35)" fg:x="22037" fg:w="37"/><text x="93.7301%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="93.7389%" y="757" width="0.0170%" height="15" fill="rgb(221,13,50)" fg:x="22098" fg:w="4"/><text x="93.9889%" y="767.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,811 samples, 92.52%)</title><rect x="1.2556%" y="789" width="92.5214%" height="15" fill="rgb(236,68,49)" fg:x="296" fg:w="21811"/><text x="1.5056%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (33 samples, 0.14%)</title><rect x="93.6371%" y="773" width="0.1400%" height="15" fill="rgb(229,146,28)" fg:x="22074" fg:w="33"/><text x="93.8871%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="93.7643%" y="757" width="0.0127%" height="15" fill="rgb(225,31,38)" fg:x="22104" fg:w="3"/><text x="94.0143%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="93.8704%" y="773" width="0.0212%" height="15" fill="rgb(250,208,3)" fg:x="22129" fg:w="5"/><text x="94.1204%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="93.8788%" y="757" width="0.0127%" height="15" fill="rgb(246,54,23)" fg:x="22131" fg:w="3"/><text x="94.1288%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="93.8788%" y="741" width="0.0127%" height="15" fill="rgb(243,76,11)" fg:x="22131" fg:w="3"/><text x="94.1288%" y="751.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,847 samples, 92.67%)</title><rect x="1.2259%" y="805" width="92.6741%" height="15" fill="rgb(245,21,50)" fg:x="289" fg:w="21847"/><text x="1.4759%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (29 samples, 0.12%)</title><rect x="93.7770%" y="789" width="0.1230%" height="15" fill="rgb(228,9,43)" fg:x="22107" fg:w="29"/><text x="94.0270%" y="799.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,868 samples, 92.76%)</title><rect x="1.2090%" y="821" width="92.7632%" height="15" fill="rgb(208,100,47)" fg:x="285" fg:w="21868"/><text x="1.4590%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (17 samples, 0.07%)</title><rect x="93.9001%" y="805" width="0.0721%" height="15" fill="rgb(232,26,8)" fg:x="22136" fg:w="17"/><text x="94.1501%" y="815.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,882 samples, 92.82%)</title><rect x="1.1962%" y="837" width="92.8226%" height="15" fill="rgb(216,166,38)" fg:x="282" fg:w="21882"/><text x="1.4462%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (11 samples, 0.05%)</title><rect x="93.9722%" y="821" width="0.0467%" height="15" fill="rgb(251,202,51)" fg:x="22153" fg:w="11"/><text x="94.2222%" y="831.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,889 samples, 92.85%)</title><rect x="1.1877%" y="853" width="92.8523%" height="15" fill="rgb(254,216,34)" fg:x="280" fg:w="21889"/><text x="1.4377%" y="863.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku (5 samples, 0.02%)</title><rect x="94.0188%" y="837" width="0.0212%" height="15" fill="rgb(251,32,27)" fg:x="22164" fg:w="5"/><text x="94.2688%" y="847.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (21,892 samples, 92.87%)</title><rect x="1.1835%" y="869" width="92.8650%" height="15" fill="rgb(208,127,28)" fg:x="279" fg:w="21892"/><text x="1.4335%" y="879.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.10%)</title><rect x="96.5089%" y="821" width="0.1018%" height="15" fill="rgb(224,137,22)" fg:x="22751" fg:w="24"/><text x="96.7589%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.03%)</title><rect x="96.5852%" y="805" width="0.0255%" height="15" fill="rgb(254,70,32)" fg:x="22769" fg:w="6"/><text x="96.8352%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.17%)</title><rect x="96.4452%" y="853" width="0.1697%" height="15" fill="rgb(229,75,37)" fg:x="22736" fg:w="40"/><text x="96.6952%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.13%)</title><rect x="96.4877%" y="837" width="0.1273%" height="15" fill="rgb(252,64,23)" fg:x="22746" fg:w="30"/><text x="96.7377%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.13%)</title><rect x="96.6192%" y="853" width="0.1315%" height="15" fill="rgb(232,162,48)" fg:x="22777" fg:w="31"/><text x="96.8692%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.07%)</title><rect x="96.6785%" y="837" width="0.0721%" height="15" fill="rgb(246,160,12)" fg:x="22791" fg:w="17"/><text x="96.9285%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="96.7591%" y="853" width="0.0212%" height="15" fill="rgb(247,166,0)" fg:x="22810" fg:w="5"/><text x="97.0091%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.07%)</title><rect x="96.7931%" y="853" width="0.0721%" height="15" fill="rgb(249,219,21)" fg:x="22818" fg:w="17"/><text x="97.0431%" y="863.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="96.8652%" y="853" width="0.0127%" height="15" fill="rgb(205,209,3)" fg:x="22835" fg:w="3"/><text x="97.1152%" y="863.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$memcpy (4 samples, 0.02%)</title><rect x="96.8779%" y="853" width="0.0170%" height="15" fill="rgb(243,44,1)" fg:x="22838" fg:w="4"/><text x="97.1279%" y="863.50"></text></g><g><title>sudoku-solver`__rdl_alloc (3 samples, 0.01%)</title><rect x="96.8949%" y="853" width="0.0127%" height="15" fill="rgb(206,159,16)" fg:x="22842" fg:w="3"/><text x="97.1449%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="97.0434%" y="821" width="0.0297%" height="15" fill="rgb(244,77,30)" fg:x="22877" fg:w="7"/><text x="97.2934%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.18%)</title><rect x="97.1112%" y="805" width="0.1824%" height="15" fill="rgb(218,69,12)" fg:x="22893" fg:w="43"/><text x="97.3612%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.07%)</title><rect x="97.2215%" y="789" width="0.0721%" height="15" fill="rgb(212,87,7)" fg:x="22919" fg:w="17"/><text x="97.4715%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.24%)</title><rect x="97.0730%" y="821" width="0.2375%" height="15" fill="rgb(245,114,25)" fg:x="22884" fg:w="56"/><text x="97.3230%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="97.2936%" y="805" width="0.0170%" height="15" fill="rgb(210,61,42)" fg:x="22936" fg:w="4"/><text x="97.5436%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.36%)</title><rect x="96.9585%" y="837" width="0.3606%" height="15" fill="rgb(211,52,33)" fg:x="22857" fg:w="85"/><text x="97.2085%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.02%)</title><rect x="97.3191%" y="837" width="0.0170%" height="15" fill="rgb(234,58,33)" fg:x="22942" fg:w="4"/><text x="97.5691%" y="847.50"></text></g><g><title>sudoku-solver`sudoku_solver::possible_numbers (777 samples, 3.30%)</title><rect x="94.0485%" y="869" width="3.2960%" height="15" fill="rgb(220,115,36)" fg:x="22171" fg:w="777"/><text x="94.2985%" y="879.50">sud..</text></g><g><title>sudoku-solver`alloc::vec::from_elem (103 samples, 0.44%)</title><rect x="96.9076%" y="853" width="0.4369%" height="15" fill="rgb(243,153,54)" fg:x="22845" fg:w="103"/><text x="97.1576%" y="863.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (3 samples, 0.01%)</title><rect x="97.4506%" y="837" width="0.0127%" height="15" fill="rgb(251,47,18)" fg:x="22973" fg:w="3"/><text x="97.7006%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_unlock_init_slow (12 samples, 0.05%)</title><rect x="97.4633%" y="837" width="0.0509%" height="15" fill="rgb(242,102,42)" fg:x="22976" fg:w="12"/><text x="97.7133%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.03%)</title><rect x="97.5142%" y="837" width="0.0339%" height="15" fill="rgb(234,31,38)" fg:x="22988" fg:w="8"/><text x="97.7642%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.02%)</title><rect x="97.5481%" y="837" width="0.0212%" height="15" fill="rgb(221,117,51)" fg:x="22996" fg:w="5"/><text x="97.7981%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (30 samples, 0.13%)</title><rect x="97.6500%" y="805" width="0.1273%" height="15" fill="rgb(212,20,18)" fg:x="23020" fg:w="30"/><text x="97.9000%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (36 samples, 0.15%)</title><rect x="97.6287%" y="821" width="0.1527%" height="15" fill="rgb(245,133,36)" fg:x="23015" fg:w="36"/><text x="97.8787%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (33 samples, 0.14%)</title><rect x="97.7815%" y="821" width="0.1400%" height="15" fill="rgb(212,6,19)" fg:x="23051" fg:w="33"/><text x="98.0315%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (20 samples, 0.08%)</title><rect x="97.8366%" y="805" width="0.0848%" height="15" fill="rgb(218,1,36)" fg:x="23064" fg:w="20"/><text x="98.0866%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (3 samples, 0.01%)</title><rect x="97.9214%" y="821" width="0.0127%" height="15" fill="rgb(246,84,54)" fg:x="23084" fg:w="3"/><text x="98.1714%" y="831.50"></text></g><g><title>sudoku-solver`&lt;char as core::fmt::Display&gt;::fmt (3 samples, 0.01%)</title><rect x="97.9511%" y="821" width="0.0127%" height="15" fill="rgb(242,110,6)" fg:x="23091" fg:w="3"/><text x="98.2011%" y="831.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.05%)</title><rect x="97.9639%" y="821" width="0.0467%" height="15" fill="rgb(214,47,5)" fg:x="23094" fg:w="11"/><text x="98.2139%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`write (22 samples, 0.09%)</title><rect x="98.0741%" y="789" width="0.0933%" height="15" fill="rgb(218,159,25)" fg:x="23120" fg:w="22"/><text x="98.3241%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.03%)</title><rect x="98.1675%" y="789" width="0.0255%" height="15" fill="rgb(215,211,28)" fg:x="23142" fg:w="6"/><text x="98.4175%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`write (340 samples, 1.44%)</title><rect x="98.3075%" y="773" width="1.4423%" height="15" fill="rgb(238,59,32)" fg:x="23175" fg:w="340"/><text x="98.5575%" y="783.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (16 samples, 0.07%)</title><rect x="99.7497%" y="773" width="0.0679%" height="15" fill="rgb(226,82,3)" fg:x="23515" fg:w="16"/><text x="99.9997%" y="783.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (385 samples, 1.63%)</title><rect x="98.1929%" y="789" width="1.6332%" height="15" fill="rgb(240,164,32)" fg:x="23148" fg:w="385"/><text x="98.4429%" y="799.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="99.8261%" y="789" width="0.0127%" height="15" fill="rgb(232,46,7)" fg:x="23533" fg:w="3"/><text x="100.0761%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (421 samples, 1.79%)</title><rect x="98.0614%" y="805" width="1.7859%" height="15" fill="rgb(229,129,53)" fg:x="23117" fg:w="421"/><text x="98.3114%" y="815.50">s..</text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.02%)</title><rect x="99.8473%" y="805" width="0.0212%" height="15" fill="rgb(234,188,29)" fg:x="23538" fg:w="5"/><text x="100.0973%" y="815.50"></text></g><g><title>sudoku-solver`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (20 samples, 0.08%)</title><rect x="99.8770%" y="789" width="0.0848%" height="15" fill="rgb(246,141,4)" fg:x="23545" fg:w="20"/><text x="100.1270%" y="799.50"></text></g><g><title>sudoku-solver`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14 samples, 0.06%)</title><rect x="99.9024%" y="773" width="0.0594%" height="15" fill="rgb(229,23,39)" fg:x="23551" fg:w="14"/><text x="100.1524%" y="783.50"></text></g><g><title>sudoku-solver`core::slice::memchr::memrchr (6 samples, 0.03%)</title><rect x="99.9364%" y="757" width="0.0255%" height="15" fill="rgb(206,12,3)" fg:x="23559" fg:w="6"/><text x="100.1864%" y="767.50"></text></g><g><title>sudoku-solver`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (566 samples, 2.40%)</title><rect x="97.5694%" y="837" width="2.4010%" height="15" fill="rgb(252,226,20)" fg:x="23001" fg:w="566"/><text x="97.8194%" y="847.50">su..</text></g><g><title>sudoku-solver`core::fmt::write (461 samples, 1.96%)</title><rect x="98.0148%" y="821" width="1.9555%" height="15" fill="rgb(216,123,35)" fg:x="23106" fg:w="461"/><text x="98.2648%" y="831.50">s..</text></g><g><title>sudoku-solver`core::fmt::Write::write_char (24 samples, 0.10%)</title><rect x="99.8685%" y="805" width="0.1018%" height="15" fill="rgb(212,68,40)" fg:x="23543" fg:w="24"/><text x="100.1185%" y="815.50"></text></g><g><title>sudoku-solver`DYLD-STUB$$pthread_mutex_unlock (4 samples, 0.02%)</title><rect x="99.9703%" y="837" width="0.0170%" height="15" fill="rgb(254,125,32)" fg:x="23567" fg:w="4"/><text x="100.2203%" y="847.50"></text></g><g><title>all (23,574 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(253,97,22)" fg:x="0" fg:w="23574"/><text x="0.2500%" y="991.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (23,568 samples, 99.97%)</title><rect x="0.0255%" y="965" width="99.9745%" height="15" fill="rgb(241,101,14)" fg:x="6" fg:w="23568"/><text x="0.2755%" y="975.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (23,568 samples, 99.97%)</title><rect x="0.0255%" y="949" width="99.9745%" height="15" fill="rgb(238,103,29)" fg:x="6" fg:w="23568"/><text x="0.2755%" y="959.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>sudoku-solver`std::sys::unix::thread::Thread::new::thread_start (23,568 samples, 99.97%)</title><rect x="0.0255%" y="933" width="99.9745%" height="15" fill="rgb(233,195,47)" fg:x="6" fg:w="23568"/><text x="0.2755%" y="943.50">sudoku-solver`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>sudoku-solver`core::ops::function::FnOnce::call_once{{vtable.shim}} (23,568 samples, 99.97%)</title><rect x="0.0255%" y="917" width="99.9745%" height="15" fill="rgb(246,218,30)" fg:x="6" fg:w="23568"/><text x="0.2755%" y="927.50">sudoku-solver`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (23,568 samples, 99.97%)</title><rect x="0.0255%" y="901" width="99.9745%" height="15" fill="rgb(219,145,47)" fg:x="6" fg:w="23568"/><text x="0.2755%" y="911.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::solve_sudoku (23,545 samples, 99.88%)</title><rect x="0.1230%" y="885" width="99.8770%" height="15" fill="rgb(243,12,26)" fg:x="29" fg:w="23545"/><text x="0.3730%" y="895.50">sudoku-solver`sudoku_solver::solve_sudoku</text></g><g><title>sudoku-solver`sudoku_solver::print_sudoku (626 samples, 2.66%)</title><rect x="97.3445%" y="869" width="2.6555%" height="15" fill="rgb(214,87,16)" fg:x="22948" fg:w="626"/><text x="97.5945%" y="879.50">su..</text></g><g><title>sudoku-solver`std::io::stdio::_print (605 samples, 2.57%)</title><rect x="97.4336%" y="853" width="2.5664%" height="15" fill="rgb(208,99,42)" fg:x="22969" fg:w="605"/><text x="97.6836%" y="863.50">su..</text></g><g><title>sudoku-solver`core::fmt::write (3 samples, 0.01%)</title><rect x="99.9873%" y="837" width="0.0127%" height="15" fill="rgb(253,99,2)" fg:x="23571" fg:w="3"/><text x="100.2373%" y="847.50"></text></g></svg></svg>