<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="15301"><g><title>sudoku-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.03%)</title><rect x="0.0065%" y="853" width="0.0261%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="4"/><text x="0.2565%" y="863.50"></text></g><g><title>sudoku-solver`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.0196%" y="837" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.2696%" y="847.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (89 samples, 0.58%)</title><rect x="21.7698%" y="53" width="0.5817%" height="15" fill="rgb(221,193,54)" fg:x="3331" fg:w="89"/><text x="22.0198%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (72 samples, 0.47%)</title><rect x="21.8809%" y="37" width="0.4706%" height="15" fill="rgb(248,212,6)" fg:x="3348" fg:w="72"/><text x="22.1309%" y="47.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (169 samples, 1.10%)</title><rect x="21.7175%" y="69" width="1.1045%" height="15" fill="rgb(208,68,35)" fg:x="3323" fg:w="169"/><text x="21.9675%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (72 samples, 0.47%)</title><rect x="22.3515%" y="53" width="0.4706%" height="15" fill="rgb(232,128,0)" fg:x="3420" fg:w="72"/><text x="22.6015%" y="63.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (204 samples, 1.33%)</title><rect x="21.6718%" y="85" width="1.3332%" height="15" fill="rgb(207,160,47)" fg:x="3316" fg:w="204"/><text x="21.9218%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (28 samples, 0.18%)</title><rect x="22.8220%" y="69" width="0.1830%" height="15" fill="rgb(228,23,34)" fg:x="3492" fg:w="28"/><text x="23.0720%" y="79.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (361 samples, 2.36%)</title><rect x="21.4888%" y="101" width="2.3593%" height="15" fill="rgb(218,30,26)" fg:x="3288" fg:w="361"/><text x="21.7388%" y="111.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (129 samples, 0.84%)</title><rect x="23.0050%" y="85" width="0.8431%" height="15" fill="rgb(220,122,19)" fg:x="3520" fg:w="129"/><text x="23.2550%" y="95.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (941 samples, 6.15%)</title><rect x="20.5150%" y="117" width="6.1499%" height="15" fill="rgb(250,228,42)" fg:x="3139" fg:w="941"/><text x="20.7650%" y="127.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (431 samples, 2.82%)</title><rect x="23.8481%" y="101" width="2.8168%" height="15" fill="rgb(240,193,28)" fg:x="3649" fg:w="431"/><text x="24.0981%" y="111.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (2,068 samples, 13.52%)</title><rect x="18.5543%" y="133" width="13.5155%" height="15" fill="rgb(216,20,37)" fg:x="2839" fg:w="2068"/><text x="18.8043%" y="143.50">sudoku-solver`sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (827 samples, 5.40%)</title><rect x="26.6649%" y="117" width="5.4049%" height="15" fill="rgb(206,188,39)" fg:x="4080" fg:w="827"/><text x="26.9149%" y="127.50">sudoku-..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (3,823 samples, 24.99%)</title><rect x="15.5676%" y="149" width="24.9853%" height="15" fill="rgb(217,207,13)" fg:x="2382" fg:w="3823"/><text x="15.8176%" y="159.50">sudoku-solver`sudoku_solver::backtraking..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,298 samples, 8.48%)</title><rect x="32.0698%" y="133" width="8.4831%" height="15" fill="rgb(231,73,38)" fg:x="4907" fg:w="1298"/><text x="32.3198%" y="143.50">sudoku-solve..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (5,716 samples, 37.36%)</title><rect x="12.5743%" y="165" width="37.3570%" height="15" fill="rgb(225,20,46)" fg:x="1924" fg:w="5716"/><text x="12.8243%" y="175.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursi..</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,435 samples, 9.38%)</title><rect x="40.5529%" y="149" width="9.3785%" height="15" fill="rgb(210,31,41)" fg:x="6205" fg:w="1435"/><text x="40.8029%" y="159.50">sudoku-solver..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (7,220 samples, 47.19%)</title><rect x="10.7183%" y="181" width="47.1865%" height="15" fill="rgb(221,200,47)" fg:x="1640" fg:w="7220"/><text x="10.9683%" y="191.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,220 samples, 7.97%)</title><rect x="49.9314%" y="165" width="7.9733%" height="15" fill="rgb(226,26,5)" fg:x="7640" fg:w="1220"/><text x="50.1814%" y="175.50">sudoku-solv..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (7,697 samples, 50.30%)</title><rect x="10.2019%" y="197" width="50.3039%" height="15" fill="rgb(249,33,26)" fg:x="1561" fg:w="7697"/><text x="10.4519%" y="207.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (398 samples, 2.60%)</title><rect x="57.9047%" y="181" width="2.6011%" height="15" fill="rgb(235,183,28)" fg:x="8860" fg:w="398"/><text x="58.1547%" y="191.50">su..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9,033 samples, 59.04%)</title><rect x="9.0582%" y="213" width="59.0354%" height="15" fill="rgb(221,5,38)" fg:x="1386" fg:w="9033"/><text x="9.3082%" y="223.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (1,161 samples, 7.59%)</title><rect x="60.5058%" y="197" width="7.5877%" height="15" fill="rgb(247,18,42)" fg:x="9258" fg:w="1161"/><text x="60.7558%" y="207.50">sudoku-sol..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (9,890 samples, 64.64%)</title><rect x="7.5747%" y="229" width="64.6363%" height="15" fill="rgb(241,131,45)" fg:x="1159" fg:w="9890"/><text x="7.8247%" y="239.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (630 samples, 4.12%)</title><rect x="68.0936%" y="213" width="4.1174%" height="15" fill="rgb(249,31,29)" fg:x="10419" fg:w="630"/><text x="68.3436%" y="223.50">sudo..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (11,120 samples, 72.67%)</title><rect x="5.8885%" y="245" width="72.6750%" height="15" fill="rgb(225,111,53)" fg:x="901" fg:w="11120"/><text x="6.1385%" y="255.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (972 samples, 6.35%)</title><rect x="72.2110%" y="229" width="6.3525%" height="15" fill="rgb(238,160,17)" fg:x="11049" fg:w="972"/><text x="72.4610%" y="239.50">sudoku-s..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12,052 samples, 78.77%)</title><rect x="4.4507%" y="261" width="78.7661%" height="15" fill="rgb(214,148,48)" fg:x="681" fg:w="12052"/><text x="4.7007%" y="271.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (712 samples, 4.65%)</title><rect x="78.5635%" y="245" width="4.6533%" height="15" fill="rgb(232,36,49)" fg:x="12021" fg:w="712"/><text x="78.8135%" y="255.50">sudok..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (12,922 samples, 84.45%)</title><rect x="3.5096%" y="277" width="84.4520%" height="15" fill="rgb(209,103,24)" fg:x="537" fg:w="12922"/><text x="3.7596%" y="287.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (726 samples, 4.74%)</title><rect x="83.2168%" y="261" width="4.7448%" height="15" fill="rgb(229,88,8)" fg:x="12733" fg:w="726"/><text x="83.4668%" y="271.50">sudoku..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,277 samples, 86.77%)</title><rect x="3.1109%" y="293" width="86.7721%" height="15" fill="rgb(213,181,19)" fg:x="476" fg:w="13277"/><text x="3.3609%" y="303.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (294 samples, 1.92%)</title><rect x="87.9616%" y="277" width="1.9214%" height="15" fill="rgb(254,191,54)" fg:x="13459" fg:w="294"/><text x="88.2116%" y="287.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,567 samples, 88.67%)</title><rect x="2.8103%" y="309" width="88.6674%" height="15" fill="rgb(241,83,37)" fg:x="430" fg:w="13567"/><text x="3.0603%" y="319.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (244 samples, 1.59%)</title><rect x="89.8830%" y="293" width="1.5947%" height="15" fill="rgb(233,36,39)" fg:x="13753" fg:w="244"/><text x="90.1330%" y="303.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (13,891 samples, 90.78%)</title><rect x="2.2482%" y="325" width="90.7849%" height="15" fill="rgb(226,3,54)" fg:x="344" fg:w="13891"/><text x="2.4982%" y="335.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (238 samples, 1.56%)</title><rect x="91.4777%" y="309" width="1.5555%" height="15" fill="rgb(245,192,40)" fg:x="13997" fg:w="238"/><text x="91.7277%" y="319.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,250 samples, 93.13%)</title><rect x="1.7123%" y="341" width="93.1312%" height="15" fill="rgb(238,167,29)" fg:x="262" fg:w="14250"/><text x="1.9623%" y="351.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (277 samples, 1.81%)</title><rect x="93.0331%" y="325" width="1.8103%" height="15" fill="rgb(232,182,51)" fg:x="14235" fg:w="277"/><text x="93.2831%" y="335.50">s..</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,562 samples, 95.17%)</title><rect x="1.2221%" y="357" width="95.1703%" height="15" fill="rgb(231,60,39)" fg:x="187" fg:w="14562"/><text x="1.4721%" y="367.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (237 samples, 1.55%)</title><rect x="94.8435%" y="341" width="1.5489%" height="15" fill="rgb(208,69,12)" fg:x="14512" fg:w="237"/><text x="95.0935%" y="351.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (14,895 samples, 97.35%)</title><rect x="0.7320%" y="373" width="97.3466%" height="15" fill="rgb(235,93,37)" fg:x="112" fg:w="14895"/><text x="0.9820%" y="383.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (258 samples, 1.69%)</title><rect x="96.3924%" y="357" width="1.6862%" height="15" fill="rgb(213,116,39)" fg:x="14749" fg:w="258"/><text x="96.6424%" y="367.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,091 samples, 98.63%)</title><rect x="0.3856%" y="389" width="98.6275%" height="15" fill="rgb(222,207,29)" fg:x="59" fg:w="15091"/><text x="0.6356%" y="399.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (143 samples, 0.93%)</title><rect x="98.0786%" y="373" width="0.9346%" height="15" fill="rgb(206,96,30)" fg:x="15007" fg:w="143"/><text x="98.3286%" y="383.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,197 samples, 99.32%)</title><rect x="0.1961%" y="405" width="99.3203%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="15197"/><text x="0.4461%" y="415.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (77 samples, 0.50%)</title><rect x="99.0131%" y="389" width="0.5032%" height="15" fill="rgb(250,191,14)" fg:x="15150" fg:w="77"/><text x="99.2631%" y="399.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,226 samples, 99.51%)</title><rect x="0.1569%" y="421" width="99.5098%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="15226"/><text x="0.4069%" y="431.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (23 samples, 0.15%)</title><rect x="99.5164%" y="405" width="0.1503%" height="15" fill="rgb(206,27,48)" fg:x="15227" fg:w="23"/><text x="99.7664%" y="415.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,239 samples, 99.59%)</title><rect x="0.1242%" y="437" width="99.5948%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="15239"/><text x="0.3742%" y="447.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (8 samples, 0.05%)</title><rect x="99.6667%" y="421" width="0.0523%" height="15" fill="rgb(250,213,24)" fg:x="15250" fg:w="8"/><text x="99.9167%" y="431.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,257 samples, 99.71%)</title><rect x="0.0915%" y="453" width="99.7124%" height="15" fill="rgb(247,123,22)" fg:x="14" fg:w="15257"/><text x="0.3415%" y="463.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (13 samples, 0.08%)</title><rect x="99.7190%" y="437" width="0.0850%" height="15" fill="rgb(231,138,38)" fg:x="15258" fg:w="13"/><text x="99.9690%" y="447.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,270 samples, 99.80%)</title><rect x="0.0719%" y="469" width="99.7974%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="15270"/><text x="0.3219%" y="479.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (10 samples, 0.07%)</title><rect x="99.8039%" y="453" width="0.0654%" height="15" fill="rgb(251,118,11)" fg:x="15271" fg:w="10"/><text x="100.0539%" y="463.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,280 samples, 99.86%)</title><rect x="0.0654%" y="485" width="99.8628%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="15280"/><text x="0.3154%" y="495.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (9 samples, 0.06%)</title><rect x="99.8693%" y="469" width="0.0588%" height="15" fill="rgb(247,81,37)" fg:x="15281" fg:w="9"/><text x="100.1193%" y="479.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,287 samples, 99.91%)</title><rect x="0.0523%" y="517" width="99.9085%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="15287"/><text x="0.3023%" y="527.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,287 samples, 99.91%)</title><rect x="0.0523%" y="501" width="99.9085%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="15287"/><text x="0.3023%" y="511.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (5 samples, 0.03%)</title><rect x="99.9281%" y="485" width="0.0327%" height="15" fill="rgb(248,47,43)" fg:x="15290" fg:w="5"/><text x="100.1781%" y="495.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,290 samples, 99.93%)</title><rect x="0.0457%" y="549" width="99.9281%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="15290"/><text x="0.2957%" y="559.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,290 samples, 99.93%)</title><rect x="0.0457%" y="533" width="99.9281%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="15290"/><text x="0.2957%" y="543.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="99.9608%" y="517" width="0.0131%" height="15" fill="rgb(222,148,37)" fg:x="15295" fg:w="2"/><text x="100.2108%" y="527.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,292 samples, 99.94%)</title><rect x="0.0457%" y="565" width="99.9412%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="15292"/><text x="0.2957%" y="575.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::check_sudoku::check_row (2 samples, 0.01%)</title><rect x="99.9739%" y="549" width="0.0131%" height="15" fill="rgb(247,98,35)" fg:x="15297" fg:w="2"/><text x="100.2239%" y="559.50"></text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="853" width="99.9543%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="863.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="837" width="99.9543%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="847.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="821" width="99.9543%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="831.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="805" width="99.9543%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="815.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="789" width="99.9543%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="799.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="773" width="99.9543%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="783.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="757" width="99.9543%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="767.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="741" width="99.9543%" height="15" fill="rgb(240,54,50)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="751.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="725" width="99.9543%" height="15" fill="rgb(233,84,52)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="735.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="709" width="99.9543%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="719.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="693" width="99.9543%" height="15" fill="rgb(249,43,39)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="703.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="677" width="99.9543%" height="15" fill="rgb(209,38,44)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="687.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="661" width="99.9543%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="671.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="645" width="99.9543%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="655.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,294 samples, 99.95%)</title><rect x="0.0392%" y="629" width="99.9543%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="15294"/><text x="0.2892%" y="639.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,293 samples, 99.95%)</title><rect x="0.0457%" y="613" width="99.9477%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="15293"/><text x="0.2957%" y="623.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,293 samples, 99.95%)</title><rect x="0.0457%" y="597" width="99.9477%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="15293"/><text x="0.2957%" y="607.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>sudoku-solver`sudoku_solver::backtraking::backtraking_recursive (15,293 samples, 99.95%)</title><rect x="0.0457%" y="581" width="99.9477%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="15293"/><text x="0.2957%" y="591.50">sudoku-solver`sudoku_solver::backtraking::backtraking_recursive</text></g><g><title>all (15,301 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="975.50"></text></g><g><title>dyld`start (15,301 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="959.50">dyld`start</text></g><g><title>sudoku-solver`main (15,301 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="943.50">sudoku-solver`main</text></g><g><title>sudoku-solver`std::rt::lang_start_internal (15,301 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="927.50">sudoku-solver`std::rt::lang_start_internal</text></g><g><title>sudoku-solver`std::rt::lang_start::_{{closure}} (15,301 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="911.50">sudoku-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (15,301 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="895.50">sudoku-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sudoku-solver`sudoku_solver::main (15,301 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="15301"/><text x="0.2500%" y="879.50">sudoku-solver`sudoku_solver::main</text></g></svg></svg>